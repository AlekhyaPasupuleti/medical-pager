{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport React, { useContext } from 'react';\nimport { getDisplayName } from './utils/getDisplayName';\nexport var ChatContext = React.createContext({});\nexport var ChatProvider = function (_a) {\n  var children = _a.children,\n    value = _a.value;\n  return React.createElement(ChatContext.Provider, {\n    value: value\n  }, children);\n};\nexport var useChatContext = function () {\n  return useContext(ChatContext);\n};\n/**\n * Typescript currently does not support partial inference so if ChatContext\n * typing is desired while using the HOC withChatContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport var withChatContext = function (Component) {\n  var WithChatContextComponent = function (props) {\n    var chatContext = useChatContext();\n    return React.createElement(Component, __assign({}, props, chatContext));\n  };\n  WithChatContextComponent.displayName = \"WithChatContext\" + getDisplayName(Component);\n  return WithChatContextComponent;\n};","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","useContext","getDisplayName","ChatContext","createContext","ChatProvider","_a","children","value","createElement","Provider","useChatContext","withChatContext","Component","WithChatContextComponent","props","chatContext","displayName"],"sources":["C:/Users/alekh/Desktop/Medical-App/client/node_modules/stream-chat-react/dist/context/ChatContext.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { useContext } from 'react';\nimport { getDisplayName } from './utils/getDisplayName';\nexport var ChatContext = React.createContext({});\nexport var ChatProvider = function (_a) {\n    var children = _a.children, value = _a.value;\n    return (React.createElement(ChatContext.Provider, { value: value }, children));\n};\nexport var useChatContext = function () { return useContext(ChatContext); };\n/**\n * Typescript currently does not support partial inference so if ChatContext\n * typing is desired while using the HOC withChatContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport var withChatContext = function (Component) {\n    var WithChatContextComponent = function (props) {\n        var chatContext = useChatContext();\n        return React.createElement(Component, __assign({}, props, chatContext));\n    };\n    WithChatContextComponent.displayName = \"WithChatContext\" + getDisplayName(Component);\n    return WithChatContextComponent;\n};\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,IAAI,IAAI,IAAI,CAACA,QAAQ,IAAK,YAAY;EAClDA,QAAQ,GAAGC,MAAM,CAACC,MAAM,IAAI,UAASC,CAAC,EAAE;IACpC,KAAK,IAAIC,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAC,CAAC;MAChB,KAAK,IAAII,CAAC,IAAIL,CAAC,EAAE,IAAIH,MAAM,CAACS,SAAS,CAACC,cAAc,CAACC,IAAI,CAACR,CAAC,EAAEK,CAAC,CAAC,EAC3DN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IACnB;IACA,OAAON,CAAC;EACZ,CAAC;EACD,OAAOH,QAAQ,CAACa,KAAK,CAAC,IAAI,EAAEN,SAAS,CAAC;AAC1C,CAAC;AACD,OAAOO,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,cAAc,QAAQ,wBAAwB;AACvD,OAAO,IAAIC,WAAW,GAAGH,KAAK,CAACI,aAAa,CAAC,CAAC,CAAC,CAAC;AAChD,OAAO,IAAIC,YAAY,GAAG,SAAAA,CAAUC,EAAE,EAAE;EACpC,IAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAQ;IAAEC,KAAK,GAAGF,EAAE,CAACE,KAAK;EAC5C,OAAQR,KAAK,CAACS,aAAa,CAACN,WAAW,CAACO,QAAQ,EAAE;IAAEF,KAAK,EAAEA;EAAM,CAAC,EAAED,QAAQ,CAAC;AACjF,CAAC;AACD,OAAO,IAAII,cAAc,GAAG,SAAAA,CAAA,EAAY;EAAE,OAAOV,UAAU,CAACE,WAAW,CAAC;AAAE,CAAC;AAC3E;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIS,eAAe,GAAG,SAAAA,CAAUC,SAAS,EAAE;EAC9C,IAAIC,wBAAwB,GAAG,SAAAA,CAAUC,KAAK,EAAE;IAC5C,IAAIC,WAAW,GAAGL,cAAc,CAAC,CAAC;IAClC,OAAOX,KAAK,CAACS,aAAa,CAACI,SAAS,EAAE3B,QAAQ,CAAC,CAAC,CAAC,EAAE6B,KAAK,EAAEC,WAAW,CAAC,CAAC;EAC3E,CAAC;EACDF,wBAAwB,CAACG,WAAW,GAAG,iBAAiB,GAAGf,cAAc,CAACW,SAAS,CAAC;EACpF,OAAOC,wBAAwB;AACnC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}
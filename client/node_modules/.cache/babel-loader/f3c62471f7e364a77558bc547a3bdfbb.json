{"ast":null,"code":"import React, { useState, useRef, useEffect, useCallback, useMemo } from 'react';\nimport fscreen from 'fscreen';\nfunction useFullScreenHandle() {\n  var _useState = useState(false),\n    active = _useState[0],\n    setActive = _useState[1];\n  var node = useRef(null);\n  useEffect(function () {\n    var handleChange = function handleChange() {\n      setActive(fscreen.fullscreenElement === node.current);\n    };\n    fscreen.addEventListener('fullscreenchange', handleChange);\n    return function () {\n      return fscreen.removeEventListener('fullscreenchange', handleChange);\n    };\n  }, []);\n  var enter = useCallback(function () {\n    if (fscreen.fullscreenElement) {\n      return fscreen.exitFullscreen().then(function () {\n        return fscreen.requestFullscreen(node.current);\n      });\n    } else if (node.current) {\n      return fscreen.requestFullscreen(node.current);\n    }\n  }, []);\n  var exit = useCallback(function () {\n    if (fscreen.fullscreenElement === node.current) {\n      return fscreen.exitFullscreen();\n    }\n    return Promise.resolve();\n  }, []);\n  return useMemo(function () {\n    return {\n      active: active,\n      enter: enter,\n      exit: exit,\n      node: node\n    };\n  }, [active, enter, exit]);\n}\nvar FullScreen = function FullScreen(_ref) {\n  var handle = _ref.handle,\n    onChange = _ref.onChange,\n    children = _ref.children,\n    className = _ref.className;\n  var classNames = [];\n  if (className) {\n    classNames.push(className);\n  }\n  classNames.push('fullscreen');\n  if (handle.active) {\n    classNames.push('fullscreen-enabled');\n  }\n  useEffect(function () {\n    if (onChange) {\n      onChange(handle.active, handle);\n    }\n  }, [handle.active]);\n  return React.createElement(\"div\", {\n    className: classNames.join(' '),\n    ref: handle.node,\n    style: handle.active ? {\n      height: '100%',\n      width: '100%'\n    } : undefined\n  }, children);\n};\nexport { FullScreen, useFullScreenHandle };","map":{"version":3,"sources":["../src/index.tsx"],"names":["useFullScreenHandle","active","setActive","useState","node","useRef","useEffect","handleChange","fscreen","fullscreenElement","current","addEventListener","removeEventListener","enter","useCallback","exitFullscreen","then","requestFullscreen","exit","Promise","resolve","useMemo","FullScreen","handle","onChange","children","className","classNames","push","join","ref","style","height","width","undefined"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useState,\n  useRef,\n  useEffect,\n  useMemo,\n} from 'react';\nimport fscreen from 'fscreen';\n\nexport interface FullScreenHandle {\n  active: boolean;\n  enter: () => Promise<void>;\n  exit: () => Promise<void>;\n  node: React.MutableRefObject<HTMLDivElement | null>;\n}\n\nexport interface FullScreenProps {\n  handle: FullScreenHandle;\n  children: any;\n  onChange?: (state: boolean, handle: FullScreenHandle) => void;\n  className?: string;\n}\n\nexport function useFullScreenHandle(): FullScreenHandle {\n  const [active, setActive] = useState<boolean>(false);\n  const node = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    const handleChange = () => {\n      setActive(fscreen.fullscreenElement === node.current);\n    };\n    fscreen.addEventListener('fullscreenchange', handleChange);\n    return () => fscreen.removeEventListener('fullscreenchange', handleChange);\n  }, []);\n\n  const enter = useCallback(() => {\n    if (fscreen.fullscreenElement) {\n      return fscreen.exitFullscreen().then(() => {\n        return fscreen.requestFullscreen(node.current);\n      });\n    } else if (node.current) {\n      return fscreen.requestFullscreen(node.current);\n    }\n  }, []);\n\n  const exit = useCallback(() => {\n    if (fscreen.fullscreenElement === node.current) {\n      return fscreen.exitFullscreen();\n    }\n    return Promise.resolve();\n  }, []);\n\n  return useMemo(\n    () => ({\n      active,\n      enter,\n      exit,\n      node,\n    }),\n    [active, enter, exit],\n  );\n}\n\nexport const FullScreen: React.FC<FullScreenProps> = ({\n  handle,\n  onChange,\n  children,\n  className,\n}) => {\n  const classNames = [];\n  if (className) {\n    classNames.push(className);\n  }\n\n  classNames.push('fullscreen');\n\n  if (handle.active) {\n    classNames.push('fullscreen-enabled');\n  }\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(handle.active, handle);\n    }\n  }, [handle.active]);\n\n  return (\n    <div\n      className={classNames.join(' ')}\n      ref={handle.node}\n      style={handle.active ? { height: '100%', width: '100%' } : undefined}\n    >\n      {children}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from 'react';\nimport { useChat } from './hooks/useChat';\nimport { darkModeTheme, useCustomStyles } from './hooks/useCustomStyles';\nimport { ChatProvider } from '../../context/ChatContext';\nimport { TranslationProvider } from '../../context/TranslationContext';\n/**\n * Wrapper component for a StreamChat application. Chat needs to be placed around any other chat components\n * as it provides the ChatContext.\n */\nexport var Chat = function (props) {\n  var children = props.children,\n    client = props.client,\n    customStyles = props.customStyles,\n    _a = props.darkMode,\n    darkMode = _a === void 0 ? false : _a,\n    defaultLanguage = props.defaultLanguage,\n    i18nInstance = props.i18nInstance,\n    _b = props.initialNavOpen,\n    initialNavOpen = _b === void 0 ? true : _b,\n    _c = props.theme,\n    theme = _c === void 0 ? 'messaging light' : _c,\n    _d = props.useImageFlagEmojisOnWindows,\n    useImageFlagEmojisOnWindows = _d === void 0 ? false : _d;\n  var _e = useChat({\n      client: client,\n      defaultLanguage: defaultLanguage,\n      i18nInstance: i18nInstance,\n      initialNavOpen: initialNavOpen\n    }),\n    channel = _e.channel,\n    closeMobileNav = _e.closeMobileNav,\n    mutes = _e.mutes,\n    navOpen = _e.navOpen,\n    openMobileNav = _e.openMobileNav,\n    setActiveChannel = _e.setActiveChannel,\n    translators = _e.translators;\n  useCustomStyles(darkMode ? darkModeTheme : customStyles);\n  if (!translators.t) return null;\n  return React.createElement(ChatProvider, {\n    value: {\n      channel: channel,\n      client: client,\n      closeMobileNav: closeMobileNav,\n      mutes: mutes,\n      navOpen: navOpen,\n      openMobileNav: openMobileNav,\n      setActiveChannel: setActiveChannel,\n      theme: theme,\n      useImageFlagEmojisOnWindows: useImageFlagEmojisOnWindows\n    }\n  }, React.createElement(TranslationProvider, {\n    value: translators\n  }, children));\n};","map":{"version":3,"names":["React","useChat","darkModeTheme","useCustomStyles","ChatProvider","TranslationProvider","Chat","props","children","client","customStyles","_a","darkMode","defaultLanguage","i18nInstance","_b","initialNavOpen","_c","theme","_d","useImageFlagEmojisOnWindows","_e","channel","closeMobileNav","mutes","navOpen","openMobileNav","setActiveChannel","translators","t","createElement","value"],"sources":["C:/Users/alekh/Desktop/Medical-App/client/node_modules/stream-chat-react/dist/components/Chat/Chat.js"],"sourcesContent":["import React from 'react';\nimport { useChat } from './hooks/useChat';\nimport { darkModeTheme, useCustomStyles } from './hooks/useCustomStyles';\nimport { ChatProvider } from '../../context/ChatContext';\nimport { TranslationProvider } from '../../context/TranslationContext';\n/**\n * Wrapper component for a StreamChat application. Chat needs to be placed around any other chat components\n * as it provides the ChatContext.\n */\nexport var Chat = function (props) {\n    var children = props.children, client = props.client, customStyles = props.customStyles, _a = props.darkMode, darkMode = _a === void 0 ? false : _a, defaultLanguage = props.defaultLanguage, i18nInstance = props.i18nInstance, _b = props.initialNavOpen, initialNavOpen = _b === void 0 ? true : _b, _c = props.theme, theme = _c === void 0 ? 'messaging light' : _c, _d = props.useImageFlagEmojisOnWindows, useImageFlagEmojisOnWindows = _d === void 0 ? false : _d;\n    var _e = useChat({ client: client, defaultLanguage: defaultLanguage, i18nInstance: i18nInstance, initialNavOpen: initialNavOpen }), channel = _e.channel, closeMobileNav = _e.closeMobileNav, mutes = _e.mutes, navOpen = _e.navOpen, openMobileNav = _e.openMobileNav, setActiveChannel = _e.setActiveChannel, translators = _e.translators;\n    useCustomStyles(darkMode ? darkModeTheme : customStyles);\n    if (!translators.t)\n        return null;\n    return (React.createElement(ChatProvider, { value: {\n            channel: channel,\n            client: client,\n            closeMobileNav: closeMobileNav,\n            mutes: mutes,\n            navOpen: navOpen,\n            openMobileNav: openMobileNav,\n            setActiveChannel: setActiveChannel,\n            theme: theme,\n            useImageFlagEmojisOnWindows: useImageFlagEmojisOnWindows,\n        } },\n        React.createElement(TranslationProvider, { value: translators }, children)));\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SAASC,aAAa,EAAEC,eAAe,QAAQ,yBAAyB;AACxE,SAASC,YAAY,QAAQ,2BAA2B;AACxD,SAASC,mBAAmB,QAAQ,kCAAkC;AACtE;AACA;AACA;AACA;AACA,OAAO,IAAIC,IAAI,GAAG,SAAAA,CAAUC,KAAK,EAAE;EAC/B,IAAIC,QAAQ,GAAGD,KAAK,CAACC,QAAQ;IAAEC,MAAM,GAAGF,KAAK,CAACE,MAAM;IAAEC,YAAY,GAAGH,KAAK,CAACG,YAAY;IAAEC,EAAE,GAAGJ,KAAK,CAACK,QAAQ;IAAEA,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,EAAE;IAAEE,eAAe,GAAGN,KAAK,CAACM,eAAe;IAAEC,YAAY,GAAGP,KAAK,CAACO,YAAY;IAAEC,EAAE,GAAGR,KAAK,CAACS,cAAc;IAAEA,cAAc,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,IAAI,GAAGA,EAAE;IAAEE,EAAE,GAAGV,KAAK,CAACW,KAAK;IAAEA,KAAK,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,iBAAiB,GAAGA,EAAE;IAAEE,EAAE,GAAGZ,KAAK,CAACa,2BAA2B;IAAEA,2BAA2B,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,EAAE;EAC1c,IAAIE,EAAE,GAAGpB,OAAO,CAAC;MAAEQ,MAAM,EAAEA,MAAM;MAAEI,eAAe,EAAEA,eAAe;MAAEC,YAAY,EAAEA,YAAY;MAAEE,cAAc,EAAEA;IAAe,CAAC,CAAC;IAAEM,OAAO,GAAGD,EAAE,CAACC,OAAO;IAAEC,cAAc,GAAGF,EAAE,CAACE,cAAc;IAAEC,KAAK,GAAGH,EAAE,CAACG,KAAK;IAAEC,OAAO,GAAGJ,EAAE,CAACI,OAAO;IAAEC,aAAa,GAAGL,EAAE,CAACK,aAAa;IAAEC,gBAAgB,GAAGN,EAAE,CAACM,gBAAgB;IAAEC,WAAW,GAAGP,EAAE,CAACO,WAAW;EAC5UzB,eAAe,CAACS,QAAQ,GAAGV,aAAa,GAAGQ,YAAY,CAAC;EACxD,IAAI,CAACkB,WAAW,CAACC,CAAC,EACd,OAAO,IAAI;EACf,OAAQ7B,KAAK,CAAC8B,aAAa,CAAC1B,YAAY,EAAE;IAAE2B,KAAK,EAAE;MAC3CT,OAAO,EAAEA,OAAO;MAChBb,MAAM,EAAEA,MAAM;MACdc,cAAc,EAAEA,cAAc;MAC9BC,KAAK,EAAEA,KAAK;MACZC,OAAO,EAAEA,OAAO;MAChBC,aAAa,EAAEA,aAAa;MAC5BC,gBAAgB,EAAEA,gBAAgB;MAClCT,KAAK,EAAEA,KAAK;MACZE,2BAA2B,EAAEA;IACjC;EAAE,CAAC,EACHpB,KAAK,CAAC8B,aAAa,CAACzB,mBAAmB,EAAE;IAAE0B,KAAK,EAAEH;EAAY,CAAC,EAAEpB,QAAQ,CAAC,CAAC;AACnF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}
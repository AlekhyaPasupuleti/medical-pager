{"ast":null,"code":"import { useCallback } from 'react';\nimport { useImageUploads } from './useImageUploads';\nimport { useFileUploads } from './useFileUploads';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { generateRandomId } from '../../../utils';\nvar apiMaxNumberOfFiles = 10;\nexport var useAttachments = function (props, state, dispatch) {\n  var noFiles = props.noFiles;\n  var fileUploads = state.fileUploads,\n    imageUploads = state.imageUploads;\n  var _a = useChannelStateContext(),\n    maxNumberOfFiles = _a.maxNumberOfFiles,\n    multipleUploads = _a.multipleUploads;\n  var _b = useFileUploads(props, state, dispatch),\n    removeFile = _b.removeFile,\n    uploadFile = _b.uploadFile;\n  var _c = useImageUploads(props, state, dispatch),\n    removeImage = _c.removeImage,\n    uploadImage = _c.uploadImage;\n  // Number of files that the user can still add. Should never be more than the amount allowed by the API.\n  // If multipleUploads is false, we only want to allow a single upload.\n  var maxFilesAllowed = !multipleUploads ? 1 : maxNumberOfFiles || apiMaxNumberOfFiles;\n  var numberOfImages = Object.values(imageUploads).filter(function (_a) {\n    var state = _a.state;\n    return state !== 'failed';\n  }).length;\n  var numberOfFiles = Object.values(fileUploads).filter(function (_a) {\n    var state = _a.state;\n    return state !== 'failed';\n  }).length;\n  var numberOfUploads = numberOfImages + numberOfFiles;\n  var maxFilesLeft = maxFilesAllowed - numberOfUploads;\n  var uploadNewFiles = useCallback(function (files) {\n    Array.from(files).slice(0, maxFilesLeft).forEach(function (file) {\n      var id = generateRandomId();\n      if (file.type.startsWith('image/') && !file.type.endsWith('.photoshop') // photoshop files begin with 'image/'\n      ) {\n        dispatch({\n          file: file,\n          id: id,\n          state: 'uploading',\n          type: 'setImageUpload'\n        });\n      } else if (file instanceof File && !noFiles) {\n        dispatch({\n          file: file,\n          id: id,\n          state: 'uploading',\n          type: 'setFileUpload'\n        });\n      }\n    });\n  }, [maxFilesLeft, noFiles]);\n  return {\n    maxFilesLeft: maxFilesLeft,\n    numberOfUploads: numberOfUploads,\n    removeFile: removeFile,\n    removeImage: removeImage,\n    uploadFile: uploadFile,\n    uploadImage: uploadImage,\n    uploadNewFiles: uploadNewFiles\n  };\n};","map":{"version":3,"names":["useCallback","useImageUploads","useFileUploads","useChannelStateContext","generateRandomId","apiMaxNumberOfFiles","useAttachments","props","state","dispatch","noFiles","fileUploads","imageUploads","_a","maxNumberOfFiles","multipleUploads","_b","removeFile","uploadFile","_c","removeImage","uploadImage","maxFilesAllowed","numberOfImages","Object","values","filter","length","numberOfFiles","numberOfUploads","maxFilesLeft","uploadNewFiles","files","Array","from","slice","forEach","file","id","type","startsWith","endsWith","File"],"sources":["C:/Users/alekh/Desktop/Medical-App/client/node_modules/stream-chat-react/dist/components/MessageInput/hooks/useAttachments.js"],"sourcesContent":["import { useCallback } from 'react';\nimport { useImageUploads } from './useImageUploads';\nimport { useFileUploads } from './useFileUploads';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { generateRandomId } from '../../../utils';\nvar apiMaxNumberOfFiles = 10;\nexport var useAttachments = function (props, state, dispatch) {\n    var noFiles = props.noFiles;\n    var fileUploads = state.fileUploads, imageUploads = state.imageUploads;\n    var _a = useChannelStateContext(), maxNumberOfFiles = _a.maxNumberOfFiles, multipleUploads = _a.multipleUploads;\n    var _b = useFileUploads(props, state, dispatch), removeFile = _b.removeFile, uploadFile = _b.uploadFile;\n    var _c = useImageUploads(props, state, dispatch), removeImage = _c.removeImage, uploadImage = _c.uploadImage;\n    // Number of files that the user can still add. Should never be more than the amount allowed by the API.\n    // If multipleUploads is false, we only want to allow a single upload.\n    var maxFilesAllowed = !multipleUploads ? 1 : maxNumberOfFiles || apiMaxNumberOfFiles;\n    var numberOfImages = Object.values(imageUploads).filter(function (_a) {\n        var state = _a.state;\n        return state !== 'failed';\n    })\n        .length;\n    var numberOfFiles = Object.values(fileUploads).filter(function (_a) {\n        var state = _a.state;\n        return state !== 'failed';\n    }).length;\n    var numberOfUploads = numberOfImages + numberOfFiles;\n    var maxFilesLeft = maxFilesAllowed - numberOfUploads;\n    var uploadNewFiles = useCallback(function (files) {\n        Array.from(files)\n            .slice(0, maxFilesLeft)\n            .forEach(function (file) {\n            var id = generateRandomId();\n            if (file.type.startsWith('image/') &&\n                !file.type.endsWith('.photoshop') // photoshop files begin with 'image/'\n            ) {\n                dispatch({ file: file, id: id, state: 'uploading', type: 'setImageUpload' });\n            }\n            else if (file instanceof File && !noFiles) {\n                dispatch({ file: file, id: id, state: 'uploading', type: 'setFileUpload' });\n            }\n        });\n    }, [maxFilesLeft, noFiles]);\n    return {\n        maxFilesLeft: maxFilesLeft,\n        numberOfUploads: numberOfUploads,\n        removeFile: removeFile,\n        removeImage: removeImage,\n        uploadFile: uploadFile,\n        uploadImage: uploadImage,\n        uploadNewFiles: uploadNewFiles,\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { fromByteArray } from 'base64-js';\nimport _extends from '@babel/runtime/helpers/extends';\nimport _typeof from '@babel/runtime/helpers/typeof';\nimport _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport axios from 'axios';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport FormData from 'form-data';\nimport WebSocket from 'isomorphic-ws';\nfunction isString$1(arrayOrString) {\n  return typeof arrayOrString === 'string';\n}\nfunction isMapStringCallback(arrayOrString, callback) {\n  return !!callback && isString$1(arrayOrString);\n} // source - https://github.com/beatgammit/base64-js/blob/master/test/convert.js#L72\n\nfunction map(arrayOrString, callback) {\n  var res = [];\n  if (isString$1(arrayOrString) && isMapStringCallback(arrayOrString, callback)) {\n    for (var k = 0, len = arrayOrString.length; k < len; k++) {\n      if (arrayOrString.charAt(k)) {\n        var kValue = arrayOrString.charAt(k);\n        var mappedValue = callback(kValue, k, arrayOrString);\n        res[k] = mappedValue;\n      }\n    }\n  } else if (!isString$1(arrayOrString) && !isMapStringCallback(arrayOrString, callback)) {\n    for (var _k = 0, _len = arrayOrString.length; _k < _len; _k++) {\n      if (_k in arrayOrString) {\n        var _kValue = arrayOrString[_k];\n        var _mappedValue = callback(_kValue, _k, arrayOrString);\n        res[_k] = _mappedValue;\n      }\n    }\n  }\n  return res;\n}\nvar encodeBase64 = function encodeBase64(data) {\n  return fromByteArray(new Uint8Array(map(data, function (char) {\n    return char.charCodeAt(0);\n  })));\n}; // base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\n\nvar decodeBase64 = function decodeBase64(s) {\n  var e = {},\n    w = String.fromCharCode,\n    L = s.length;\n  var i,\n    b = 0,\n    c,\n    x,\n    l = 0,\n    a,\n    r = '';\n  var A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  for (i = 0; i < 64; i++) {\n    e[A.charAt(i)] = i;\n  }\n  for (x = 0; x < L; x++) {\n    c = e[s.charAt(x)];\n    b = (b << 6) + c;\n    l += 6;\n    while (l >= 8) {\n      ((a = b >>> (l -= 8) & 0xff) || x < L - 2) && (r += w(a));\n    }\n  }\n  return r;\n};\nvar https = null;\nfunction ownKeys$4(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$4(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$4(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$4(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n\n/**\n * ChannelState - A container class for the channel state.\n */\nvar ChannelState = /*#__PURE__*/function () {\n  /**\n   * Flag which indicates if channel state contain latest/recent messages or no.\n   * This flag should be managed by UI sdks using a setter - setIsUpToDate.\n   * When false, any new message (received by websocket event - message.new) will not\n   * be pushed on to message list.\n   */\n  function ChannelState(channel) {\n    var _this = this,\n      _channel$state;\n    _classCallCheck(this, ChannelState);\n    _defineProperty(this, \"_channel\", void 0);\n    _defineProperty(this, \"watcher_count\", void 0);\n    _defineProperty(this, \"typing\", void 0);\n    _defineProperty(this, \"read\", void 0);\n    _defineProperty(this, \"messages\", void 0);\n    _defineProperty(this, \"pinnedMessages\", void 0);\n    _defineProperty(this, \"threads\", void 0);\n    _defineProperty(this, \"mutedUsers\", void 0);\n    _defineProperty(this, \"watchers\", void 0);\n    _defineProperty(this, \"members\", void 0);\n    _defineProperty(this, \"unreadCount\", void 0);\n    _defineProperty(this, \"membership\", void 0);\n    _defineProperty(this, \"last_message_at\", void 0);\n    _defineProperty(this, \"isUpToDate\", void 0);\n    _defineProperty(this, \"setIsUpToDate\", function (isUpToDate) {\n      _this.isUpToDate = isUpToDate;\n    });\n    _defineProperty(this, \"removeMessageFromArray\", function (msgArray, msg) {\n      var result = msgArray.filter(function (message) {\n        return !(!!message.id && !!msg.id && message.id === msg.id);\n      });\n      return {\n        removed: result.length < msgArray.length,\n        result: result\n      };\n    });\n    _defineProperty(this, \"updateUserMessages\", function (user) {\n      var _updateUserMessages = function _updateUserMessages(messages, user) {\n        for (var i = 0; i < messages.length; i++) {\n          var _m$user;\n          var m = messages[i];\n          if (((_m$user = m.user) === null || _m$user === void 0 ? void 0 : _m$user.id) === user.id) {\n            messages[i] = _objectSpread$4(_objectSpread$4({}, m), {}, {\n              user: user\n            });\n          }\n        }\n      };\n      _updateUserMessages(_this.messages, user);\n      for (var parentId in _this.threads) {\n        _updateUserMessages(_this.threads[parentId], user);\n      }\n      _updateUserMessages(_this.pinnedMessages, user);\n    });\n    _defineProperty(this, \"deleteUserMessages\", function (user) {\n      var hardDelete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var _deleteUserMessages = function _deleteUserMessages(messages, user) {\n        var hardDelete = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        for (var i = 0; i < messages.length; i++) {\n          var _m$user2;\n          var m = messages[i];\n          if (((_m$user2 = m.user) === null || _m$user2 === void 0 ? void 0 : _m$user2.id) !== user.id) {\n            continue;\n          }\n          if (hardDelete) {\n            /**\n             * In case of hard delete, we need to strip down all text, html,\n             * attachments and all the custom properties on message\n             */\n            messages[i] = {\n              cid: m.cid,\n              created_at: m.created_at,\n              deleted_at: user.deleted_at,\n              id: m.id,\n              latest_reactions: [],\n              mentioned_users: [],\n              own_reactions: [],\n              parent_id: m.parent_id,\n              reply_count: m.reply_count,\n              status: m.status,\n              thread_participants: m.thread_participants,\n              type: 'deleted',\n              updated_at: m.updated_at,\n              user: m.user\n            };\n          } else {\n            messages[i] = _objectSpread$4(_objectSpread$4({}, m), {}, {\n              type: 'deleted',\n              deleted_at: user.deleted_at\n            });\n          }\n        }\n      };\n      _deleteUserMessages(_this.messages, user, hardDelete);\n      for (var parentId in _this.threads) {\n        _deleteUserMessages(_this.threads[parentId], user, hardDelete);\n      }\n      _deleteUserMessages(_this.pinnedMessages, user, hardDelete);\n    });\n    this._channel = channel;\n    this.watcher_count = 0;\n    this.typing = {};\n    this.read = {};\n    this.messages = [];\n    this.pinnedMessages = [];\n    this.threads = {}; // a list of users to hide messages from\n\n    this.mutedUsers = [];\n    this.watchers = {};\n    this.members = {};\n    this.membership = {};\n    this.unreadCount = 0;\n    /**\n     * Flag which indicates if channel state contain latest/recent messages or no.\n     * This flag should be managed by UI sdks using a setter - setIsUpToDate.\n     * When false, any new message (received by websocket event - message.new) will not\n     * be pushed on to message list.\n     */\n\n    this.isUpToDate = true;\n    this.last_message_at = (channel === null || channel === void 0 ? void 0 : (_channel$state = channel.state) === null || _channel$state === void 0 ? void 0 : _channel$state.last_message_at) != null ? new Date(channel.state.last_message_at) : null;\n  }\n  /**\n   * addMessageSorted - Add a message to the state\n   *\n   * @param {MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} newMessage A new message\n   * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   *\n   */\n\n  _createClass(ChannelState, [{\n    key: \"addMessageSorted\",\n    value: function addMessageSorted(newMessage) {\n      var timestampChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var addIfDoesNotExist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return this.addMessagesSorted([newMessage], timestampChanged, false, addIfDoesNotExist);\n    }\n    /**\n     * formatMessage - Takes the message object. Parses the dates, sets __html\n     * and sets the status to received if missing. Returns a message object\n     *\n     * @param {MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} message a message object\n     *\n     */\n  }, {\n    key: \"formatMessage\",\n    value: function formatMessage(message) {\n      return _objectSpread$4(_objectSpread$4({}, message), {}, {\n        /**\n         * @deprecated please use `html`\n         */\n        __html: message.html,\n        // parse the date..\n        pinned_at: message.pinned_at ? new Date(message.pinned_at) : null,\n        created_at: message.created_at ? new Date(message.created_at) : new Date(),\n        updated_at: message.updated_at ? new Date(message.updated_at) : new Date(),\n        status: message.status || 'received'\n      });\n    }\n    /**\n     * addMessagesSorted - Add the list of messages to state and resorts the messages\n     *\n     * @param {Array<MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} newMessages A list of messages\n     * @param {boolean} timestampChanged Whether updating messages with changed created_at value.\n     * @param {boolean} initializing Whether channel is being initialized.\n     * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n     *\n     */\n  }, {\n    key: \"addMessagesSorted\",\n    value: function addMessagesSorted(newMessages) {\n      var timestampChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var initializing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var addIfDoesNotExist = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      for (var i = 0; i < newMessages.length; i += 1) {\n        var _this$_channel;\n        var message = this.formatMessage(newMessages[i]);\n        if (message.user && (_this$_channel = this._channel) !== null && _this$_channel !== void 0 && _this$_channel.cid) {\n          /**\n           * Store the reference to user for this channel, so that when we have to\n           * handle updates to user, we can use the reference map, to determine which\n           * channels need to be updated with updated user object.\n           */\n          this._channel.getClient().state.updateUserReference(message.user, this._channel.cid);\n        }\n        if (initializing && message.id && this.threads[message.id]) {\n          // If we are initializing the state of channel (e.g., in case of connection recovery),\n          // then in that case we remove thread related to this message from threads object.\n          // This way we can ensure that we don't have any stale data in thread object\n          // and consumer can refetch the replies.\n          delete this.threads[message.id];\n        }\n        if (!this.last_message_at) {\n          this.last_message_at = new Date(message.created_at.getTime());\n        }\n        if (message.created_at.getTime() > this.last_message_at.getTime()) {\n          this.last_message_at = new Date(message.created_at.getTime());\n        } // update or append the messages...\n\n        var parentID = message.parent_id; // add to the main message list\n\n        if (!parentID || message.show_in_channel) {\n          this.messages = this._addToMessageList(this.messages, message, timestampChanged, 'created_at', addIfDoesNotExist);\n        }\n        /**\n         * Add message to thread if applicable and the message\n         * was added when querying for replies, or the thread already exits.\n         * This is to prevent the thread state from getting out of sync if\n         * a thread message is shown in channel but older than the newest thread\n         * message. This situation can result in a thread state where a random\n         * message is \"oldest\" message, and newer messages are therefore not loaded.\n         * This can also occur if an old thread message is updated.\n         */\n\n        if (parentID && !initializing) {\n          var thread = this.threads[parentID] || [];\n          var threadMessages = this._addToMessageList(thread, message, timestampChanged, 'created_at', addIfDoesNotExist);\n          this.threads[parentID] = threadMessages;\n        }\n      }\n    }\n    /**\n     * addPinnedMessages - adds messages in pinnedMessages property\n     *\n     * @param {Array<MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} pinnedMessages A list of pinned messages\n     *\n     */\n  }, {\n    key: \"addPinnedMessages\",\n    value: function addPinnedMessages(pinnedMessages) {\n      for (var i = 0; i < pinnedMessages.length; i += 1) {\n        this.addPinnedMessage(pinnedMessages[i]);\n      }\n    }\n    /**\n     * addPinnedMessage - adds message in pinnedMessages\n     *\n     * @param {MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} pinnedMessage message to update\n     *\n     */\n  }, {\n    key: \"addPinnedMessage\",\n    value: function addPinnedMessage(pinnedMessage) {\n      this.pinnedMessages = this._addToMessageList(this.pinnedMessages, this.formatMessage(pinnedMessage), false, 'pinned_at');\n    }\n    /**\n     * removePinnedMessage - removes pinned message from pinnedMessages\n     *\n     * @param {MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} message message to remove\n     *\n     */\n  }, {\n    key: \"removePinnedMessage\",\n    value: function removePinnedMessage(message) {\n      var _this$removeMessageFr = this.removeMessageFromArray(this.pinnedMessages, message),\n        result = _this$removeMessageFr.result;\n      this.pinnedMessages = result;\n    }\n  }, {\n    key: \"addReaction\",\n    value: function addReaction(reaction, message, enforce_unique) {\n      var _this2 = this;\n      if (!message) return;\n      var messageWithReaction = message;\n      this._updateMessage(message, function (msg) {\n        messageWithReaction.own_reactions = _this2._addOwnReactionToMessage(msg.own_reactions, reaction, enforce_unique);\n        return _this2.formatMessage(messageWithReaction);\n      });\n      return messageWithReaction;\n    }\n  }, {\n    key: \"_addOwnReactionToMessage\",\n    value: function _addOwnReactionToMessage(ownReactions, reaction, enforce_unique) {\n      if (enforce_unique) {\n        ownReactions = [];\n      } else {\n        ownReactions = this._removeOwnReactionFromMessage(ownReactions, reaction);\n      }\n      ownReactions = ownReactions || [];\n      if (this._channel.getClient().userID === reaction.user_id) {\n        ownReactions.push(reaction);\n      }\n      return ownReactions;\n    }\n  }, {\n    key: \"_removeOwnReactionFromMessage\",\n    value: function _removeOwnReactionFromMessage(ownReactions, reaction) {\n      if (ownReactions) {\n        return ownReactions.filter(function (item) {\n          return item.user_id !== reaction.user_id || item.type !== reaction.type;\n        });\n      }\n      return ownReactions;\n    }\n  }, {\n    key: \"removeReaction\",\n    value: function removeReaction(reaction, message) {\n      var _this3 = this;\n      if (!message) return;\n      var messageWithReaction = message;\n      this._updateMessage(message, function (msg) {\n        messageWithReaction.own_reactions = _this3._removeOwnReactionFromMessage(msg.own_reactions, reaction);\n        return _this3.formatMessage(messageWithReaction);\n      });\n      return messageWithReaction;\n    }\n  }, {\n    key: \"removeQuotedMessageReferences\",\n    value: function removeQuotedMessageReferences(message) {\n      var parseMessage = function parseMessage(m) {\n        var _m$pinned_at, _m$updated_at;\n        return _objectSpread$4(_objectSpread$4({}, m), {}, {\n          created_at: m.created_at.toString(),\n          pinned_at: (_m$pinned_at = m.pinned_at) === null || _m$pinned_at === void 0 ? void 0 : _m$pinned_at.toString(),\n          updated_at: (_m$updated_at = m.updated_at) === null || _m$updated_at === void 0 ? void 0 : _m$updated_at.toString()\n        });\n      };\n      var updatedMessages = this.messages.filter(function (msg) {\n        return msg.quoted_message_id === message.id;\n      }).map(parseMessage).map(function (msg) {\n        return _objectSpread$4(_objectSpread$4({}, msg), {}, {\n          quoted_message: _objectSpread$4(_objectSpread$4({}, message), {}, {\n            attachments: []\n          })\n        });\n      });\n      this.addMessagesSorted(updatedMessages, true);\n    }\n    /**\n     * Updates all instances of given message in channel state\n     * @param message\n     * @param updateFunc\n     */\n  }, {\n    key: \"_updateMessage\",\n    value: function _updateMessage(message, updateFunc) {\n      var parent_id = message.parent_id,\n        show_in_channel = message.show_in_channel,\n        pinned = message.pinned;\n      if (parent_id && this.threads[parent_id]) {\n        var thread = this.threads[parent_id];\n        var msgIndex = thread.findIndex(function (msg) {\n          return msg.id === message.id;\n        });\n        if (msgIndex !== -1) {\n          thread[msgIndex] = updateFunc(thread[msgIndex]);\n          this.threads[parent_id] = thread;\n        }\n      }\n      if (!show_in_channel && !parent_id || show_in_channel) {\n        var _msgIndex = this.messages.findIndex(function (msg) {\n          return msg.id === message.id;\n        });\n        if (_msgIndex !== -1) {\n          this.messages[_msgIndex] = updateFunc(this.messages[_msgIndex]);\n        }\n      }\n      if (pinned) {\n        var _msgIndex2 = this.pinnedMessages.findIndex(function (msg) {\n          return msg.id === message.id;\n        });\n        if (_msgIndex2 !== -1) {\n          this.pinnedMessages[_msgIndex2] = updateFunc(this.pinnedMessages[_msgIndex2]);\n        }\n      }\n    }\n    /**\n     * Setter for isUpToDate.\n     *\n     * @param isUpToDate  Flag which indicates if channel state contain latest/recent messages or no.\n     *                    This flag should be managed by UI sdks using a setter - setIsUpToDate.\n     *                    When false, any new message (received by websocket event - message.new) will not\n     *                    be pushed on to message list.\n     */\n  }, {\n    key: \"_addToMessageList\",\n    value:\n    /**\n     * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isn't found\n     *\n     * @param {Array<ReturnType<ChannelState<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>['formatMessage']>>} messages A list of messages\n     * @param message\n     * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n     * @param {string} sortBy field name to use to sort the messages by\n     * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n     */\n    function _addToMessageList(messages, message) {\n      var timestampChanged = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var sortBy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'created_at';\n      var addIfDoesNotExist = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n      var addMessageToList = addIfDoesNotExist || timestampChanged;\n      var messageArr = messages; // if created_at has changed, message should be filtered and re-inserted in correct order\n      // slow op but usually this only happens for a message inserted to state before actual response with correct timestamp\n\n      if (timestampChanged) {\n        messageArr = messageArr.filter(function (msg) {\n          return !(msg.id && message.id === msg.id);\n        });\n      } // Get array length after filtering\n\n      var messageArrayLength = messageArr.length; // for empty list just concat and return unless it's an update or deletion\n\n      if (messageArrayLength === 0 && addMessageToList) {\n        return messageArr.concat(message);\n      } else if (messageArrayLength === 0) {\n        return _toConsumableArray(messageArr);\n      }\n      var messageTime = message[sortBy].getTime();\n      var messageIsNewest = messageArr[messageArrayLength - 1][sortBy].getTime() < messageTime; // if message is newer than last item in the list concat and return unless it's an update or deletion\n\n      if (messageIsNewest && addMessageToList) {\n        return messageArr.concat(message);\n      } else if (messageIsNewest) {\n        return _toConsumableArray(messageArr);\n      } // find the closest index to push the new message\n\n      var left = 0;\n      var middle = 0;\n      var right = messageArrayLength - 1;\n      while (left <= right) {\n        middle = Math.floor((right + left) / 2);\n        if (messageArr[middle][sortBy].getTime() <= messageTime) left = middle + 1;else right = middle - 1;\n      } // message already exists and not filtered due to timestampChanged, update and return\n\n      if (!timestampChanged && message.id) {\n        if (messageArr[left] && message.id === messageArr[left].id) {\n          messageArr[left] = message;\n          return _toConsumableArray(messageArr);\n        }\n        if (messageArr[left - 1] && message.id === messageArr[left - 1].id) {\n          messageArr[left - 1] = message;\n          return _toConsumableArray(messageArr);\n        }\n      } // Do not add updated or deleted messages to the list if they do not already exist\n      // or have a timestamp change.\n\n      if (addMessageToList) {\n        messageArr.splice(left, 0, message);\n      }\n      return _toConsumableArray(messageArr);\n    }\n    /**\n     * removeMessage - Description\n     *\n     * @param {{ id: string; parent_id?: string }} messageToRemove Object of the message to remove. Needs to have at id specified.\n     *\n     * @return {boolean} Returns if the message was removed\n     */\n  }, {\n    key: \"removeMessage\",\n    value: function removeMessage(messageToRemove) {\n      var isRemoved = false;\n      if (messageToRemove.parent_id && this.threads[messageToRemove.parent_id]) {\n        var _this$removeMessageFr2 = this.removeMessageFromArray(this.threads[messageToRemove.parent_id], messageToRemove),\n          removed = _this$removeMessageFr2.removed,\n          threadMessages = _this$removeMessageFr2.result;\n        this.threads[messageToRemove.parent_id] = threadMessages;\n        isRemoved = removed;\n      } else {\n        var _this$removeMessageFr3 = this.removeMessageFromArray(this.messages, messageToRemove),\n          _removed = _this$removeMessageFr3.removed,\n          messages = _this$removeMessageFr3.result;\n        this.messages = messages;\n        isRemoved = _removed;\n      }\n      return isRemoved;\n    }\n  }, {\n    key: \"filterErrorMessages\",\n    value:\n    /**\n     * filterErrorMessages - Removes error messages from the channel state.\n     *\n     */\n    function filterErrorMessages() {\n      var filteredMessages = this.messages.filter(function (message) {\n        return message.type !== 'error';\n      });\n      this.messages = filteredMessages;\n    }\n    /**\n     * clean - Remove stale data such as users that stayed in typing state for more than 5 seconds\n     */\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      var now = new Date(); // prevent old users from showing up as typing\n\n      for (var _i = 0, _Object$entries = Object.entries(this.typing); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          userID = _Object$entries$_i[0],\n          lastEvent = _Object$entries$_i[1];\n        var receivedAt = typeof lastEvent.received_at === 'string' ? new Date(lastEvent.received_at) : lastEvent.received_at || new Date();\n        if (now.getTime() - receivedAt.getTime() > 7000) {\n          delete this.typing[userID];\n          this._channel.getClient().dispatchEvent({\n            cid: this._channel.cid,\n            type: 'typing.stop',\n            user: {\n              id: userID\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: \"clearMessages\",\n    value: function clearMessages() {\n      this.messages = [];\n      this.pinnedMessages = [];\n    }\n  }]);\n  return ChannelState;\n}();\nfunction ownKeys$3(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$3(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$3(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$3(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar EVENT_MAP = {\n  'channel.created': true,\n  'channel.deleted': true,\n  'channel.hidden': true,\n  'channel.muted': true,\n  'channel.truncated': true,\n  'channel.unmuted': true,\n  'channel.updated': true,\n  'channel.visible': true,\n  'health.check': true,\n  'member.added': true,\n  'member.removed': true,\n  'member.updated': true,\n  'message.deleted': true,\n  'message.new': true,\n  'message.read': true,\n  'message.updated': true,\n  'notification.added_to_channel': true,\n  'notification.channel_deleted': true,\n  'notification.channel_mutes_updated': true,\n  'notification.channel_truncated': true,\n  'notification.invite_accepted': true,\n  'notification.invite_rejected': true,\n  'notification.invited': true,\n  'notification.mark_read': true,\n  'notification.message_new': true,\n  'notification.mutes_updated': true,\n  'notification.removed_from_channel': true,\n  'reaction.deleted': true,\n  'reaction.new': true,\n  'reaction.updated': true,\n  'typing.start': true,\n  'typing.stop': true,\n  'user.banned': true,\n  'user.deleted': true,\n  'user.presence.changed': true,\n  'user.unbanned': true,\n  'user.updated': true,\n  'user.watching.start': true,\n  'user.watching.stop': true,\n  // local events\n  'connection.changed': true,\n  'connection.recovered': true\n};\nvar IS_VALID_EVENT_MAP_TYPE = _objectSpread$3(_objectSpread$3({}, EVENT_MAP), {}, {\n  all: true\n});\nvar isValidEventType = function isValidEventType(eventType) {\n  return IS_VALID_EVENT_MAP_TYPE[eventType] || false;\n};\nfunction _createForOfIteratorHelper$3(o, allowArrayLike) {\n  var it;\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray$3(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$3(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen);\n}\nfunction _arrayLikeToArray$3(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n\n/**\n * logChatPromiseExecution - utility function for logging the execution of a promise..\n *  use this when you want to run the promise and handle errors by logging a warning\n *\n * @param {Promise<T>} promise The promise you want to run and log\n * @param {string} name    A descriptive name of what the promise does for log output\n *\n */\nfunction logChatPromiseExecution(promise, name) {\n  promise.then().catch(function (error) {\n    console.warn(\"failed to do \".concat(name, \", ran into error: \"), error);\n  });\n}\nvar sleep = function sleep(m) {\n  return new Promise(function (r) {\n    return setTimeout(r, m);\n  });\n};\nfunction isFunction(value) {\n  return value && (Object.prototype.toString.call(value) === '[object Function]' || 'function' === typeof value || value instanceof Function);\n}\nvar chatCodes = {\n  TOKEN_EXPIRED: 40,\n  WS_CLOSED_SUCCESS: 1000\n};\nfunction isReadableStream(obj) {\n  return obj !== null && _typeof(obj) === 'object' && (obj.readable || typeof obj._read === 'function');\n}\nfunction isBuffer(obj) {\n  return obj != null && obj.constructor != null &&\n  // @ts-expect-error\n  typeof obj.constructor.isBuffer === 'function' &&\n  // @ts-expect-error\n  obj.constructor.isBuffer(obj);\n}\nfunction isFileWebAPI(uri) {\n  return typeof window !== 'undefined' && 'File' in window && uri instanceof File;\n}\nfunction isOwnUser(user) {\n  return (user === null || user === void 0 ? void 0 : user.total_unread_count) !== undefined;\n}\nfunction isOwnUserBaseProperty(property) {\n  var ownUserBaseProperties = {\n    channel_mutes: true,\n    devices: true,\n    mutes: true,\n    total_unread_count: true,\n    unread_channels: true,\n    unread_count: true,\n    invisible: true,\n    roles: true\n  };\n  return ownUserBaseProperties[property];\n}\nfunction addFileToFormData(uri, name, contentType) {\n  var data = new FormData();\n  if (isReadableStream(uri) || isBuffer(uri) || isFileWebAPI(uri)) {\n    if (name) data.append('file', uri, name);else data.append('file', uri);\n  } else {\n    data.append('file', {\n      uri: uri,\n      name: name || uri.split('/').reverse()[0],\n      contentType: contentType || undefined,\n      type: contentType || undefined\n    });\n  }\n  return data;\n}\nfunction normalizeQuerySort(sort) {\n  var sortFields = [];\n  var sortArr = Array.isArray(sort) ? sort : [sort];\n  var _iterator = _createForOfIteratorHelper$3(sortArr),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n      var entries = Object.entries(item);\n      if (entries.length > 1) {\n        console.warn(\"client._buildSort() - multiple fields in a single sort object detected. Object's field order is not guaranteed\");\n      }\n      for (var _i = 0, _entries = entries; _i < _entries.length; _i++) {\n        var _entries$_i = _slicedToArray(_entries[_i], 2),\n          field = _entries$_i[0],\n          direction = _entries$_i[1];\n        sortFields.push({\n          field: field,\n          direction: direction\n        });\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return sortFields;\n}\n/**\n * retryInterval - A retry interval which increases acc to number of failures\n *\n * @return {number} Duration to wait in milliseconds\n */\n\nfunction retryInterval(numberOfFailures) {\n  // try to reconnect in 0.25-25 seconds (random to spread out the load from failures)\n  var max = Math.min(500 + numberOfFailures * 2000, 25000);\n  var min = Math.min(Math.max(250, (numberOfFailures - 1) * 2000), 25000);\n  return Math.floor(Math.random() * (max - min) + min);\n}\n/** adopted from https://github.com/ai/nanoid/blob/master/non-secure/index.js */\n\nvar alphabet = 'ModuleSymbhasOwnPr0123456789ABCDEFGHNRVfgctiUvzKqYTJkLxpZXIjQW';\nfunction randomId() {\n  var id = '';\n  for (var i = 0; i < 21; i++) {\n    id += alphabet[Math.random() * 64 | 0];\n  }\n  return id;\n}\nfunction _createForOfIteratorHelper$2(o, allowArrayLike) {\n  var it;\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray$2(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$2(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);\n}\nfunction _arrayLikeToArray$2(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$2(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$2(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n\n/**\n * Channel - The Channel class manages it's own state.\n */\nvar Channel = /*#__PURE__*/function () {\n  /**\n   * constructor - Create a channel\n   *\n   * @param {StreamChat<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>} client the chat client\n   * @param {string} type  the type of channel\n   * @param {string} [id]  the id of the chat\n   * @param {ChannelData<ChannelType>} data any additional custom params\n   *\n   * @return {Channel<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>} Returns a new uninitialized channel\n   */\n  function Channel(client, type, id, data) {\n    var _this = this;\n    _classCallCheck(this, Channel);\n    _defineProperty(this, \"_client\", void 0);\n    _defineProperty(this, \"type\", void 0);\n    _defineProperty(this, \"id\", void 0);\n    _defineProperty(this, \"data\", void 0);\n    _defineProperty(this, \"_data\", void 0);\n    _defineProperty(this, \"cid\", void 0);\n    _defineProperty(this, \"listeners\", void 0);\n    _defineProperty(this, \"state\", void 0);\n    _defineProperty(this, \"initialized\", void 0);\n    _defineProperty(this, \"lastKeyStroke\", void 0);\n    _defineProperty(this, \"lastTypingEvent\", void 0);\n    _defineProperty(this, \"isTyping\", void 0);\n    _defineProperty(this, \"disconnected\", void 0);\n    _defineProperty(this, \"create\", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var options;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = {\n                watch: false,\n                state: false,\n                presence: false\n              };\n              _context.next = 3;\n              return _this.query(options);\n            case 3:\n              return _context.abrupt(\"return\", _context.sent);\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n    _defineProperty(this, \"_callChannelListeners\", function (event) {\n      var channel = _this; // gather and call the listeners\n\n      var listeners = [];\n      if (channel.listeners.all) {\n        listeners.push.apply(listeners, _toConsumableArray(channel.listeners.all));\n      }\n      if (channel.listeners[event.type]) {\n        listeners.push.apply(listeners, _toConsumableArray(channel.listeners[event.type]));\n      } // call the event and send it to the listeners\n\n      for (var _i = 0, _listeners = listeners; _i < _listeners.length; _i++) {\n        var listener = _listeners[_i];\n        if (typeof listener !== 'string') {\n          listener(event);\n        }\n      }\n    });\n    _defineProperty(this, \"_channelURL\", function () {\n      if (!_this.id) {\n        throw new Error('channel id is not defined');\n      }\n      return \"\".concat(_this.getClient().baseURL, \"/channels/\").concat(_this.type, \"/\").concat(_this.id);\n    });\n    var validTypeRe = /^[\\w_-]+$/;\n    var validIDRe = /^[\\w!_-]+$/;\n    if (!validTypeRe.test(type)) {\n      throw new Error(\"Invalid chat type \".concat(type, \", letters, numbers and \\\"_-\\\" are allowed\"));\n    }\n    if (typeof id === 'string' && !validIDRe.test(id)) {\n      throw new Error(\"Invalid chat id \".concat(id, \", letters, numbers and \\\"!-_\\\" are allowed\"));\n    }\n    this._client = client;\n    this.type = type;\n    this.id = id; // used by the frontend, gets updated:\n\n    this.data = data; // this._data is used for the requests...\n\n    this._data = _objectSpread$2({}, data);\n    this.cid = \"\".concat(type, \":\").concat(id);\n    this.listeners = {}; // perhaps the state variable should be private\n\n    this.state = new ChannelState(this);\n    this.initialized = false;\n    this.lastTypingEvent = null;\n    this.isTyping = false;\n    this.disconnected = false;\n  }\n  /**\n   * getClient - Get the chat client for this channel. If client.disconnect() was called, this function will error\n   *\n   * @return {StreamChat<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>}\n   */\n\n  _createClass(Channel, [{\n    key: \"getClient\",\n    value: function getClient() {\n      if (this.disconnected === true) {\n        throw Error(\"You can't use a channel after client.disconnect() was called\");\n      }\n      return this._client;\n    }\n    /**\n     * getConfig - Get the configs for this channel type\n     *\n     * @return {Record<string, unknown>}\n     */\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      var client = this.getClient();\n      return client.configs[this.type];\n    }\n    /**\n     * sendMessage - Send a message to this channel\n     *\n     * @param {Message<AttachmentType, MessageType, UserType>} message The Message object\n     * @param {{ skip_push?: boolean }} [options] Option object, {skip_push: true} to skip sending push notifications\n     *\n     * @return {Promise<SendMessageAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The Server Response\n     */\n  }, {\n    key: \"sendMessage\",\n    value: function () {\n      var _sendMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(message, options) {\n        var sendMessageResponse;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getClient().post(this._channelURL() + '/message', _objectSpread$2({\n                  message: message\n                }, options));\n              case 2:\n                sendMessageResponse = _context2.sent;\n                // Reset unreadCount to 0.\n                this.state.unreadCount = 0;\n                return _context2.abrupt(\"return\", sendMessageResponse);\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function sendMessage(_x, _x2) {\n        return _sendMessage.apply(this, arguments);\n      }\n      return sendMessage;\n    }()\n  }, {\n    key: \"sendFile\",\n    value: function sendFile(uri, name, contentType, user) {\n      return this.getClient().sendFile(\"\".concat(this._channelURL(), \"/file\"), uri, name, contentType, user);\n    }\n  }, {\n    key: \"sendImage\",\n    value: function sendImage(uri, name, contentType, user) {\n      return this.getClient().sendFile(\"\".concat(this._channelURL(), \"/image\"), uri, name, contentType, user);\n    }\n  }, {\n    key: \"deleteFile\",\n    value: function deleteFile(url) {\n      return this.getClient().delete(\"\".concat(this._channelURL(), \"/file\"), {\n        url: url\n      });\n    }\n  }, {\n    key: \"deleteImage\",\n    value: function deleteImage(url) {\n      return this.getClient().delete(\"\".concat(this._channelURL(), \"/image\"), {\n        url: url\n      });\n    }\n    /**\n     * sendEvent - Send an event on this channel\n     *\n     * @param {Event<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>} event for example {type: 'message.read'}\n     *\n     * @return {Promise<EventAPIResponse<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>>} The Server Response\n     */\n  }, {\n    key: \"sendEvent\",\n    value: function () {\n      var _sendEvent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this._checkInitialized();\n                _context3.next = 3;\n                return this.getClient().post(this._channelURL() + '/event', {\n                  event: event\n                });\n              case 3:\n                return _context3.abrupt(\"return\", _context3.sent);\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function sendEvent(_x3) {\n        return _sendEvent.apply(this, arguments);\n      }\n      return sendEvent;\n    }()\n    /**\n     * search - Query messages\n     *\n     * @param {MessageFilters<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType> | string}  query search query or object MongoDB style filters\n     * @param {{client_id?: string; connection_id?: string; query?: string; message_filter_conditions?: MessageFilters<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>}} options Option object, {user_id: 'tommaso'}\n     *\n     * @return {Promise<SearchAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} search messages response\n     */\n  }, {\n    key: \"search\",\n    value: function () {\n      var _search = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(query) {\n        var options,\n          payload,\n          _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n                if (!(options.offset && (options.sort || options.next))) {\n                  _context4.next = 3;\n                  break;\n                }\n                throw Error(\"Cannot specify offset with sort or next parameters\");\n              case 3:\n                // Return a list of channels\n                payload = _objectSpread$2(_objectSpread$2({\n                  filter_conditions: {\n                    cid: this.cid\n                  }\n                }, options), {}, {\n                  sort: options.sort ? normalizeQuerySort(options.sort) : undefined\n                });\n                if (!(typeof query === 'string')) {\n                  _context4.next = 8;\n                  break;\n                }\n                payload.query = query;\n                _context4.next = 13;\n                break;\n              case 8:\n                if (!(_typeof(query) === 'object')) {\n                  _context4.next = 12;\n                  break;\n                }\n                payload.message_filter_conditions = query;\n                _context4.next = 13;\n                break;\n              case 12:\n                throw Error(\"Invalid type \".concat(_typeof(query), \" for query parameter\"));\n              case 13:\n                _context4.next = 15;\n                return this.getClient().wsPromise;\n              case 15:\n                _context4.next = 17;\n                return this.getClient().get(this.getClient().baseURL + '/search', {\n                  payload: payload\n                });\n              case 17:\n                return _context4.abrupt(\"return\", _context4.sent);\n              case 18:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function search(_x4) {\n        return _search.apply(this, arguments);\n      }\n      return search;\n    }()\n    /**\n     * queryMembers - Query Members\n     *\n     * @param {UserFilters<UserType>}  filterConditions object MongoDB style filters\n     * @param {UserSort<UserType>} [sort] Sort options, for instance [{created_at: -1}].\n     * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_active: -1}, {created_at: 1}]\n     * @param {{ limit?: number; offset?: number }} [options] Option object, {limit: 10, offset:10}\n     *\n     * @return {Promise<ChannelMemberAPIResponse<UserType>>} Query Members response\n     */\n  }, {\n    key: \"queryMembers\",\n    value: function () {\n      var _queryMembers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(filterConditions) {\n        var _this$data;\n        var sort,\n          options,\n          id,\n          type,\n          members,\n          _args5 = arguments;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                sort = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : [];\n                options = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : {};\n                type = this.type;\n                if (this.id) {\n                  id = this.id;\n                } else if ((_this$data = this.data) !== null && _this$data !== void 0 && _this$data.members && Array.isArray(this.data.members)) {\n                  members = this.data.members;\n                } // Return a list of members\n\n                _context5.next = 6;\n                return this.getClient().get(this.getClient().baseURL + '/members', {\n                  payload: _objectSpread$2({\n                    type: type,\n                    id: id,\n                    members: members,\n                    sort: normalizeQuerySort(sort),\n                    filter_conditions: filterConditions\n                  }, options)\n                });\n              case 6:\n                return _context5.abrupt(\"return\", _context5.sent);\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function queryMembers(_x5) {\n        return _queryMembers.apply(this, arguments);\n      }\n      return queryMembers;\n    }()\n    /**\n     * sendReaction - Send a reaction about a message\n     *\n     * @param {string} messageID the message id\n     * @param {Reaction<ReactionType, UserType>} reaction the reaction object for instance {type: 'love'}\n     * @param {{ enforce_unique?: boolean, skip_push?: boolean }} [options] Option object, {enforce_unique: true, skip_push: true} to override any existing reaction or skip sending push notifications\n     *\n     * @return {Promise<ReactionAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The Server Response\n     */\n  }, {\n    key: \"sendReaction\",\n    value: function () {\n      var _sendReaction = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(messageID, reaction, options) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (messageID) {\n                  _context6.next = 2;\n                  break;\n                }\n                throw Error(\"Message id is missing\");\n              case 2:\n                if (!(!reaction || Object.keys(reaction).length === 0)) {\n                  _context6.next = 4;\n                  break;\n                }\n                throw Error(\"Reaction object is missing\");\n              case 4:\n                _context6.next = 6;\n                return this.getClient().post(this.getClient().baseURL + \"/messages/\".concat(messageID, \"/reaction\"), _objectSpread$2({\n                  reaction: reaction\n                }, options));\n              case 6:\n                return _context6.abrupt(\"return\", _context6.sent);\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function sendReaction(_x6, _x7, _x8) {\n        return _sendReaction.apply(this, arguments);\n      }\n      return sendReaction;\n    }()\n    /**\n     * deleteReaction - Delete a reaction by user and type\n     *\n     * @param {string} messageID the id of the message from which te remove the reaction\n     * @param {string} reactionType the type of reaction that should be removed\n     * @param {string} [user_id] the id of the user (used only for server side request) default null\n     *\n     * @return {Promise<ReactionAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The Server Response\n     */\n  }, {\n    key: \"deleteReaction\",\n    value: function deleteReaction(messageID, reactionType, user_id) {\n      this._checkInitialized();\n      if (!reactionType || !messageID) {\n        throw Error('Deleting a reaction requires specifying both the message and reaction type');\n      }\n      var url = this.getClient().baseURL + \"/messages/\".concat(messageID, \"/reaction/\").concat(reactionType); //provided when server side request\n\n      if (user_id) {\n        return this.getClient().delete(url, {\n          user_id: user_id\n        });\n      }\n      return this.getClient().delete(url, {});\n    }\n    /**\n     * update - Edit the channel's custom properties\n     *\n     * @param {ChannelData<ChannelType>} channelData The object to update the custom properties of this channel with\n     * @param {Message<AttachmentType, MessageType, UserType>} [updateMessage] Optional message object for channel members notification\n     * @param {{ skip_push?: boolean }} [options] Option object, {skip_push: true} to skip sending push notifications\n     * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n     */\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var channelData,\n          updateMessage,\n          options,\n          reserved,\n          _args7 = arguments;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                channelData = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};\n                updateMessage = _args7.length > 1 ? _args7[1] : undefined;\n                options = _args7.length > 2 ? _args7[2] : undefined;\n                // Strip out reserved names that will result in API errors.\n                reserved = ['config', 'cid', 'created_by', 'id', 'member_count', 'type', 'created_at', 'updated_at', 'last_message_at', 'own_capabilities'];\n                reserved.forEach(function (key) {\n                  delete channelData[key];\n                });\n                _context7.next = 7;\n                return this._update(_objectSpread$2({\n                  message: updateMessage,\n                  data: channelData\n                }, options));\n              case 7:\n                return _context7.abrupt(\"return\", _context7.sent);\n              case 8:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function update() {\n        return _update2.apply(this, arguments);\n      }\n      return update;\n    }()\n    /**\n     * updatePartial - partial update channel properties\n     *\n     * @param {PartialUpdateChannel<ChannelType>} partial update request\n     *\n     * @return {Promise<PartialUpdateChannelAPIResponse<ChannelType,CommandType, UserType>>}\n     */\n  }, {\n    key: \"updatePartial\",\n    value: function () {\n      var _updatePartial = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(update) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.getClient().patch(this._channelURL(), update);\n              case 2:\n                return _context8.abrupt(\"return\", _context8.sent);\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function updatePartial(_x9) {\n        return _updatePartial.apply(this, arguments);\n      }\n      return updatePartial;\n    }()\n    /**\n     * enableSlowMode - enable slow mode\n     *\n     * @param {number} coolDownInterval the cooldown interval in seconds\n     * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n     */\n  }, {\n    key: \"enableSlowMode\",\n    value: function () {\n      var _enableSlowMode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(coolDownInterval) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.getClient().post(this._channelURL(), {\n                  cooldown: coolDownInterval\n                });\n              case 2:\n                data = _context9.sent;\n                this.data = data.channel;\n                return _context9.abrupt(\"return\", data);\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function enableSlowMode(_x10) {\n        return _enableSlowMode.apply(this, arguments);\n      }\n      return enableSlowMode;\n    }()\n    /**\n     * disableSlowMode - disable slow mode\n     *\n     * @return {Promise<UpdateChannelAPIResponse<ChannelType, AttachmentType, MessageType, ReactionType, UserType>>} The server response\n     */\n  }, {\n    key: \"disableSlowMode\",\n    value: function () {\n      var _disableSlowMode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.getClient().post(this._channelURL(), {\n                  cooldown: 0\n                });\n              case 2:\n                data = _context10.sent;\n                this.data = data.channel;\n                return _context10.abrupt(\"return\", data);\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function disableSlowMode() {\n        return _disableSlowMode.apply(this, arguments);\n      }\n      return disableSlowMode;\n    }()\n    /**\n     * delete - Delete the channel. Messages are permanently removed.\n     *\n     * @return {Promise<DeleteChannelAPIResponse<ChannelType, CommandType, UserType>>} The server response\n     */\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.getClient().delete(this._channelURL(), {});\n              case 2:\n                return _context11.abrupt(\"return\", _context11.sent);\n              case 3:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function _delete() {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n    /**\n     * truncate - Removes all messages from the channel\n     *\n     * @return {Promise<TruncateChannelAPIResponse<ChannelType, CommandType, UserType>>} The server response\n     */\n  }, {\n    key: \"truncate\",\n    value: function () {\n      var _truncate = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this.getClient().post(this._channelURL() + '/truncate', {});\n              case 2:\n                return _context12.abrupt(\"return\", _context12.sent);\n              case 3:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function truncate() {\n        return _truncate.apply(this, arguments);\n      }\n      return truncate;\n    }()\n    /**\n     * acceptInvite - accept invitation to the channel\n     *\n     * @param {InviteOptions<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} [options] The object to update the custom properties of this channel with\n     *\n     * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n     */\n  }, {\n    key: \"acceptInvite\",\n    value: function () {\n      var _acceptInvite = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        var options,\n          _args13 = arguments;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                options = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {};\n                _context13.next = 3;\n                return this._update(_objectSpread$2({\n                  accept_invite: true\n                }, options));\n              case 3:\n                return _context13.abrupt(\"return\", _context13.sent);\n              case 4:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function acceptInvite() {\n        return _acceptInvite.apply(this, arguments);\n      }\n      return acceptInvite;\n    }()\n    /**\n     * rejectInvite - reject invitation to the channel\n     *\n     * @param {InviteOptions<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} [options] The object to update the custom properties of this channel with\n     *\n     * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n     */\n  }, {\n    key: \"rejectInvite\",\n    value: function () {\n      var _rejectInvite = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        var options,\n          _args14 = arguments;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                options = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : {};\n                _context14.next = 3;\n                return this._update(_objectSpread$2({\n                  reject_invite: true\n                }, options));\n              case 3:\n                return _context14.abrupt(\"return\", _context14.sent);\n              case 4:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n      function rejectInvite() {\n        return _rejectInvite.apply(this, arguments);\n      }\n      return rejectInvite;\n    }()\n    /**\n     * addMembers - add members to the channel\n     *\n     * @param {{user_id: string, channel_role?: Role}[]} members An array of members to add to the channel\n     * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n     * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n     */\n  }, {\n    key: \"addMembers\",\n    value: function () {\n      var _addMembers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(members, message) {\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this._update({\n                  add_members: members,\n                  message: message\n                });\n              case 2:\n                return _context15.abrupt(\"return\", _context15.sent);\n              case 3:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n      function addMembers(_x11, _x12) {\n        return _addMembers.apply(this, arguments);\n      }\n      return addMembers;\n    }()\n    /**\n     * addModerators - add moderators to the channel\n     *\n     * @param {string[]} members An array of member identifiers\n     * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n     * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n     */\n  }, {\n    key: \"addModerators\",\n    value: function () {\n      var _addModerators = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16(members, message) {\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this._update({\n                  add_moderators: members,\n                  message: message\n                });\n              case 2:\n                return _context16.abrupt(\"return\", _context16.sent);\n              case 3:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n      function addModerators(_x13, _x14) {\n        return _addModerators.apply(this, arguments);\n      }\n      return addModerators;\n    }()\n    /**\n     * assignRoles - sets member roles in a channel\n     *\n     * @param {{channel_role: Role, user_id: string}[]} roles List of role assignments\n     * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n     * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n     */\n  }, {\n    key: \"assignRoles\",\n    value: function () {\n      var _assignRoles = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17(roles, message) {\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this._update({\n                  assign_roles: roles,\n                  message: message\n                });\n              case 2:\n                return _context17.abrupt(\"return\", _context17.sent);\n              case 3:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n      function assignRoles(_x15, _x16) {\n        return _assignRoles.apply(this, arguments);\n      }\n      return assignRoles;\n    }()\n    /**\n     * inviteMembers - invite members to the channel\n     *\n     * @param {{user_id: string, channel_role?: Role}[]} members An array of members to invite to the channel\n     * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n     * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n     */\n  }, {\n    key: \"inviteMembers\",\n    value: function () {\n      var _inviteMembers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(members, message) {\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return this._update({\n                  invites: members,\n                  message: message\n                });\n              case 2:\n                return _context18.abrupt(\"return\", _context18.sent);\n              case 3:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n      function inviteMembers(_x17, _x18) {\n        return _inviteMembers.apply(this, arguments);\n      }\n      return inviteMembers;\n    }()\n    /**\n     * removeMembers - remove members from channel\n     *\n     * @param {string[]} members An array of member identifiers\n     * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n     * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n     */\n  }, {\n    key: \"removeMembers\",\n    value: function () {\n      var _removeMembers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(members, message) {\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return this._update({\n                  remove_members: members,\n                  message: message\n                });\n              case 2:\n                return _context19.abrupt(\"return\", _context19.sent);\n              case 3:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n      function removeMembers(_x19, _x20) {\n        return _removeMembers.apply(this, arguments);\n      }\n      return removeMembers;\n    }()\n    /**\n     * demoteModerators - remove moderator role from channel members\n     *\n     * @param {string[]} members An array of member identifiers\n     * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n     * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n     */\n  }, {\n    key: \"demoteModerators\",\n    value: function () {\n      var _demoteModerators = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(members, message) {\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return this._update({\n                  demote_moderators: members,\n                  message: message\n                });\n              case 2:\n                return _context20.abrupt(\"return\", _context20.sent);\n              case 3:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n      function demoteModerators(_x21, _x22) {\n        return _demoteModerators.apply(this, arguments);\n      }\n      return demoteModerators;\n    }()\n    /**\n     * _update - executes channel update request\n     * @param payload Object Update Channel payload\n     * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n     * TODO: introduce new type instead of Object in the next major update\n     */\n  }, {\n    key: \"_update\",\n    value: function () {\n      var _update3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(payload) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return this.getClient().post(this._channelURL(), payload);\n              case 2:\n                data = _context21.sent;\n                this.data = data.channel;\n                return _context21.abrupt(\"return\", data);\n              case 5:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n      function _update(_x23) {\n        return _update3.apply(this, arguments);\n      }\n      return _update;\n    }()\n    /**\n     * mute - mutes the current channel\n     * @param {{ user_id?: string, expiration?: string }} opts expiration in minutes or user_id\n     * @return {Promise<MuteChannelAPIResponse<ChannelType, CommandType, UserType>>} The server response\n     *\n     * example with expiration:\n     * await channel.mute({expiration: moment.duration(2, 'weeks')});\n     *\n     * example server side:\n     * await channel.mute({user_id: userId});\n     *\n     */\n  }, {\n    key: \"mute\",\n    value: function () {\n      var _mute = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {\n        var opts,\n          _args22 = arguments;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                opts = _args22.length > 0 && _args22[0] !== undefined ? _args22[0] : {};\n                _context22.next = 3;\n                return this.getClient().post(this.getClient().baseURL + '/moderation/mute/channel', _objectSpread$2({\n                  channel_cid: this.cid\n                }, opts));\n              case 3:\n                return _context22.abrupt(\"return\", _context22.sent);\n              case 4:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n      function mute() {\n        return _mute.apply(this, arguments);\n      }\n      return mute;\n    }()\n    /**\n     * unmute - mutes the current channel\n     * @param {{ user_id?: string}} opts user_id\n     * @return {Promise<APIResponse>} The server response\n     *\n     * example server side:\n     * await channel.unmute({user_id: userId});\n     */\n  }, {\n    key: \"unmute\",\n    value: function () {\n      var _unmute = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {\n        var opts,\n          _args23 = arguments;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                opts = _args23.length > 0 && _args23[0] !== undefined ? _args23[0] : {};\n                _context23.next = 3;\n                return this.getClient().post(this.getClient().baseURL + '/moderation/unmute/channel', _objectSpread$2({\n                  channel_cid: this.cid\n                }, opts));\n              case 3:\n                return _context23.abrupt(\"return\", _context23.sent);\n              case 4:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n      function unmute() {\n        return _unmute.apply(this, arguments);\n      }\n      return unmute;\n    }()\n    /**\n     * muteStatus - returns the mute status for the current channel\n     * @return {{ muted: boolean; createdAt: Date | null; expiresAt: Date | null }} { muted: true | false, createdAt: Date | null, expiresAt: Date | null}\n     */\n  }, {\n    key: \"muteStatus\",\n    value: function muteStatus() {\n      this._checkInitialized();\n      return this.getClient()._muteStatus(this.cid);\n    }\n  }, {\n    key: \"sendAction\",\n    value: function sendAction(messageID, formData) {\n      this._checkInitialized();\n      if (!messageID) {\n        throw Error(\"Message id is missing\");\n      }\n      return this.getClient().post(this.getClient().baseURL + \"/messages/\".concat(messageID, \"/action\"), {\n        message_id: messageID,\n        form_data: formData,\n        id: this.id,\n        type: this.type\n      });\n    }\n    /**\n     * keystroke - First of the typing.start and typing.stop events based on the users keystrokes.\n     * Call this on every keystroke\n     * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}\n     * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread\n     */\n  }, {\n    key: \"keystroke\",\n    value: function () {\n      var _keystroke = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee24(parent_id) {\n        var _this$getConfig;\n        var now, diff;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                if ((_this$getConfig = this.getConfig()) !== null && _this$getConfig !== void 0 && _this$getConfig.typing_events) {\n                  _context24.next = 2;\n                  break;\n                }\n                return _context24.abrupt(\"return\");\n              case 2:\n                now = new Date();\n                diff = this.lastTypingEvent && now.getTime() - this.lastTypingEvent.getTime();\n                this.lastKeyStroke = now;\n                this.isTyping = true; // send a typing.start every 2 seconds\n\n                if (!(diff === null || diff > 2000)) {\n                  _context24.next = 10;\n                  break;\n                }\n                this.lastTypingEvent = new Date();\n                _context24.next = 10;\n                return this.sendEvent({\n                  type: 'typing.start',\n                  parent_id: parent_id\n                });\n              case 10:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n      function keystroke(_x24) {\n        return _keystroke.apply(this, arguments);\n      }\n      return keystroke;\n    }()\n    /**\n     * stopTyping - Sets last typing to null and sends the typing.stop event\n     * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}\n     * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread\n     */\n  }, {\n    key: \"stopTyping\",\n    value: function () {\n      var _stopTyping = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee25(parent_id) {\n        var _this$getConfig2;\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                if ((_this$getConfig2 = this.getConfig()) !== null && _this$getConfig2 !== void 0 && _this$getConfig2.typing_events) {\n                  _context25.next = 2;\n                  break;\n                }\n                return _context25.abrupt(\"return\");\n              case 2:\n                this.lastTypingEvent = null;\n                this.isTyping = false;\n                _context25.next = 6;\n                return this.sendEvent({\n                  type: 'typing.stop',\n                  parent_id: parent_id\n                });\n              case 6:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n      function stopTyping(_x25) {\n        return _stopTyping.apply(this, arguments);\n      }\n      return stopTyping;\n    }()\n    /**\n     * lastMessage - return the last message, takes into account that last few messages might not be perfectly sorted\n     *\n     * @return {ReturnType<ChannelState<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>['formatMessage']> | undefined} Description\n     */\n  }, {\n    key: \"lastMessage\",\n    value: function lastMessage() {\n      // get last 5 messages, sort, return the latest\n      // get a slice of the last 5\n      var min = this.state.messages.length - 5;\n      if (min < 0) {\n        min = 0;\n      }\n      var max = this.state.messages.length + 1;\n      var messageSlice = this.state.messages.slice(min, max); // sort by pk desc\n\n      messageSlice.sort(function (a, b) {\n        return b.created_at.getTime() - a.created_at.getTime();\n      });\n      return messageSlice[0];\n    }\n    /**\n     * markRead - Send the mark read event for this user, only works if the `read_events` setting is enabled\n     *\n     * @param {MarkReadOptions<UserType>} data\n     * @return {Promise<EventAPIResponse<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType> | null>} Description\n     */\n  }, {\n    key: \"markRead\",\n    value: function () {\n      var _markRead = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee26() {\n        var _this$getConfig3;\n        var data,\n          _args26 = arguments;\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                data = _args26.length > 0 && _args26[0] !== undefined ? _args26[0] : {};\n                this._checkInitialized();\n                if ((_this$getConfig3 = this.getConfig()) !== null && _this$getConfig3 !== void 0 && _this$getConfig3.read_events) {\n                  _context26.next = 4;\n                  break;\n                }\n                return _context26.abrupt(\"return\", Promise.resolve(null));\n              case 4:\n                _context26.next = 6;\n                return this.getClient().post(this._channelURL() + '/read', _objectSpread$2({}, data));\n              case 6:\n                return _context26.abrupt(\"return\", _context26.sent);\n              case 7:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n      function markRead() {\n        return _markRead.apply(this, arguments);\n      }\n      return markRead;\n    }()\n    /**\n     * clean - Cleans the channel state and fires stop typing if needed\n     */\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      if (this.lastKeyStroke) {\n        var now = new Date();\n        var diff = now.getTime() - this.lastKeyStroke.getTime();\n        if (diff > 1000 && this.isTyping) {\n          logChatPromiseExecution(this.stopTyping(), 'stop typing event');\n        }\n      }\n      this.state.clean();\n    }\n    /**\n     * watch - Loads the initial channel state and watches for changes\n     *\n     * @param {ChannelQueryOptions<ChannelType, CommandType, UserType>} options additional options for the query endpoint\n     *\n     * @return {Promise<ChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n     */\n  }, {\n    key: \"watch\",\n    value: function () {\n      var _watch = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee27(options) {\n        var defaultOptions, combined, state;\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                defaultOptions = {\n                  state: true,\n                  watch: true,\n                  presence: false\n                }; // Make sure we wait for the connect promise if there is a pending one\n\n                _context27.next = 3;\n                return this.getClient().wsPromise;\n              case 3:\n                if (!this.getClient()._hasConnectionID()) {\n                  defaultOptions.watch = false;\n                }\n                combined = _objectSpread$2(_objectSpread$2({}, defaultOptions), options);\n                _context27.next = 7;\n                return this.query(combined);\n              case 7:\n                state = _context27.sent;\n                this.initialized = true;\n                this.data = state.channel;\n                this._client.logger('info', \"channel:watch() - started watching channel \".concat(this.cid), {\n                  tags: ['channel'],\n                  channel: this\n                });\n                return _context27.abrupt(\"return\", state);\n              case 12:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n      function watch(_x26) {\n        return _watch.apply(this, arguments);\n      }\n      return watch;\n    }()\n    /**\n     * stopWatching - Stops watching the channel\n     *\n     * @return {Promise<APIResponse>} The server response\n     */\n  }, {\n    key: \"stopWatching\",\n    value: function () {\n      var _stopWatching = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee28() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                _context28.next = 2;\n                return this.getClient().post(this._channelURL() + '/stop-watching', {});\n              case 2:\n                response = _context28.sent;\n                this._client.logger('info', \"channel:watch() - stopped watching channel \".concat(this.cid), {\n                  tags: ['channel'],\n                  channel: this\n                });\n                return _context28.abrupt(\"return\", response);\n              case 5:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n      function stopWatching() {\n        return _stopWatching.apply(this, arguments);\n      }\n      return stopWatching;\n    }()\n    /**\n     * getReplies - List the message replies for a parent message\n     *\n     * @param {string} parent_id The message parent id, ie the top of the thread\n     * @param {PaginationOptions & { user?: UserResponse<UserType>; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}\n     *\n     * @return {Promise<GetRepliesAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} A response with a list of messages\n     */\n  }, {\n    key: \"getReplies\",\n    value: function () {\n      var _getReplies = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee29(parent_id, options) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                _context29.next = 2;\n                return this.getClient().get(this.getClient().baseURL + \"/messages/\".concat(parent_id, \"/replies\"), _objectSpread$2({}, options));\n              case 2:\n                data = _context29.sent;\n\n                // add any messages to our thread state\n                if (data.messages) {\n                  this.state.addMessagesSorted(data.messages);\n                }\n                return _context29.abrupt(\"return\", data);\n              case 5:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this);\n      }));\n      function getReplies(_x27, _x28) {\n        return _getReplies.apply(this, arguments);\n      }\n      return getReplies;\n    }()\n    /**\n     * getReactions - List the reactions, supports pagination\n     *\n     * @param {string} message_id The message id\n     * @param {{ limit?: number; offset?: number }} options The pagination options\n     *\n     * @return {Promise<GetReactionsAPIResponse<ReactionType, UserType>>} Server response\n     */\n  }, {\n    key: \"getReactions\",\n    value: function getReactions(message_id, options) {\n      return this.getClient().get(this.getClient().baseURL + \"/messages/\".concat(message_id, \"/reactions\"), _objectSpread$2({}, options));\n    }\n    /**\n     * getMessagesById - Retrieves a list of messages by ID\n     *\n     * @param {string[]} messageIds The ids of the messages to retrieve from this channel\n     *\n     * @return {Promise<GetMultipleMessagesAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} Server response\n     */\n  }, {\n    key: \"getMessagesById\",\n    value: function getMessagesById(messageIds) {\n      return this.getClient().get(this._channelURL() + '/messages', {\n        ids: messageIds.join(',')\n      });\n    }\n    /**\n     * lastRead - returns the last time the user marked the channel as read if the user never marked the channel as read, this will return null\n     * @return {Date | null | undefined}\n     */\n  }, {\n    key: \"lastRead\",\n    value: function lastRead() {\n      this._checkInitialized();\n      var _this$getClient = this.getClient(),\n        userID = _this$getClient.userID;\n      if (userID) {\n        return this.state.read[userID] ? this.state.read[userID].last_read : null;\n      }\n    }\n  }, {\n    key: \"_countMessageAsUnread\",\n    value: function _countMessageAsUnread(message) {\n      var _message$user, _message$user2;\n      if (message.shadowed) return false;\n      if (message.silent) return false;\n      if (((_message$user = message.user) === null || _message$user === void 0 ? void 0 : _message$user.id) === this.getClient().userID) return false;\n      if ((_message$user2 = message.user) !== null && _message$user2 !== void 0 && _message$user2.id && this.getClient().userMuteStatus(message.user.id)) return false;\n      if (this.muteStatus().muted) return false;\n      return true;\n    }\n    /**\n     * countUnread - Count of unread messages\n     *\n     * @param {Date | null} [lastRead] lastRead the time that the user read a message, defaults to current user's read state\n     *\n     * @return {number} Unread count\n     */\n  }, {\n    key: \"countUnread\",\n    value: function countUnread(lastRead) {\n      if (!lastRead) return this.state.unreadCount;\n      var count = 0;\n      for (var i = 0; i < this.state.messages.length; i += 1) {\n        var message = this.state.messages[i];\n        if (message.created_at > lastRead && this._countMessageAsUnread(message)) {\n          count++;\n        }\n      }\n      return count;\n    }\n    /**\n     * countUnread - Count the number of unread messages mentioning the current user\n     *\n     * @return {number} Unread mentions count\n     */\n  }, {\n    key: \"countUnreadMentions\",\n    value: function countUnreadMentions() {\n      var lastRead = this.lastRead();\n      var userID = this.getClient().userID;\n      var count = 0;\n      for (var i = 0; i < this.state.messages.length; i += 1) {\n        var _message$mentioned_us;\n        var message = this.state.messages[i];\n        if (this._countMessageAsUnread(message) && (!lastRead || message.created_at > lastRead) && (_message$mentioned_us = message.mentioned_users) !== null && _message$mentioned_us !== void 0 && _message$mentioned_us.some(function (user) {\n          return user.id === userID;\n        })) {\n          count++;\n        }\n      }\n      return count;\n    }\n    /**\n     * create - Creates a new channel\n     *\n     * @return {Promise<ChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The Server Response\n     */\n  }, {\n    key: \"query\",\n    value:\n    /**\n     * query - Query the API, get messages, members or other channel fields\n     *\n     * @param {ChannelQueryOptions<ChannelType, CommandType, UserType>} options The query options\n     *\n     * @return {Promise<ChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} Returns a query response\n     */\n    function () {\n      var _query = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee30(options) {\n        var queryURL, state, membersStr, tempChannelCid;\n        return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                _context30.next = 2;\n                return this.getClient().wsPromise;\n              case 2:\n                queryURL = \"\".concat(this.getClient().baseURL, \"/channels/\").concat(this.type);\n                if (this.id) {\n                  queryURL += \"/\".concat(this.id);\n                }\n                _context30.next = 6;\n                return this.getClient().post(queryURL + '/query', _objectSpread$2({\n                  data: this._data,\n                  state: true\n                }, options));\n              case 6:\n                state = _context30.sent;\n\n                // update the channel id if it was missing\n                if (!this.id) {\n                  this.id = state.channel.id;\n                  this.cid = state.channel.cid; // set the channel as active...\n\n                  membersStr = state.members.map(function (member) {\n                    var _member$user;\n                    return member.user_id || ((_member$user = member.user) === null || _member$user === void 0 ? void 0 : _member$user.id);\n                  }).sort().join(',');\n                  tempChannelCid = \"\".concat(this.type, \":!members-\").concat(membersStr);\n                  if (tempChannelCid in this.getClient().activeChannels) {\n                    // This gets set in `client.channel()` function, when channel is created\n                    // using members, not id.\n                    delete this.getClient().activeChannels[tempChannelCid];\n                  }\n                  if (!(this.cid in this.getClient().activeChannels)) {\n                    this.getClient().activeChannels[this.cid] = this;\n                  }\n                }\n                this.getClient()._addChannelConfig(state); // add any messages to our channel state\n\n                this._initializeState(state);\n                return _context30.abrupt(\"return\", state);\n              case 11:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this);\n      }));\n      function query(_x29) {\n        return _query.apply(this, arguments);\n      }\n      return query;\n    }()\n    /**\n     * banUser - Bans a user from a channel\n     *\n     * @param {string} targetUserID\n     * @param {BanUserOptions<UserType>} options\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"banUser\",\n    value: function () {\n      var _banUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee31(targetUserID, options) {\n        return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                this._checkInitialized();\n                _context31.next = 3;\n                return this.getClient().banUser(targetUserID, _objectSpread$2(_objectSpread$2({}, options), {}, {\n                  type: this.type,\n                  id: this.id\n                }));\n              case 3:\n                return _context31.abrupt(\"return\", _context31.sent);\n              case 4:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31, this);\n      }));\n      function banUser(_x30, _x31) {\n        return _banUser.apply(this, arguments);\n      }\n      return banUser;\n    }()\n    /**\n     * hides the channel from queryChannels for the user until a message is added\n     * If clearHistory is set to true - all messages will be removed for the user\n     *\n     * @param {string | null} userId\n     * @param {boolean} clearHistory\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"hide\",\n    value: function () {\n      var _hide = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee32() {\n        var userId,\n          clearHistory,\n          _args32 = arguments;\n        return _regeneratorRuntime.wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                userId = _args32.length > 0 && _args32[0] !== undefined ? _args32[0] : null;\n                clearHistory = _args32.length > 1 && _args32[1] !== undefined ? _args32[1] : false;\n                this._checkInitialized();\n                _context32.next = 5;\n                return this.getClient().post(\"\".concat(this._channelURL(), \"/hide\"), {\n                  user_id: userId,\n                  clear_history: clearHistory\n                });\n              case 5:\n                return _context32.abrupt(\"return\", _context32.sent);\n              case 6:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32, this);\n      }));\n      function hide() {\n        return _hide.apply(this, arguments);\n      }\n      return hide;\n    }()\n    /**\n     * removes the hidden status for a channel\n     *\n     * @param {string | null} userId\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"show\",\n    value: function () {\n      var _show = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee33() {\n        var userId,\n          _args33 = arguments;\n        return _regeneratorRuntime.wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                userId = _args33.length > 0 && _args33[0] !== undefined ? _args33[0] : null;\n                this._checkInitialized();\n                _context33.next = 4;\n                return this.getClient().post(\"\".concat(this._channelURL(), \"/show\"), {\n                  user_id: userId\n                });\n              case 4:\n                return _context33.abrupt(\"return\", _context33.sent);\n              case 5:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33, this);\n      }));\n      function show() {\n        return _show.apply(this, arguments);\n      }\n      return show;\n    }()\n    /**\n     * unbanUser - Removes the bans for a user on a channel\n     *\n     * @param {string} targetUserID\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"unbanUser\",\n    value: function () {\n      var _unbanUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee34(targetUserID) {\n        return _regeneratorRuntime.wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                this._checkInitialized();\n                _context34.next = 3;\n                return this.getClient().unbanUser(targetUserID, {\n                  type: this.type,\n                  id: this.id\n                });\n              case 3:\n                return _context34.abrupt(\"return\", _context34.sent);\n              case 4:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34, this);\n      }));\n      function unbanUser(_x32) {\n        return _unbanUser.apply(this, arguments);\n      }\n      return unbanUser;\n    }()\n    /**\n     * shadowBan - Shadow bans a user from a channel\n     *\n     * @param {string} targetUserID\n     * @param {BanUserOptions<UserType>} options\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"shadowBan\",\n    value: function () {\n      var _shadowBan = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee35(targetUserID, options) {\n        return _regeneratorRuntime.wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n                this._checkInitialized();\n                _context35.next = 3;\n                return this.getClient().shadowBan(targetUserID, _objectSpread$2(_objectSpread$2({}, options), {}, {\n                  type: this.type,\n                  id: this.id\n                }));\n              case 3:\n                return _context35.abrupt(\"return\", _context35.sent);\n              case 4:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n        }, _callee35, this);\n      }));\n      function shadowBan(_x33, _x34) {\n        return _shadowBan.apply(this, arguments);\n      }\n      return shadowBan;\n    }()\n    /**\n     * removeShadowBan - Removes the shadow ban for a user on a channel\n     *\n     * @param {string} targetUserID\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"removeShadowBan\",\n    value: function () {\n      var _removeShadowBan = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee36(targetUserID) {\n        return _regeneratorRuntime.wrap(function _callee36$(_context36) {\n          while (1) {\n            switch (_context36.prev = _context36.next) {\n              case 0:\n                this._checkInitialized();\n                _context36.next = 3;\n                return this.getClient().removeShadowBan(targetUserID, {\n                  type: this.type,\n                  id: this.id\n                });\n              case 3:\n                return _context36.abrupt(\"return\", _context36.sent);\n              case 4:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n        }, _callee36, this);\n      }));\n      function removeShadowBan(_x35) {\n        return _removeShadowBan.apply(this, arguments);\n      }\n      return removeShadowBan;\n    }()\n    /**\n     * on - Listen to events on this channel.\n     *\n     * channel.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n     * or\n     * channel.on(event => {console.log(event.type)})\n     *\n     * @param {EventHandler<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType> | EventTypes} callbackOrString  The event type to listen for (optional)\n     * @param {EventHandler<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>} [callbackOrNothing] The callback to call\n     */\n  }, {\n    key: \"on\",\n    value: function on(callbackOrString, callbackOrNothing) {\n      var _this2 = this;\n      var key = callbackOrNothing ? callbackOrString : 'all';\n      var valid = isValidEventType(key);\n      if (!valid) {\n        throw Error(\"Invalid event type \".concat(key));\n      }\n      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n      if (!(key in this.listeners)) {\n        this.listeners[key] = [];\n      }\n      this._client.logger('info', \"Attaching listener for \".concat(key, \" event on channel \").concat(this.cid), {\n        tags: ['event', 'channel'],\n        channel: this\n      });\n      this.listeners[key].push(callback);\n      return {\n        unsubscribe: function unsubscribe() {\n          _this2._client.logger('info', \"Removing listener for \".concat(key, \" event from channel \").concat(_this2.cid), {\n            tags: ['event', 'channel'],\n            channel: _this2\n          });\n          _this2.listeners[key] = _this2.listeners[key].filter(function (el) {\n            return el !== callback;\n          });\n        }\n      };\n    }\n    /**\n     * off - Remove the event handler\n     *\n     */\n  }, {\n    key: \"off\",\n    value: function off(callbackOrString, callbackOrNothing) {\n      var key = callbackOrNothing ? callbackOrString : 'all';\n      var valid = isValidEventType(key);\n      if (!valid) {\n        throw Error(\"Invalid event type \".concat(key));\n      }\n      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n      if (!(key in this.listeners)) {\n        this.listeners[key] = [];\n      }\n      this._client.logger('info', \"Removing listener for \".concat(key, \" event from channel \").concat(this.cid), {\n        tags: ['event', 'channel'],\n        channel: this\n      });\n      this.listeners[key] = this.listeners[key].filter(function (value) {\n        return value !== callback;\n      });\n    } // eslint-disable-next-line sonarjs/cognitive-complexity\n  }, {\n    key: \"_handleChannelEvent\",\n    value: function _handleChannelEvent(event) {\n      var _event$user, _event$user2, _event$user3, _event$user5, _event$user6, _event$member, _event$user9;\n      var channel = this;\n      this._client.logger('info', \"channel:_handleChannelEvent - Received event of type { \".concat(event.type, \" } on \").concat(this.cid), {\n        tags: ['event', 'channel'],\n        channel: this\n      });\n      var channelState = channel.state;\n      switch (event.type) {\n        case 'typing.start':\n          if ((_event$user = event.user) !== null && _event$user !== void 0 && _event$user.id) {\n            channelState.typing[event.user.id] = event;\n          }\n          break;\n        case 'typing.stop':\n          if ((_event$user2 = event.user) !== null && _event$user2 !== void 0 && _event$user2.id) {\n            delete channelState.typing[event.user.id];\n          }\n          break;\n        case 'message.read':\n          if ((_event$user3 = event.user) !== null && _event$user3 !== void 0 && _event$user3.id) {\n            var _event$user4, _this$getClient$user;\n            channelState.read[event.user.id] = {\n              // because in client.ts the handleEvent call that flows to this sets this `event.received_at = new Date();`\n              last_read: event.received_at,\n              user: event.user\n            };\n            if (((_event$user4 = event.user) === null || _event$user4 === void 0 ? void 0 : _event$user4.id) === ((_this$getClient$user = this.getClient().user) === null || _this$getClient$user === void 0 ? void 0 : _this$getClient$user.id)) {\n              channelState.unreadCount = 0;\n            }\n          }\n          break;\n        case 'user.watching.start':\n        case 'user.updated':\n          if ((_event$user5 = event.user) !== null && _event$user5 !== void 0 && _event$user5.id) {\n            channelState.watchers[event.user.id] = event.user;\n          }\n          break;\n        case 'user.watching.stop':\n          if ((_event$user6 = event.user) !== null && _event$user6 !== void 0 && _event$user6.id) {\n            delete channelState.watchers[event.user.id];\n          }\n          break;\n        case 'message.deleted':\n          if (event.message) {\n            if (event.hard_delete) channelState.removeMessage(event.message);else channelState.addMessageSorted(event.message, false, false);\n            channelState.removeQuotedMessageReferences(event.message);\n            if (event.message.pinned) {\n              channelState.removePinnedMessage(event.message);\n            }\n          }\n          break;\n        case 'message.new':\n          if (event.message) {\n            var _event$user7, _this$getClient$user2, _event$user8;\n\n            /* if message belongs to current user, always assume timestamp is changed to filter it out and add again to avoid duplication */\n            var ownMessage = ((_event$user7 = event.user) === null || _event$user7 === void 0 ? void 0 : _event$user7.id) === ((_this$getClient$user2 = this.getClient().user) === null || _this$getClient$user2 === void 0 ? void 0 : _this$getClient$user2.id);\n            var isThreadMessage = event.message.parent_id && !event.message.show_in_channel;\n            if (this.state.isUpToDate || isThreadMessage) {\n              channelState.addMessageSorted(event.message, ownMessage);\n            }\n            if (event.message.pinned) {\n              channelState.addPinnedMessage(event.message);\n            }\n            if (ownMessage && (_event$user8 = event.user) !== null && _event$user8 !== void 0 && _event$user8.id) {\n              channelState.unreadCount = 0;\n              channelState.read[event.user.id] = {\n                last_read: new Date(event.created_at),\n                user: event.user\n              };\n            } else if (this._countMessageAsUnread(event.message)) {\n              channelState.unreadCount = channelState.unreadCount + 1;\n            }\n          }\n          break;\n        case 'message.updated':\n          if (event.message) {\n            channelState.addMessageSorted(event.message, false, false);\n            if (event.message.pinned) {\n              channelState.addPinnedMessage(event.message);\n            } else {\n              channelState.removePinnedMessage(event.message);\n            }\n          }\n          break;\n        case 'channel.truncated':\n          channelState.clearMessages();\n          channelState.unreadCount = 0;\n          break;\n        case 'member.added':\n        case 'member.updated':\n          if ((_event$member = event.member) !== null && _event$member !== void 0 && _event$member.user_id) {\n            channelState.members[event.member.user_id] = event.member;\n          }\n          break;\n        case 'member.removed':\n          if ((_event$user9 = event.user) !== null && _event$user9 !== void 0 && _event$user9.id) {\n            delete channelState.members[event.user.id];\n          }\n          break;\n        case 'channel.updated':\n          if (event.channel) {\n            channel.data = event.channel;\n          }\n          break;\n        case 'reaction.new':\n          if (event.message && event.reaction) {\n            event.message = channelState.addReaction(event.reaction, event.message);\n          }\n          break;\n        case 'reaction.deleted':\n          if (event.reaction) {\n            event.message = channelState.removeReaction(event.reaction, event.message);\n          }\n          break;\n        case 'reaction.updated':\n          if (event.reaction) {\n            // assuming reaction.updated is only called if enforce_unique is true\n            event.message = channelState.addReaction(event.reaction, event.message, true);\n          }\n          break;\n        case 'channel.hidden':\n          if (event.clear_history) {\n            channelState.clearMessages();\n          }\n          break;\n      } // any event can send over the online count\n\n      if (event.watcher_count !== undefined) {\n        channel.state.watcher_count = event.watcher_count;\n      }\n    }\n  }, {\n    key: \"_checkInitialized\",\n    value: function _checkInitialized() {\n      if (!this.initialized && !this.getClient()._isUsingServerAuth()) {\n        throw Error(\"Channel \".concat(this.cid, \" hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve\"));\n      }\n    } // eslint-disable-next-line sonarjs/cognitive-complexity\n  }, {\n    key: \"_initializeState\",\n    value: function _initializeState(state) {\n      var _this$getClient2 = this.getClient(),\n        clientState = _this$getClient2.state,\n        user = _this$getClient2.user,\n        userID = _this$getClient2.userID; // add the Users\n\n      if (state.members) {\n        var _iterator = _createForOfIteratorHelper$2(state.members),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var member = _step.value;\n            if (member.user) {\n              clientState.updateUserReference(member.user, this.cid);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      this.state.membership = state.membership || {};\n      var messages = state.messages || [];\n      if (!this.state.messages) {\n        this.state.messages = [];\n      }\n      this.state.addMessagesSorted(messages, false, true);\n      if (!this.state.pinnedMessages) {\n        this.state.pinnedMessages = [];\n      }\n      this.state.addPinnedMessages(state.pinned_messages || []);\n      this.state.watcher_count = state.watcher_count || 0; // convert the arrays into objects for easier syncing...\n\n      if (state.watchers) {\n        var _iterator2 = _createForOfIteratorHelper$2(state.watchers),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var watcher = _step2.value;\n            if (watcher) {\n              clientState.updateUserReference(watcher, this.cid);\n              this.state.watchers[watcher.id] = watcher;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      } // initialize read state to last message or current time if the channel is empty\n      // if the user is a member, this value will be overwritten later on otherwise this ensures\n      // that everything up to this point is not marked as unread\n\n      if (userID != null) {\n        var last_read = this.state.last_message_at || new Date();\n        if (user) {\n          this.state.read[user.id] = {\n            user: user,\n            last_read: last_read\n          };\n        }\n      } // apply read state if part of the state\n\n      if (state.read) {\n        var _iterator3 = _createForOfIteratorHelper$2(state.read),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var read = _step3.value;\n            var parsedRead = _objectSpread$2(_objectSpread$2({}, read), {}, {\n              last_read: new Date(read.last_read)\n            });\n            this.state.read[read.user.id] = parsedRead;\n            if (read.user.id === (user === null || user === void 0 ? void 0 : user.id) && typeof parsedRead.unread_messages === 'number') {\n              this.state.unreadCount = parsedRead.unread_messages;\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n      if (state.members) {\n        var _iterator4 = _createForOfIteratorHelper$2(state.members),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var _member = _step4.value;\n            if (_member.user) {\n              this.state.members[_member.user.id] = _member;\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n    }\n  }, {\n    key: \"_disconnect\",\n    value: function _disconnect() {\n      this._client.logger('info', \"channel:disconnect() - Disconnecting the channel \".concat(this.cid), {\n        tags: ['connection', 'channel'],\n        channel: this\n      });\n      this.disconnected = true;\n      this.state.setIsUpToDate(false);\n    }\n  }]);\n  return Channel;\n}();\nfunction _createForOfIteratorHelper$1(o, allowArrayLike) {\n  var it;\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray$1(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$1(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);\n}\nfunction _arrayLikeToArray$1(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n\n/**\n * ClientState - A container class for the client state.\n */\nvar ClientState = /*#__PURE__*/function () {\n  function ClientState() {\n    _classCallCheck(this, ClientState);\n    _defineProperty(this, \"users\", void 0);\n    _defineProperty(this, \"userChannelReferences\", void 0);\n\n    // show the status for a certain user...\n    // ie online, offline etc\n    this.users = {}; // store which channels contain references to the specified user...\n\n    this.userChannelReferences = {};\n  }\n  _createClass(ClientState, [{\n    key: \"updateUsers\",\n    value: function updateUsers(users) {\n      var _iterator = _createForOfIteratorHelper$1(users),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var user = _step.value;\n          this.updateUser(user);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"updateUser\",\n    value: function updateUser(user) {\n      if (user != null) {\n        this.users[user.id] = user;\n      }\n    }\n  }, {\n    key: \"updateUserReference\",\n    value: function updateUserReference(user, channelID) {\n      if (user == null) {\n        return;\n      }\n      this.updateUser(user);\n      if (!this.userChannelReferences[user.id]) {\n        this.userChannelReferences[user.id] = {};\n      }\n      this.userChannelReferences[user.id][channelID] = true;\n    }\n  }, {\n    key: \"deleteAllChannelReference\",\n    value: function deleteAllChannelReference(channelID) {\n      for (var userID in this.userChannelReferences) {\n        delete this.userChannelReferences[userID][channelID];\n      }\n    }\n  }]);\n  return ClientState;\n}();\n\n// Type guards to check WebSocket error type\nvar isCloseEvent = function isCloseEvent(res) {\n  return res.code !== undefined;\n};\nvar isErrorEvent = function isErrorEvent(res) {\n  return res.error !== undefined;\n};\n\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */\nvar StableWSConnection = /*#__PURE__*/function () {\n  function StableWSConnection(_ref) {\n    var _this = this;\n    var apiKey = _ref.apiKey,\n      authType = _ref.authType,\n      clientID = _ref.clientID,\n      eventCallback = _ref.eventCallback,\n      logger = _ref.logger,\n      messageCallback = _ref.messageCallback,\n      recoverCallback = _ref.recoverCallback,\n      tokenManager = _ref.tokenManager,\n      user = _ref.user,\n      userAgent = _ref.userAgent,\n      userID = _ref.userID,\n      wsBaseURL = _ref.wsBaseURL,\n      device = _ref.device;\n    _classCallCheck(this, StableWSConnection);\n    _defineProperty(this, \"apiKey\", void 0);\n    _defineProperty(this, \"authType\", void 0);\n    _defineProperty(this, \"clientID\", void 0);\n    _defineProperty(this, \"eventCallback\", void 0);\n    _defineProperty(this, \"logger\", void 0);\n    _defineProperty(this, \"messageCallback\", void 0);\n    _defineProperty(this, \"recoverCallback\", void 0);\n    _defineProperty(this, \"tokenManager\", void 0);\n    _defineProperty(this, \"user\", void 0);\n    _defineProperty(this, \"userAgent\", void 0);\n    _defineProperty(this, \"userID\", void 0);\n    _defineProperty(this, \"wsBaseURL\", void 0);\n    _defineProperty(this, \"device\", void 0);\n    _defineProperty(this, \"connectionID\", void 0);\n    _defineProperty(this, \"connectionOpen\", void 0);\n    _defineProperty(this, \"consecutiveFailures\", void 0);\n    _defineProperty(this, \"pingInterval\", void 0);\n    _defineProperty(this, \"healthCheckTimeoutRef\", void 0);\n    _defineProperty(this, \"isConnecting\", void 0);\n    _defineProperty(this, \"isHealthy\", void 0);\n    _defineProperty(this, \"isResolved\", void 0);\n    _defineProperty(this, \"lastEvent\", void 0);\n    _defineProperty(this, \"connectionCheckTimeout\", void 0);\n    _defineProperty(this, \"connectionCheckTimeoutRef\", void 0);\n    _defineProperty(this, \"rejectPromise\", void 0);\n    _defineProperty(this, \"resolvePromise\", void 0);\n    _defineProperty(this, \"totalFailures\", void 0);\n    _defineProperty(this, \"ws\", void 0);\n    _defineProperty(this, \"wsID\", void 0);\n    _defineProperty(this, \"_buildUrl\", function () {\n      var params = {\n        user_id: _this.user.id,\n        user_details: _this.user,\n        user_token: _this.tokenManager.getToken(),\n        server_determines_connection_id: true,\n        device: _this.device\n      };\n      var qs = encodeURIComponent(JSON.stringify(params));\n      var token = _this.tokenManager.getToken();\n      return \"\".concat(_this.wsBaseURL, \"/connect?json=\").concat(qs, \"&api_key=\").concat(_this.apiKey, \"&authorization=\").concat(token, \"&stream-auth-type=\").concat(_this.authType, \"&X-Stream-Client=\").concat(_this.userAgent);\n    });\n    _defineProperty(this, \"onlineStatusChanged\", function (event) {\n      if (event.type === 'offline') {\n        // mark the connection as down\n        _this.logger('info', 'connection:onlineStatusChanged() - Status changing to offline', {\n          tags: ['connection']\n        });\n        _this._setHealth(false);\n      } else if (event.type === 'online') {\n        // retry right now...\n        // We check this.isHealthy, not sure if it's always\n        // smart to create a new WS connection if the old one is still up and running.\n        // it's possible we didn't miss any messages, so this process is just expensive and not needed.\n        _this.logger('info', \"connection:onlineStatusChanged() - Status changing to online. isHealthy: \".concat(_this.isHealthy), {\n          tags: ['connection']\n        });\n        if (!_this.isHealthy) {\n          _this._reconnect({\n            interval: 10\n          });\n        }\n      }\n    });\n    _defineProperty(this, \"onopen\", function (wsID) {\n      if (_this.wsID !== wsID) return;\n      _this.logger('info', 'connection:onopen() - onopen callback', {\n        tags: ['connection'],\n        wsID: wsID\n      });\n    });\n    _defineProperty(this, \"onmessage\", function (wsID, event) {\n      if (_this.wsID !== wsID) return;\n      var data = typeof event.data === 'string' ? JSON.parse(event.data) : null; // we wait till the first message before we consider the connection open..\n      // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n      // after that a ws.onclose..\n\n      if (!_this.isResolved && data) {\n        if (data.error != null) {\n          var _this$rejectPromise;\n          (_this$rejectPromise = _this.rejectPromise) === null || _this$rejectPromise === void 0 ? void 0 : _this$rejectPromise.call(_this, _this._errorFromWSEvent(data, false));\n          return;\n        } else {\n          var _this$resolvePromise;\n          (_this$resolvePromise = _this.resolvePromise) === null || _this$resolvePromise === void 0 ? void 0 : _this$resolvePromise.call(_this, event); // set healthy..\n\n          _this._setHealth(true);\n        }\n      } // trigger the event..\n\n      _this.lastEvent = new Date();\n      _this.logger('info', 'connection:onmessage() - onmessage callback', {\n        tags: ['connection'],\n        event: event,\n        wsID: wsID\n      });\n      if (data && data.type === 'health.check') {\n        _this.scheduleNextPing();\n      }\n      _this.messageCallback(event);\n      _this.scheduleConnectionCheck();\n    });\n    _defineProperty(this, \"onclose\", function (wsID, event) {\n      _this.logger('info', 'connection:onclose() - onclose callback - ' + event.code, {\n        tags: ['connection'],\n        event: event,\n        wsID: wsID\n      });\n      if (_this.wsID !== wsID) return;\n      if (event.code === chatCodes.WS_CLOSED_SUCCESS) {\n        var _this$rejectPromise2;\n\n        // this is a permanent error raised by stream..\n        // usually caused by invalid auth details\n        var error = new Error(\"WS connection reject with error \".concat(event.reason));\n        error.reason = event.reason;\n        (_this$rejectPromise2 = _this.rejectPromise) === null || _this$rejectPromise2 === void 0 ? void 0 : _this$rejectPromise2.call(_this, error);\n        _this.logger('info', \"connection:onclose() - WS connection reject with error \".concat(event.reason), {\n          tags: ['connection'],\n          event: event\n        });\n      } else {\n        var _this$rejectPromise3;\n        _this.consecutiveFailures += 1;\n        _this.totalFailures += 1;\n        _this._setHealth(false);\n        (_this$rejectPromise3 = _this.rejectPromise) === null || _this$rejectPromise3 === void 0 ? void 0 : _this$rejectPromise3.call(_this, _this._errorFromWSEvent(event));\n        _this.logger('info', \"connection:onclose() - WS connection closed. Calling reconnect ...\", {\n          tags: ['connection'],\n          event: event\n        }); // reconnect if its an abnormal failure\n\n        _this._reconnect();\n      }\n    });\n    _defineProperty(this, \"onerror\", function (wsID, event) {\n      var _this$rejectPromise4;\n      if (_this.wsID !== wsID) return;\n      _this.consecutiveFailures += 1;\n      _this.totalFailures += 1;\n      _this._setHealth(false);\n      (_this$rejectPromise4 = _this.rejectPromise) === null || _this$rejectPromise4 === void 0 ? void 0 : _this$rejectPromise4.call(_this, _this._errorFromWSEvent(event));\n      _this.logger('info', \"connection:onerror() - WS connection resulted into error\", {\n        tags: ['connection'],\n        event: event\n      });\n      _this._reconnect();\n    });\n    _defineProperty(this, \"_setHealth\", function (healthy) {\n      if (healthy && !_this.isHealthy) {\n        // yes we are online:\n        _this.isHealthy = true;\n        _this.eventCallback({\n          type: 'connection.changed',\n          online: true\n        });\n      }\n      if (!healthy && _this.isHealthy) {\n        // bummer we are offline\n        _this.isHealthy = false;\n        setTimeout(function () {\n          if (!_this.isHealthy) {\n            _this.eventCallback({\n              type: 'connection.changed',\n              online: false\n            });\n          }\n        }, 5000);\n      }\n    });\n    _defineProperty(this, \"_errorFromWSEvent\", function (event) {\n      var isWSFailure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var code;\n      var statusCode;\n      var message;\n      if (isCloseEvent(event)) {\n        code = event.code;\n        statusCode = 'unknown';\n        message = event.reason;\n      }\n      if (isErrorEvent(event)) {\n        code = event.error.code;\n        statusCode = event.error.StatusCode;\n        message = event.error.message;\n      } // Keeping this `warn` level log, to avoid cluttering of error logs from ws failures.\n\n      _this.logger('warn', \"connection:_errorFromWSEvent() - WS failed with code \".concat(code), {\n        tags: ['connection'],\n        event: event\n      });\n      var error = new Error(\"WS failed with code \".concat(code, \" and reason - \").concat(message));\n      error.code = code;\n      /**\n       * StatusCode does not exist on any event types but has been left\n       * as is to preserve JS functionality during the TS implementation\n       */\n\n      error.StatusCode = statusCode;\n      error.isWSFailure = isWSFailure;\n      return error;\n    });\n    _defineProperty(this, \"_listenForConnectionChanges\", function () {\n      if (typeof window !== 'undefined' && window != null && window.addEventListener != null) {\n        window.addEventListener('offline', _this.onlineStatusChanged);\n        window.addEventListener('online', _this.onlineStatusChanged);\n      }\n    });\n    _defineProperty(this, \"_removeConnectionListeners\", function () {\n      if (typeof window !== 'undefined' && window != null && window.addEventListener != null) {\n        window.removeEventListener('offline', _this.onlineStatusChanged);\n        window.removeEventListener('online', _this.onlineStatusChanged);\n      }\n    });\n    _defineProperty(this, \"_setupConnectionPromise\", function () {\n      var that = _this;\n      _this.isResolved = false;\n      /** a promise that is resolved once ws.open is called */\n\n      _this.connectionOpen = new Promise(function (resolve, reject) {\n        that.resolvePromise = resolve;\n        that.rejectPromise = reject;\n      }).then(function (e) {\n        if (e.data && typeof e.data === 'string') {\n          var data = JSON.parse(e.data);\n          if (data && data.error != null) {\n            throw new Error(JSON.stringify(data.error));\n          }\n          return data;\n        } else {\n          return undefined;\n        }\n      }, function (error) {\n        throw error;\n      });\n    });\n    _defineProperty(this, \"scheduleNextPing\", function () {\n      if (_this.healthCheckTimeoutRef) {\n        clearTimeout(_this.healthCheckTimeoutRef);\n      } // 30 seconds is the recommended interval (messenger uses this)\n\n      _this.healthCheckTimeoutRef = setTimeout(function () {\n        // send the healthcheck.., server replies with a health check event\n        var data = [{\n          type: 'health.check',\n          client_id: _this.clientID,\n          user_id: _this.userID\n        }]; // try to send on the connection\n\n        try {\n          var _this$ws;\n          (_this$ws = _this.ws) === null || _this$ws === void 0 ? void 0 : _this$ws.send(JSON.stringify(data));\n        } catch (e) {// error will already be detected elsewhere\n        }\n      }, _this.pingInterval);\n    });\n    _defineProperty(this, \"scheduleConnectionCheck\", function () {\n      if (_this.connectionCheckTimeoutRef) {\n        clearTimeout(_this.connectionCheckTimeoutRef);\n      }\n      _this.connectionCheckTimeoutRef = setTimeout(function () {\n        var now = new Date();\n        if (_this.lastEvent && now.getTime() - _this.lastEvent.getTime() > _this.connectionCheckTimeout) {\n          _this.logger('info', 'connection:scheduleConnectionCheck - going to reconnect', {\n            tags: ['connection']\n          });\n          _this._setHealth(false);\n          _this._reconnect();\n        }\n      }, _this.connectionCheckTimeout);\n    });\n    this.wsBaseURL = wsBaseURL;\n    this.clientID = clientID;\n    this.userID = userID;\n    this.user = user;\n    this.authType = authType;\n    this.userAgent = userAgent;\n    this.apiKey = apiKey;\n    this.tokenManager = tokenManager;\n    this.device = device;\n    /** consecutive failures influence the duration of the timeout */\n\n    this.consecutiveFailures = 0;\n    /** keep track of the total number of failures */\n\n    this.totalFailures = 0;\n    /** We only make 1 attempt to reconnect at the same time.. */\n\n    this.isConnecting = false;\n    /** Boolean that indicates if we have a working connection to the server */\n\n    this.isHealthy = false;\n    /** Callback when the connection fails and recovers */\n\n    this.recoverCallback = recoverCallback;\n    this.messageCallback = messageCallback;\n    this.eventCallback = eventCallback;\n    this.logger = logger;\n    /** Incremented when a new WS connection is made */\n\n    this.wsID = 1;\n    /** Store the last event time for health checks */\n\n    this.lastEvent = null;\n    /** Send a health check message every 25 seconds */\n\n    this.pingInterval = 25 * 1000;\n    this.connectionCheckTimeout = this.pingInterval + 10 * 1000;\n    this._listenForConnectionChanges();\n  }\n  /**\n   * connect - Connect to the WS URL\n   *\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received\n   */\n\n  _createClass(StableWSConnection, [{\n    key: \"connect\",\n    value: function () {\n      var _connect2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var healthCheck;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.isConnecting) {\n                  _context.next = 2;\n                  break;\n                }\n                throw Error(\"You've called connect twice, can only attempt 1 connection at the time\");\n              case 2:\n                _context.prev = 2;\n                _context.next = 5;\n                return this._connect();\n              case 5:\n                healthCheck = _context.sent;\n                this.isConnecting = false;\n                this.consecutiveFailures = 0;\n                this.logger('info', \"connection:connect() - Established ws connection with healthcheck: \".concat(healthCheck), {\n                  tags: ['connection']\n                });\n                _context.next = 23;\n                break;\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](2);\n                this.isConnecting = false;\n                this.isHealthy = false;\n                this.consecutiveFailures += 1;\n                if (!(_context.t0.code === chatCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic())) {\n                  _context.next = 21;\n                  break;\n                }\n                this.logger('info', 'connection:connect() - WS failure due to expired token, so going to try to reload token and reconnect', {\n                  tags: ['connection']\n                });\n                this._reconnect({\n                  refreshToken: true\n                });\n                _context.next = 23;\n                break;\n              case 21:\n                if (_context.t0.isWSFailure) {\n                  _context.next = 23;\n                  break;\n                }\n                throw new Error(JSON.stringify({\n                  code: _context.t0.code,\n                  StatusCode: _context.t0.StatusCode,\n                  message: _context.t0.message,\n                  isWSFailure: _context.t0.isWSFailure\n                }));\n              case 23:\n                _context.next = 25;\n                return this._waitForHealthy();\n              case 25:\n                return _context.abrupt(\"return\", _context.sent);\n              case 26:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 11]]);\n      }));\n      function connect() {\n        return _connect2.apply(this, arguments);\n      }\n      return connect;\n    }()\n    /**\n     * _waitForHealthy polls the promise connection to see if its resolved until it times out\n     * the default 15s timeout allows between 2~3 tries\n     * @param timeout duration(ms)\n     */\n  }, {\n    key: \"_waitForHealthy\",\n    value: function () {\n      var _waitForHealthy2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this2 = this;\n        var timeout,\n          _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                timeout = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : 15000;\n                return _context4.abrupt(\"return\", Promise.race([_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                  var interval, i;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          interval = 50; // ms\n\n                          i = 0;\n                        case 2:\n                          if (!(i <= timeout)) {\n                            _context2.next = 18;\n                            break;\n                          }\n                          _context2.prev = 3;\n                          _context2.next = 6;\n                          return _this2.connectionOpen;\n                        case 6:\n                          return _context2.abrupt(\"return\", _context2.sent);\n                        case 9:\n                          _context2.prev = 9;\n                          _context2.t0 = _context2[\"catch\"](3);\n                          if (!(i === timeout)) {\n                            _context2.next = 13;\n                            break;\n                          }\n                          throw new Error(JSON.stringify({\n                            code: _context2.t0.code,\n                            StatusCode: _context2.t0.StatusCode,\n                            message: _context2.t0.message,\n                            isWSFailure: _context2.t0.isWSFailure\n                          }));\n                        case 13:\n                          _context2.next = 15;\n                          return sleep(interval);\n                        case 15:\n                          i += interval;\n                          _context2.next = 2;\n                          break;\n                        case 18:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2, null, [[3, 9]]);\n                }))(), _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.next = 2;\n                          return sleep(timeout);\n                        case 2:\n                          throw new Error(JSON.stringify({\n                            code: '',\n                            StatusCode: '',\n                            message: 'initial WS connection could not be established',\n                            isWSFailure: true\n                          }));\n                        case 3:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }))()]));\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n      function _waitForHealthy() {\n        return _waitForHealthy2.apply(this, arguments);\n      }\n      return _waitForHealthy;\n    }()\n  }, {\n    key: \"disconnect\",\n    value:\n    /**\n     * disconnect - Disconnect the connection and doesn't recover...\n     *\n     */\n    function disconnect(timeout) {\n      var _this3 = this;\n      this.logger('info', \"connection:disconnect() - Closing the websocket connection for wsID \".concat(this.wsID), {\n        tags: ['connection']\n      });\n      this.wsID += 1; // start by removing all the listeners\n\n      if (this.healthCheckTimeoutRef) {\n        clearInterval(this.healthCheckTimeoutRef);\n      }\n      if (this.connectionCheckTimeoutRef) {\n        clearInterval(this.connectionCheckTimeoutRef);\n      }\n      this._removeConnectionListeners();\n      this.isHealthy = false; // remove ws handlers...\n\n      if (this.ws && this.ws.removeAllListeners) {\n        this.ws.removeAllListeners();\n      }\n      var isClosedPromise; // and finally close...\n      // Assigning to local here because we will remove it from this before the\n      // promise resolves.\n\n      var ws = this.ws;\n      if (ws && ws.close && ws.readyState === ws.OPEN) {\n        isClosedPromise = new Promise(function (resolve) {\n          var onclose = function onclose(event) {\n            _this3.logger('info', \"connection:disconnect() - resolving isClosedPromise \".concat(event ? 'with' : 'without', \" close frame\"), {\n              tags: ['connection'],\n              event: event\n            });\n            resolve();\n          };\n          ws.onclose = onclose; // In case we don't receive close frame websocket server in time,\n          // lets not wait for more than 1 seconds.\n\n          setTimeout(onclose, timeout != null ? timeout : 1000);\n        });\n        this.logger('info', \"connection:disconnect() - Manually closed connection by calling client.disconnect()\", {\n          tags: ['connection']\n        });\n        ws.close(chatCodes.WS_CLOSED_SUCCESS, 'Manually closed connection by calling client.disconnect()');\n      } else {\n        this.logger('info', \"connection:disconnect() - ws connection doesn't exist or it is already closed.\", {\n          tags: ['connection']\n        });\n        isClosedPromise = Promise.resolve();\n      }\n      delete this.ws;\n      return isClosedPromise;\n    }\n    /**\n     * _connect - Connect to the WS endpoint\n     *\n     * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received\n     */\n  }, {\n    key: \"_connect\",\n    value: function () {\n      var _connect3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var wsURL, response;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.tokenManager.tokenReady();\n              case 2:\n                this._setupConnectionPromise();\n                wsURL = this._buildUrl();\n                this.ws = new WebSocket(wsURL);\n                this.ws.onopen = this.onopen.bind(this, this.wsID);\n                this.ws.onclose = this.onclose.bind(this, this.wsID);\n                this.ws.onerror = this.onerror.bind(this, this.wsID);\n                this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n                _context5.next = 11;\n                return this.connectionOpen;\n              case 11:\n                response = _context5.sent;\n                if (!response) {\n                  _context5.next = 15;\n                  break;\n                }\n                this.connectionID = response.connection_id;\n                return _context5.abrupt(\"return\", response);\n              case 15:\n                return _context5.abrupt(\"return\", undefined);\n              case 16:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function _connect() {\n        return _connect3.apply(this, arguments);\n      }\n      return _connect;\n    }()\n    /**\n     * _reconnect - Retry the connection to WS endpoint\n     *\n     * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available\n     *\n     * - `interval`\t{int}\t\t\tnumber of ms that function should wait before reconnecting\n     * - `refreshToken` {boolean}\treload/refresh user token be refreshed before attempting reconnection.\n     */\n  }, {\n    key: \"_reconnect\",\n    value: function () {\n      var _reconnect2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var options,\n          interval,\n          _open,\n          _args6 = arguments;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                options = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {};\n                this.logger('info', 'connection:_reconnect() - Initiating the reconnect', {\n                  tags: ['connection']\n                }); // only allow 1 connection at the time\n\n                if (!(this.isConnecting || this.isHealthy)) {\n                  _context6.next = 5;\n                  break;\n                }\n                this.logger('info', 'connection:_reconnect() - Abort (1) since already connecting or healthy', {\n                  tags: ['connection']\n                });\n                return _context6.abrupt(\"return\");\n              case 5:\n                // reconnect in case of on error or on close\n                // also reconnect if the health check cycle fails\n                interval = options.interval;\n                if (!interval) {\n                  interval = retryInterval(this.consecutiveFailures);\n                } // reconnect, or try again after a little while...\n\n                _context6.next = 9;\n                return sleep(interval);\n              case 9:\n                if (!(this.isConnecting || this.isHealthy)) {\n                  _context6.next = 12;\n                  break;\n                }\n                this.logger('info', 'connection:_reconnect() - Abort (2) since already connecting or healthy', {\n                  tags: ['connection']\n                });\n                return _context6.abrupt(\"return\");\n              case 12:\n                this.isConnecting = true; // cleanup the old connection\n\n                this.logger('info', 'connection:_reconnect() - Destroying current WS connection', {\n                  tags: ['connection']\n                });\n                this._destroyCurrentWSConnection();\n                if (!options.refreshToken) {\n                  _context6.next = 18;\n                  break;\n                }\n                _context6.next = 18;\n                return this.tokenManager.loadToken();\n              case 18:\n                _context6.prev = 18;\n                _context6.next = 21;\n                return this._connect();\n              case 21:\n                _open = _context6.sent;\n                if (!this.recoverCallback) {\n                  _context6.next = 27;\n                  break;\n                }\n                this.logger('info', 'connection:_reconnect() - Waiting for recoverCallBack', {\n                  tags: ['connection']\n                });\n                _context6.next = 26;\n                return this.recoverCallback(_open);\n              case 26:\n                this.logger('info', 'connection:_reconnect() - Finished recoverCallBack', {\n                  tags: ['connection']\n                });\n              case 27:\n                this.isConnecting = false;\n                this.consecutiveFailures = 0;\n                _context6.next = 40;\n                break;\n              case 31:\n                _context6.prev = 31;\n                _context6.t0 = _context6[\"catch\"](18);\n                this.isConnecting = false;\n                this.isHealthy = false;\n                this.consecutiveFailures += 1;\n                if (!(_context6.t0.code === chatCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic())) {\n                  _context6.next = 39;\n                  break;\n                }\n                this.logger('info', 'connection:_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect', {\n                  tags: ['connection']\n                });\n                return _context6.abrupt(\"return\", this._reconnect({\n                  refreshToken: true\n                }));\n              case 39:\n                // reconnect on WS failures, don't reconnect if there is a code bug\n                if (_context6.t0.isWSFailure) {\n                  this.logger('info', 'connection:_reconnect() - WS failure, so going to try to reconnect', {\n                    tags: ['connection']\n                  });\n                  this._reconnect();\n                }\n              case 40:\n                this.logger('info', 'connection:_reconnect() - == END ==', {\n                  tags: ['connection']\n                });\n              case 41:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[18, 31]]);\n      }));\n      function _reconnect() {\n        return _reconnect2.apply(this, arguments);\n      }\n      return _reconnect;\n    }()\n    /**\n     * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n     *\n     * @param {Event} event Event with type online or offline\n     *\n     */\n  }, {\n    key: \"_destroyCurrentWSConnection\",\n    value:\n    /**\n     * _destroyCurrentWSConnection - Removes the current WS connection\n     *\n     */\n    function _destroyCurrentWSConnection() {\n      // increment the ID, meaning we will ignore all messages from the old\n      // ws connection from now on.\n      this.wsID += 1;\n      try {\n        if (this.ws && this.ws.removeAllListeners) {\n          this.ws.removeAllListeners();\n        }\n        if (this.ws && this.ws.close) {\n          this.ws.close();\n        }\n      } catch (e) {// we don't care\n      }\n    }\n    /**\n     * _setupPromise - sets up the this.connectOpen promise\n     */\n  }]);\n  return StableWSConnection;\n}();\nvar jwt = null;\nvar crypto = null;\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$1(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$1(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n\n/**\n * Creates the JWT token that can be used for a UserSession\n * @method JWTUserToken\n * @memberof signing\n * @private\n * @param {Secret} apiSecret - API Secret key\n * @param {string} userId - The user_id key in the JWT payload\n * @param {UnknownType} [extraData] - Extra that should be part of the JWT token\n * @param {SignOptions} [jwtOptions] - Options that can be past to jwt.sign\n * @return {string} JWT Token\n */\nfunction JWTUserToken(apiSecret, userId) {\n  var extraData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var jwtOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  if (typeof userId !== 'string') {\n    throw new TypeError('userId should be a string');\n  }\n  var payload = _objectSpread$1({\n    user_id: userId\n  }, extraData); // make sure we return a clear error when jwt is shimmed (ie. browser build)\n\n  {\n    throw Error(\"Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.\");\n  }\n  var opts = _extends({\n    algorithm: 'HS256',\n    noTimestamp: true\n  }, jwtOptions);\n}\nfunction JWTServerToken(apiSecret) {\n  var jwtOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var payload = {\n    server: true\n  };\n  var opts = _extends({\n    algorithm: 'HS256',\n    noTimestamp: true\n  }, jwtOptions);\n  return jwt.sign(payload, apiSecret, opts);\n}\nfunction UserFromToken(token) {\n  var fragments = token.split('.');\n  if (fragments.length !== 3) {\n    return '';\n  }\n  var b64Payload = fragments[1];\n  var payload = decodeBase64(b64Payload);\n  var data = JSON.parse(payload);\n  return data.user_id;\n}\n/**\n *\n * @param {string} userId the id of the user\n * @return {string}\n */\n\nfunction DevToken(userId) {\n  return ['eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9',\n  //{\"alg\": \"HS256\", \"typ\": \"JWT\"}\n  encodeBase64(JSON.stringify({\n    user_id: userId\n  })), 'devtoken' // hardcoded signature\n  ].join('.');\n}\n/**\n *\n * @param {string} body the signed message\n * @param {string} secret the shared secret used to generate the signature (Stream API secret)\n * @param {string} signature the signature to validate\n * @return {boolean}\n */\n\nfunction CheckSignature(body, secret, signature) {\n  var key = Buffer.from(secret, 'ascii');\n  var hash = crypto.createHmac('sha256', key).update(body).digest('hex');\n  return hash === signature;\n}\n\n/**\n * TokenManager\n *\n * Handles all the operations around user token.\n */\nvar TokenManager =\n/**\n * Constructor\n *\n * @param {Secret} secret\n */\nfunction TokenManager(secret) {\n  var _this = this;\n  _classCallCheck(this, TokenManager);\n  _defineProperty(this, \"loadTokenPromise\", void 0);\n  _defineProperty(this, \"type\", void 0);\n  _defineProperty(this, \"secret\", void 0);\n  _defineProperty(this, \"token\", void 0);\n  _defineProperty(this, \"tokenProvider\", void 0);\n  _defineProperty(this, \"user\", void 0);\n  _defineProperty(this, \"setTokenOrProvider\", /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(tokenOrProvider, user) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.validateToken(tokenOrProvider, user);\n              _this.user = user;\n              if (isFunction(tokenOrProvider)) {\n                _this.tokenProvider = tokenOrProvider;\n                _this.type = 'provider';\n              }\n              if (typeof tokenOrProvider === 'string') {\n                _this.token = tokenOrProvider;\n                _this.type = 'static';\n              }\n              if (!tokenOrProvider && _this.user && _this.secret) {\n                _this.token = JWTUserToken(_this.secret, user.id, {}, {});\n                _this.type = 'static';\n              }\n              _context.next = 7;\n              return _this.loadToken();\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  _defineProperty(this, \"reset\", function () {\n    _this.token = undefined;\n    _this.user = undefined;\n    _this.loadTokenPromise = null;\n  });\n  _defineProperty(this, \"validateToken\", function (tokenOrProvider, user) {\n    // allow empty token for anon user\n    if (user && user.anon && !tokenOrProvider) return; // Don't allow empty token for non-server side client.\n\n    if (!_this.secret && !tokenOrProvider) {\n      throw new Error('User token can not be empty');\n    }\n    if (tokenOrProvider && typeof tokenOrProvider !== 'string' && !isFunction(tokenOrProvider)) {\n      throw new Error('user token should either be a string or a function');\n    }\n    if (typeof tokenOrProvider === 'string') {\n      // Allow empty token for anonymous users\n      if (user.anon && tokenOrProvider === '') return;\n      var tokenUserId = UserFromToken(tokenOrProvider);\n      if (tokenOrProvider != null && (tokenUserId == null || tokenUserId === '' || tokenUserId !== user.id)) {\n        throw new Error('userToken does not have a user_id or is not matching with user.id');\n      }\n    }\n  });\n  _defineProperty(this, \"tokenReady\", function () {\n    return _this.loadTokenPromise;\n  });\n  _defineProperty(this, \"loadToken\", function () {\n    // eslint-disable-next-line no-async-promise-executor\n    _this.loadTokenPromise = new Promise(/*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(resolve) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(_this.type === 'static')) {\n                  _context2.next = 2;\n                  break;\n                }\n                return _context2.abrupt(\"return\", resolve(_this.token));\n              case 2:\n                if (!(_this.tokenProvider && typeof _this.tokenProvider !== 'string')) {\n                  _context2.next = 7;\n                  break;\n                }\n                _context2.next = 5;\n                return _this.tokenProvider();\n              case 5:\n                _this.token = _context2.sent;\n                resolve(_this.token);\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    return _this.loadTokenPromise;\n  });\n  _defineProperty(this, \"getToken\", function () {\n    if (_this.token) {\n      return _this.token;\n    }\n    if (_this.user && _this.user.anon && !_this.token) {\n      return _this.token;\n    }\n    if (_this.secret) {\n      return JWTServerToken(_this.secret);\n    }\n    throw new Error(\"Both secret and user tokens are not set. Either client.connectUser wasn't called or client.disconnect was called\");\n  });\n  _defineProperty(this, \"isStatic\", function () {\n    return _this.type === 'static';\n  });\n  this.loadTokenPromise = null;\n  if (secret) {\n    this.secret = secret;\n  }\n  this.type = 'static';\n  if (this.secret) {\n    this.token = JWTServerToken(this.secret);\n  }\n}\n/**\n * Set the static string token or token provider.\n * Token provider should return a token string or a promise which resolves to string token.\n *\n * @param {TokenOrProvider} tokenOrProvider\n * @param {UserResponse<UserType>} user\n */;\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction isString(x) {\n  return typeof x === 'string' || x instanceof String;\n}\nvar StreamChat = /*#__PURE__*/function () {\n  function StreamChat(_key, secretOrOptions, _options) {\n    var _this = this;\n    _classCallCheck(this, StreamChat);\n    _defineProperty(this, \"_user\", void 0);\n    _defineProperty(this, \"activeChannels\", void 0);\n    _defineProperty(this, \"anonymous\", void 0);\n    _defineProperty(this, \"axiosInstance\", void 0);\n    _defineProperty(this, \"baseURL\", void 0);\n    _defineProperty(this, \"browser\", void 0);\n    _defineProperty(this, \"cleaningIntervalRef\", void 0);\n    _defineProperty(this, \"clientID\", void 0);\n    _defineProperty(this, \"configs\", void 0);\n    _defineProperty(this, \"connecting\", void 0);\n    _defineProperty(this, \"connectionID\", void 0);\n    _defineProperty(this, \"failures\", void 0);\n    _defineProperty(this, \"key\", void 0);\n    _defineProperty(this, \"listeners\", void 0);\n    _defineProperty(this, \"logger\", void 0);\n    _defineProperty(this, \"recoverStateOnReconnect\", void 0);\n    _defineProperty(this, \"mutedChannels\", void 0);\n    _defineProperty(this, \"mutedUsers\", void 0);\n    _defineProperty(this, \"node\", void 0);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"secret\", void 0);\n    _defineProperty(this, \"setUserPromise\", void 0);\n    _defineProperty(this, \"state\", void 0);\n    _defineProperty(this, \"tokenManager\", void 0);\n    _defineProperty(this, \"user\", void 0);\n    _defineProperty(this, \"userAgent\", void 0);\n    _defineProperty(this, \"userID\", void 0);\n    _defineProperty(this, \"wsBaseURL\", void 0);\n    _defineProperty(this, \"wsConnection\", void 0);\n    _defineProperty(this, \"wsPromise\", void 0);\n    _defineProperty(this, \"consecutiveFailures\", void 0);\n    _defineProperty(this, \"_hasConnectionID\", function () {\n      var _this$wsConnection;\n      return Boolean((_this$wsConnection = _this.wsConnection) === null || _this$wsConnection === void 0 ? void 0 : _this$wsConnection.connectionID);\n    });\n    _defineProperty(this, \"connectUser\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(user, userTokenOrProvider) {\n        var setTokenPromise, wsPromise;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (user.id) {\n                  _context.next = 2;\n                  break;\n                }\n                throw new Error('The \"id\" field on the user is missing');\n              case 2:\n                if (!(_this.userID === user.id && _this.setUserPromise)) {\n                  _context.next = 5;\n                  break;\n                }\n                console.warn('Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.');\n                return _context.abrupt(\"return\", _this.setUserPromise);\n              case 5:\n                if (!_this.userID) {\n                  _context.next = 7;\n                  break;\n                }\n                throw new Error('Use client.disconnect() before trying to connect as a different user. connectUser was called twice.');\n              case 7:\n                if ((_this._isUsingServerAuth() || _this.node) && !_this.options.allowServerSideConnect) {\n                  console.warn('Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.');\n                } // we generate the client id client side\n\n                _this.userID = user.id;\n                _this.anonymous = false;\n                setTokenPromise = _this._setToken(user, userTokenOrProvider);\n                _this._setUser(user);\n                wsPromise = _this.openConnection();\n                _this.setUserPromise = Promise.all([setTokenPromise, wsPromise]).then(function (result) {\n                  return result[1];\n                } // We only return connection promise;\n                );\n                _context.prev = 14;\n                _context.next = 17;\n                return _this.setUserPromise;\n              case 17:\n                return _context.abrupt(\"return\", _context.sent);\n              case 20:\n                _context.prev = 20;\n                _context.t0 = _context[\"catch\"](14);\n\n                // cleanup client to allow the user to retry connectUser again\n                _this.disconnectUser();\n                throw _context.t0;\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[14, 20]]);\n      }));\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"setUser\", this.connectUser);\n    _defineProperty(this, \"_setToken\", function (user, userTokenOrProvider) {\n      return _this.tokenManager.setTokenOrProvider(userTokenOrProvider, user);\n    });\n    _defineProperty(this, \"closeConnection\", function (timeout) {\n      if (_this.cleaningIntervalRef != null) {\n        clearInterval(_this.cleaningIntervalRef);\n        _this.cleaningIntervalRef = undefined;\n      }\n      if (!_this.wsConnection) {\n        return Promise.resolve();\n      }\n      return _this.wsConnection.disconnect(timeout);\n    });\n    _defineProperty(this, \"openConnection\", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _this$wsConnection2;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (_this.userID) {\n                _context2.next = 2;\n                break;\n              }\n              throw Error('User is not set on client, use client.connectUser or client.connectAnonymousUser instead');\n            case 2:\n              if (!((_this$wsConnection2 = _this.wsConnection) !== null && _this$wsConnection2 !== void 0 && _this$wsConnection2.isHealthy && _this._hasConnectionID())) {\n                _context2.next = 5;\n                break;\n              }\n              _this.logger('info', 'client:openConnection() - openConnection called twice, healthy connection already exists', {\n                tags: ['connection', 'client']\n              });\n              return _context2.abrupt(\"return\", Promise.resolve());\n            case 5:\n              _this.clientID = \"\".concat(_this.userID, \"--\").concat(randomId());\n              _this.wsPromise = _this.connect();\n              _this._startCleaning();\n              return _context2.abrupt(\"return\", _this.wsPromise);\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })));\n    _defineProperty(this, \"_setupConnection\", this.openConnection);\n    _defineProperty(this, \"_normalizeDate\", function (before) {\n      if (before instanceof Date) {\n        before = before.toISOString();\n      }\n      if (before === '') {\n        throw new Error(\"Don't pass blank string for since, use null instead if resetting the token revoke\");\n      }\n      return before;\n    });\n    _defineProperty(this, \"disconnectUser\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(timeout) {\n        var closePromise, _i, _Object$values, _channel;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this.logger('info', 'client:disconnect() - Disconnecting the client', {\n                  tags: ['connection', 'client']\n                }); // remove the user specific fields\n\n                delete _this.user;\n                delete _this._user;\n                delete _this.userID;\n                _this.anonymous = false;\n                closePromise = _this.closeConnection(timeout);\n                for (_i = 0, _Object$values = Object.values(_this.activeChannels); _i < _Object$values.length; _i++) {\n                  _channel = _Object$values[_i];\n                  _channel._disconnect();\n                } // ensure we no longer return inactive channels\n\n                _this.activeChannels = {}; // reset client state\n\n                _this.state = new ClientState(); // reset token manager\n\n                _this.tokenManager.reset(); // close the WS connection\n\n                return _context3.abrupt(\"return\", closePromise);\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"disconnect\", this.disconnectUser);\n    _defineProperty(this, \"connectAnonymousUser\", function () {\n      if ((_this._isUsingServerAuth() || _this.node) && !_this.options.allowServerSideConnect) {\n        console.warn('Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.');\n      }\n      _this.anonymous = true;\n      _this.userID = randomId();\n      var anonymousUser = {\n        id: _this.userID,\n        anon: true\n      };\n      _this._setToken(anonymousUser, '');\n      _this._setUser(anonymousUser);\n      return _this._setupConnection();\n    });\n    _defineProperty(this, \"setAnonymousUser\", this.connectAnonymousUser);\n    _defineProperty(this, \"doAxiosRequest\", /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(type, url, data) {\n        var options,\n          requestConfig,\n          response,\n          _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = _args4.length > 3 && _args4[3] !== undefined ? _args4[3] : {};\n                _context4.next = 3;\n                return _this.tokenManager.tokenReady();\n              case 3:\n                requestConfig = _this._enrichAxiosOptions(options);\n                _context4.prev = 4;\n                _this._logApiRequest(type, url, data, requestConfig);\n                _context4.t0 = type;\n                _context4.next = _context4.t0 === 'get' ? 9 : _context4.t0 === 'delete' ? 13 : _context4.t0 === 'post' ? 17 : _context4.t0 === 'put' ? 21 : _context4.t0 === 'patch' ? 25 : _context4.t0 === 'options' ? 29 : 33;\n                break;\n              case 9:\n                _context4.next = 11;\n                return _this.axiosInstance.get(url, requestConfig);\n              case 11:\n                response = _context4.sent;\n                return _context4.abrupt(\"break\", 34);\n              case 13:\n                _context4.next = 15;\n                return _this.axiosInstance.delete(url, requestConfig);\n              case 15:\n                response = _context4.sent;\n                return _context4.abrupt(\"break\", 34);\n              case 17:\n                _context4.next = 19;\n                return _this.axiosInstance.post(url, data, requestConfig);\n              case 19:\n                response = _context4.sent;\n                return _context4.abrupt(\"break\", 34);\n              case 21:\n                _context4.next = 23;\n                return _this.axiosInstance.put(url, data, requestConfig);\n              case 23:\n                response = _context4.sent;\n                return _context4.abrupt(\"break\", 34);\n              case 25:\n                _context4.next = 27;\n                return _this.axiosInstance.patch(url, data, requestConfig);\n              case 27:\n                response = _context4.sent;\n                return _context4.abrupt(\"break\", 34);\n              case 29:\n                _context4.next = 31;\n                return _this.axiosInstance.options(url, requestConfig);\n              case 31:\n                response = _context4.sent;\n                return _context4.abrupt(\"break\", 34);\n              case 33:\n                throw new Error('Invalid request type');\n              case 34:\n                _this._logApiResponse(type, url, response);\n                _this.consecutiveFailures = 0;\n                return _context4.abrupt(\"return\", _this.handleResponse(response));\n              case 39:\n                _context4.prev = 39;\n                _context4.t1 = _context4[\"catch\"](4);\n                _this._logApiError(type, url, _context4.t1);\n                _this.consecutiveFailures += 1;\n                if (!_context4.t1.response) {\n                  _context4.next = 55;\n                  break;\n                }\n                if (!(_context4.t1.response.data.code === chatCodes.TOKEN_EXPIRED && !_this.tokenManager.isStatic())) {\n                  _context4.next = 52;\n                  break;\n                }\n                if (!(_this.consecutiveFailures > 1)) {\n                  _context4.next = 48;\n                  break;\n                }\n                _context4.next = 48;\n                return sleep(retryInterval(_this.consecutiveFailures));\n              case 48:\n                _this.tokenManager.loadToken();\n                _context4.next = 51;\n                return _this.doAxiosRequest(type, url, data, options);\n              case 51:\n                return _context4.abrupt(\"return\", _context4.sent);\n              case 52:\n                return _context4.abrupt(\"return\", _this.handleResponse(_context4.t1.response));\n              case 55:\n                throw _context4.t1;\n              case 56:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[4, 39]]);\n      }));\n      return function (_x4, _x5, _x6) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n    _defineProperty(this, \"dispatchEvent\", function (event) {\n      // client event handlers\n      var postListenerCallbacks = _this._handleClientEvent(event); // channel event handlers\n\n      var cid = event.cid;\n      var channel = cid ? _this.activeChannels[cid] : undefined;\n      if (channel) {\n        channel._handleChannelEvent(event);\n      }\n      _this._callClientListeners(event);\n      if (channel) {\n        channel._callChannelListeners(event);\n      }\n      postListenerCallbacks.forEach(function (c) {\n        return c();\n      });\n    });\n    _defineProperty(this, \"handleEvent\", function (messageEvent) {\n      // dispatch the event to the channel listeners\n      var jsonString = messageEvent.data;\n      var event = JSON.parse(jsonString);\n      event.received_at = new Date();\n      _this.dispatchEvent(event);\n    });\n    _defineProperty(this, \"_updateMemberWatcherReferences\", function (user) {\n      var refMap = _this.state.userChannelReferences[user.id] || {};\n      for (var _channelID in refMap) {\n        var _channel2 = _this.activeChannels[_channelID];\n        /** search the members and watchers and update as needed... */\n\n        if (_channel2 !== null && _channel2 !== void 0 && _channel2.state) {\n          if (_channel2.state.members[user.id]) {\n            _channel2.state.members[user.id].user = user;\n          }\n          if (_channel2.state.watchers[user.id]) {\n            _channel2.state.watchers[user.id] = user;\n          }\n        }\n      }\n    });\n    _defineProperty(this, \"_updateUserReferences\", this._updateMemberWatcherReferences);\n    _defineProperty(this, \"_updateUserMessageReferences\", function (user) {\n      var refMap = _this.state.userChannelReferences[user.id] || {};\n      for (var _channelID2 in refMap) {\n        var _channel3 = _this.activeChannels[_channelID2];\n        var state = _channel3.state;\n        /** update the messages from this user. */\n\n        state === null || state === void 0 ? void 0 : state.updateUserMessages(user);\n      }\n    });\n    _defineProperty(this, \"_deleteUserMessageReference\", function (user) {\n      var hardDelete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var refMap = _this.state.userChannelReferences[user.id] || {};\n      for (var _channelID3 in refMap) {\n        var _channel4 = _this.activeChannels[_channelID3];\n        var state = _channel4.state;\n        /** deleted the messages from this user. */\n\n        state === null || state === void 0 ? void 0 : state.deleteUserMessages(user, hardDelete);\n      }\n    });\n    _defineProperty(this, \"_handleUserEvent\", function (event) {\n      if (!event.user) {\n        return;\n      }\n      /** update the client.state with any changes to users */\n\n      if (event.type === 'user.presence.changed' || event.type === 'user.updated') {\n        if (event.user.id === _this.userID) {\n          var user = _objectSpread({}, _this.user || {});\n          var _user = _objectSpread({}, _this._user || {}); // Remove deleted properties from user objects.\n\n          for (var _key2 in _this.user) {\n            if (_key2 in event.user || isOwnUserBaseProperty(_key2)) {\n              continue;\n            }\n            delete user[_key2];\n            delete _user[_key2];\n          }\n          /** Updating only available properties in _user object. */\n\n          for (var _key3 in event.user) {\n            if (_user && _key3 in _user) {\n              _user[_key3] = event.user[_key3];\n            }\n          } // @ts-expect-error\n\n          _this._user = _objectSpread({}, _user);\n          _this.user = _objectSpread(_objectSpread({}, user), event.user);\n        }\n        _this.state.updateUser(event.user);\n        _this._updateMemberWatcherReferences(event.user);\n      }\n      if (event.type === 'user.updated') {\n        _this._updateUserMessageReferences(event.user);\n      }\n      if (event.type === 'user.deleted' && event.user.deleted_at && (event.mark_messages_deleted || event.hard_delete)) {\n        _this._deleteUserMessageReference(event.user, event.hard_delete);\n      }\n    });\n    _defineProperty(this, \"_callClientListeners\", function (event) {\n      var client = _this; // gather and call the listeners\n\n      var listeners = [];\n      if (client.listeners.all) {\n        listeners.push.apply(listeners, _toConsumableArray(client.listeners.all));\n      }\n      if (client.listeners[event.type]) {\n        listeners.push.apply(listeners, _toConsumableArray(client.listeners[event.type]));\n      } // call the event and send it to the listeners\n\n      for (var _i2 = 0, _listeners = listeners; _i2 < _listeners.length; _i2++) {\n        var listener = _listeners[_i2];\n        listener(event);\n      }\n    });\n    _defineProperty(this, \"recoverState\", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var _this$wsConnection3;\n      var cids;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _this.logger('info', \"client:recoverState() - Start of recoverState with connectionID \".concat((_this$wsConnection3 = _this.wsConnection) === null || _this$wsConnection3 === void 0 ? void 0 : _this$wsConnection3.connectionID), {\n                tags: ['connection']\n              });\n              cids = Object.keys(_this.activeChannels);\n              if (!(cids.length && _this.recoverStateOnReconnect)) {\n                _context5.next = 10;\n                break;\n              }\n              _this.logger('info', \"client:recoverState() - Start the querying of \".concat(cids.length, \" channels\"), {\n                tags: ['connection', 'client']\n              });\n              _context5.next = 6;\n              return _this.queryChannels({\n                cid: {\n                  $in: cids\n                }\n              }, {\n                last_message_at: -1\n              }, {\n                limit: 30\n              });\n            case 6:\n              _this.logger('info', 'client:recoverState() - Querying channels finished', {\n                tags: ['connection', 'client']\n              });\n              _this.dispatchEvent({\n                type: 'connection.recovered'\n              });\n              _context5.next = 11;\n              break;\n            case 10:\n              _this.dispatchEvent({\n                type: 'connection.recovered'\n              });\n            case 11:\n              _this.wsPromise = Promise.resolve();\n              _this.setUserPromise = Promise.resolve();\n            case 13:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    })));\n    _defineProperty(this, \"getChannelByMembers\", function (channelType, custom) {\n      // Check if the channel already exists.\n      // Only allow 1 channel object per cid\n      var membersStr = _toConsumableArray(custom.members || []).sort().join(',');\n      var tempCid = \"\".concat(channelType, \":!members-\").concat(membersStr);\n      if (!membersStr) {\n        throw Error('Please specify atleast one member when creating unique conversation');\n      } // channel could exist in `activeChannels` list with either one of the following two keys:\n      // 1. cid - Which gets set on channel only after calling channel.query or channel.watch or channel.create\n      // 2. Sorted membersStr - E.g., \"messaging:amin,vishal\" OR \"messaging:amin,jaap,tom\"\n      //                        This is set when you create a channel, but haven't queried yet. After query,\n      //                        we will replace it with `cid`\n\n      for (var _key4 in _this.activeChannels) {\n        var _channel5 = _this.activeChannels[_key4];\n        if (_channel5.disconnected) {\n          continue;\n        }\n        if (_key4 === tempCid) {\n          return _channel5;\n        }\n        if (_key4.indexOf(\"\".concat(channelType, \":!members-\")) === 0) {\n          var membersStrInExistingChannel = Object.keys(_channel5.state.members).sort().join(',');\n          if (membersStrInExistingChannel === membersStr) {\n            return _channel5;\n          }\n        }\n      }\n      var channel = new Channel(_this, channelType, undefined, custom); // For the time being set the key as membersStr, since we don't know the cid yet.\n      // In channel.query, we will replace it with 'cid'.\n\n      _this.activeChannels[tempCid] = channel;\n      return channel;\n    });\n    _defineProperty(this, \"getChannelById\", function (channelType, channelID, custom) {\n      if (typeof channelID === 'string' && ~channelID.indexOf(':')) {\n        throw Error(\"Invalid channel id \".concat(channelID, \", can't contain the : character\"));\n      } // only allow 1 channel object per cid\n\n      var cid = \"\".concat(channelType, \":\").concat(channelID);\n      if (cid in _this.activeChannels && !_this.activeChannels[cid].disconnected) {\n        var _channel6 = _this.activeChannels[cid];\n        if (Object.keys(custom).length > 0) {\n          _channel6.data = custom;\n          _channel6._data = custom;\n        }\n        return _channel6;\n      }\n      var channel = new Channel(_this, channelType, channelID, custom);\n      _this.activeChannels[channel.cid] = channel;\n      return channel;\n    });\n    _defineProperty(this, \"updateUsers\", this.upsertUsers);\n    _defineProperty(this, \"updateUser\", this.upsertUser);\n    _defineProperty(this, \"_isUsingServerAuth\", function () {\n      return !!_this.secret;\n    });\n\n    // set the key\n    this.key = _key;\n    this.listeners = {};\n    this.state = new ClientState(); // a list of channels to hide ws events from\n\n    this.mutedChannels = [];\n    this.mutedUsers = []; // set the secret\n\n    if (secretOrOptions && isString(secretOrOptions)) {\n      this.secret = secretOrOptions;\n    } // set the options... and figure out defaults...\n\n    var inputOptions = _options ? _options : secretOrOptions && !isString(secretOrOptions) ? secretOrOptions : {};\n    this.browser = typeof inputOptions.browser !== 'undefined' ? inputOptions.browser : typeof window !== 'undefined';\n    this.node = !this.browser;\n    this.options = _objectSpread({\n      timeout: 3000,\n      withCredentials: false,\n      // making sure cookies are not sent\n      warmUp: false,\n      recoverStateOnReconnect: true\n    }, inputOptions);\n    if (this.node && !this.options.httpsAgent) {\n      this.options.httpsAgent = new https.Agent({\n        keepAlive: true,\n        keepAliveMsecs: 3000\n      });\n    }\n    this.axiosInstance = axios.create(this.options);\n    this.setBaseURL(this.options.baseURL || 'https://chat-us-east-1.stream-io-api.com');\n    if (typeof process !== 'undefined' && process.env.STREAM_LOCAL_TEST_RUN) {\n      this.setBaseURL('http://localhost:3030');\n    }\n    if (typeof process !== 'undefined' && process.env.STREAM_LOCAL_TEST_HOST) {\n      this.setBaseURL('http://' + process.env.STREAM_LOCAL_TEST_HOST);\n    } // WS connection is initialized when setUser is called\n\n    this.wsConnection = null;\n    this.wsPromise = null;\n    this.setUserPromise = null; // keeps a reference to all the channels that are in use\n\n    this.activeChannels = {}; // mapping between channel groups and configs\n\n    this.configs = {};\n    this.anonymous = false; // If its a server-side client, then lets initialize the tokenManager, since token will be\n    // generated from secret.\n\n    this.tokenManager = new TokenManager(this.secret);\n    this.consecutiveFailures = 0;\n    /**\n     * logger function should accept 3 parameters:\n     * @param logLevel string\n     * @param message   string\n     * @param extraData object\n     *\n     * e.g.,\n     * const client = new StreamChat('api_key', {}, {\n     * \t\tlogger = (logLevel, message, extraData) => {\n     * \t\t\tconsole.log(message);\n     * \t\t}\n     * })\n     *\n     * extraData contains tags array attached to log message. Tags can have one/many of following values:\n     * 1. api\n     * 2. api_request\n     * 3. api_response\n     * 4. client\n     * 5. channel\n     * 6. connection\n     * 7. event\n     *\n     * It may also contains some extra data, some examples have been mentioned below:\n     * 1. {\n     * \t\ttags: ['api', 'api_request', 'client'],\n     * \t\turl: string,\n     * \t\tpayload: object,\n     * \t\tconfig: object\n     * }\n     * 2. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\tresponse: object\n     * }\n     * 3. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\terror: object\n     * }\n     * 4. {\n     * \t\ttags: ['event', 'client'],\n     * \t\tevent: object\n     * }\n     * 5. {\n     * \t\ttags: ['channel'],\n     * \t\tchannel: object\n     * }\n     */\n\n    this.logger = isFunction(inputOptions.logger) ? inputOptions.logger : function () {\n      return null;\n    };\n    this.recoverStateOnReconnect = this.options.recoverStateOnReconnect;\n  }\n  /**\n   * Get a client instance\n   *\n   * This function always returns the same Client instance to avoid issues raised by multiple Client and WS connections\n   *\n   * **After the first call, the client configuration will not change if the key or options parameters change**\n   *\n   * @param {string} key - the api key\n   * @param {string} [secret] - the api secret\n   * @param {StreamChatOptions} [options] - additional options, here you can pass custom options to axios instance\n   * @param {boolean} [options.browser] - enforce the client to be in browser mode\n   * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n   * @param {Logger} [options.Logger] - custom logger\n   * @param {number} [options.timeout] - default to 3000\n   * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n   * @example <caption>initialize the client in user mode</caption>\n   * StreamChat.getInstance('api_key')\n   * @example <caption>initialize the client in user mode with options</caption>\n   * StreamChat.getInstance('api_key', { timeout:5000 })\n   * @example <caption>secret is optional and only used in server side mode</caption>\n   * StreamChat.getInstance('api_key', \"secret\", { httpsAgent: customAgent })\n   */\n\n  _createClass(StreamChat, [{\n    key: \"devToken\",\n    value: function devToken(userID) {\n      return DevToken(userID);\n    }\n  }, {\n    key: \"getAuthType\",\n    value: function getAuthType() {\n      return this.anonymous ? 'anonymous' : 'jwt';\n    }\n  }, {\n    key: \"setBaseURL\",\n    value: function setBaseURL(baseURL) {\n      this.baseURL = baseURL;\n      this.wsBaseURL = this.baseURL.replace('http', 'ws').replace(':3030', ':8800');\n    }\n  }, {\n    key: \"_setUser\",\n    value: function _setUser(user) {\n      /**\n       * This one is used by the frontend. This is a copy of the current user object stored on backend.\n       * It contains reserved properties and own user properties which are not present in `this._user`.\n       */\n      this.user = user; // this one is actually used for requests. This is a copy of current user provided to `connectUser` function.\n\n      this._user = _objectSpread({}, user);\n    }\n    /**\n     * Disconnects the websocket connection, without removing the user set on client.\n     * client.closeConnection will not trigger default auto-retry mechanism for reconnection. You need\n     * to call client.openConnection to reconnect to websocket.\n     *\n     * This is mainly useful on mobile side. You can only receive push notifications\n     * if you don't have active websocket connection.\n     * So when your app goes to background, you can call `client.closeConnection`.\n     * And when app comes back to foreground, call `client.openConnection`.\n     *\n     * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming succesful disconnection.\n     *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n     */\n  }, {\n    key: \"updateAppSettings\",\n    value:\n    /**\n    * updateAppSettings - updates application settings\n    *\n    * @param {AppSettings} options App settings.\n    * \t\tIE: {\n     \t\t\t\"apn_config\": {\n    \t\t\t\"auth_type\": \"token\",\n    \t\t\t\"auth_key\": fs.readFileSync(\n    \t\t\t\t'./apn-push-auth-key.p8',\n    \t\t\t\t'utf-8',\n    \t\t\t),\n    \t\t\t\"key_id\": \"keyid\",\n    \t\t\t\"team_id\": \"teamid\", //either ALL these 3\n    \t\t\t\"notification_template\": \"notification handlebars template\",\n    \t\t\t\"bundle_id\": \"com.apple.your.app\",\n    \t\t\t\"development\": true\n    \t\t},\n    \t\t\"firebase_config\": {\n    \t\t\t\"server_key\": \"server key from fcm\",\n    \t\t\t\"notification_template\": \"notification handlebars template\"\n    \t\t\t\"data_template\": \"data handlebars template\"\n    \t\t},\n    \t\t\"webhook_url\": \"https://acme.com/my/awesome/webhook/\"\n    \t}\n    */\n    function () {\n      var _updateAppSettings = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(options) {\n        var _options$apn_config;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if ((_options$apn_config = options.apn_config) !== null && _options$apn_config !== void 0 && _options$apn_config.p12_cert) {\n                  options.apn_config.p12_cert = Buffer.from(options.apn_config.p12_cert).toString('base64');\n                }\n                _context6.next = 3;\n                return this.patch(this.baseURL + '/app', options);\n              case 3:\n                return _context6.abrupt(\"return\", _context6.sent);\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function updateAppSettings(_x7) {\n        return _updateAppSettings.apply(this, arguments);\n      }\n      return updateAppSettings;\n    }()\n  }, {\n    key: \"revokeTokens\",\n    value:\n    /**\n     * Revokes all tokens on application level issued before given time\n     */\n    function () {\n      var _revokeTokens = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(before) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.updateAppSettings({\n                  revoke_tokens_issued_before: this._normalizeDate(before)\n                });\n              case 2:\n                return _context7.abrupt(\"return\", _context7.sent);\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function revokeTokens(_x8) {\n        return _revokeTokens.apply(this, arguments);\n      }\n      return revokeTokens;\n    }()\n    /**\n     * Revokes token for a user issued before given time\n     */\n  }, {\n    key: \"revokeUserToken\",\n    value: function () {\n      var _revokeUserToken = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(userID, before) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.revokeUsersToken([userID], before);\n              case 2:\n                return _context8.abrupt(\"return\", _context8.sent);\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function revokeUserToken(_x9, _x10) {\n        return _revokeUserToken.apply(this, arguments);\n      }\n      return revokeUserToken;\n    }()\n    /**\n     * Revokes tokens for a list of users issued before given time\n     */\n  }, {\n    key: \"revokeUsersToken\",\n    value: function () {\n      var _revokeUsersToken = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(userIDs, before) {\n        var users, _iterator, _step, userID;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (before === undefined) {\n                  before = new Date().toISOString();\n                } else {\n                  before = this._normalizeDate(before);\n                }\n                users = [];\n                _iterator = _createForOfIteratorHelper(userIDs);\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    userID = _step.value;\n                    users.push({\n                      id: userID,\n                      set: {\n                        revoke_tokens_issued_before: before\n                      }\n                    });\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n                _context9.next = 6;\n                return this.partialUpdateUsers(users);\n              case 6:\n                return _context9.abrupt(\"return\", _context9.sent);\n              case 7:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function revokeUsersToken(_x11, _x12) {\n        return _revokeUsersToken.apply(this, arguments);\n      }\n      return revokeUsersToken;\n    }()\n    /**\n     * getAppSettings - retrieves application settings\n     */\n  }, {\n    key: \"getAppSettings\",\n    value: function () {\n      var _getAppSettings = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.get(this.baseURL + '/app');\n              case 2:\n                return _context10.abrupt(\"return\", _context10.sent);\n              case 3:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function getAppSettings() {\n        return _getAppSettings.apply(this, arguments);\n      }\n      return getAppSettings;\n    }()\n    /**\n    * testPushSettings - Tests the push settings for a user with a random chat message and the configured push templates\n    *\n    * @param {string} userID User ID. If user has no devices, it will error\n    * @param {TestPushDataInput} [data] Overrides for push templates/message used\n    * \t\tIE: {\n    \t\t  messageID: 'id-of-message',//will error if message does not exist\n    \t\t  apnTemplate: '{}', //if app doesn't have apn configured it will error\n    \t\t  firebaseTemplate: '{}', //if app doesn't have firebase configured it will error\n    \t\t  firebaseDataTemplate: '{}', //if app doesn't have firebase configured it will error\n    \t\t  skipDevices: true, // skip config/device checks and sending to real devices\n    \t}\n    */\n  }, {\n    key: \"testPushSettings\",\n    value: function () {\n      var _testPushSettings = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(userID) {\n        var data,\n          _args11 = arguments;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                data = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : {};\n                _context11.next = 3;\n                return this.post(this.baseURL + '/check_push', _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n                  user_id: userID\n                }, data.messageID ? {\n                  message_id: data.messageID\n                } : {}), data.apnTemplate ? {\n                  apn_template: data.apnTemplate\n                } : {}), data.firebaseTemplate ? {\n                  firebase_template: data.firebaseTemplate\n                } : {}), data.firebaseDataTemplate ? {\n                  firebase_data_template: data.firebaseDataTemplate\n                } : {}), data.skipDevices ? {\n                  skip_devices: true\n                } : {}));\n              case 3:\n                return _context11.abrupt(\"return\", _context11.sent);\n              case 4:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function testPushSettings(_x13) {\n        return _testPushSettings.apply(this, arguments);\n      }\n      return testPushSettings;\n    }()\n    /**\n     * testSQSSettings - Tests that the given or configured SQS configuration is valid\n     *\n     * @param {string} userID User ID. If user has no devices, it will error\n     * @param {TestPushDataInput} [data] Overrides for push templates/message used\n     * \t\tIE: {\n    \t\t  messageID: 'id-of-message',//will error if message does not exist\n    \t\t  apnTemplate: '{}', //if app doesn't have apn configured it will error\n    \t\t  firebaseTemplate: '{}', //if app doesn't have firebase configured it will error\n    \t\t  firebaseDataTemplate: '{}', //if app doesn't have firebase configured it will error\n    \t}\n     */\n  }, {\n    key: \"testSQSSettings\",\n    value: function () {\n      var _testSQSSettings = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        var data,\n          _args12 = arguments;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                data = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : {};\n                _context12.next = 3;\n                return this.post(this.baseURL + '/check_sqs', data);\n              case 3:\n                return _context12.abrupt(\"return\", _context12.sent);\n              case 4:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function testSQSSettings() {\n        return _testSQSSettings.apply(this, arguments);\n      }\n      return testSQSSettings;\n    }()\n    /**\n     * Disconnects the websocket and removes the user from client.\n     *\n     * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n     *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n     */\n  }, {\n    key: \"setGuestUser\",\n    value:\n    /**\n     * setGuestUser - Setup a temporary guest user\n     *\n     * @param {UserResponse<UserType>} user Data about this user. IE {name: \"john\"}\n     *\n     * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Returns a promise that resolves when the connection is setup\n     */\n    function () {\n      var _setGuestUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee13(user) {\n        var response, _response$user, guestUser;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                this.anonymous = true;\n                _context13.prev = 1;\n                _context13.next = 4;\n                return this.post(this.baseURL + '/guest', {\n                  user: user\n                });\n              case 4:\n                response = _context13.sent;\n                _context13.next = 11;\n                break;\n              case 7:\n                _context13.prev = 7;\n                _context13.t0 = _context13[\"catch\"](1);\n                this.anonymous = false;\n                throw _context13.t0;\n              case 11:\n                this.anonymous = false; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n                _response$user = response.user, _response$user.created_at, _response$user.updated_at, _response$user.last_active, _response$user.online, guestUser = _objectWithoutProperties(_response$user, [\"created_at\", \"updated_at\", \"last_active\", \"online\"]);\n                _context13.next = 15;\n                return this.connectUser(guestUser, response.access_token);\n              case 15:\n                return _context13.abrupt(\"return\", _context13.sent);\n              case 16:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this, [[1, 7]]);\n      }));\n      function setGuestUser(_x14) {\n        return _setGuestUser.apply(this, arguments);\n      }\n      return setGuestUser;\n    }()\n    /**\n     * createToken - Creates a token to authenticate this user. This function is used server side.\n     * The resulting token should be passed to the client side when the users registers or logs in\n     *\n     * @param {string} userID The User ID\n     * @param {number} [exp] The expiration time for the token expressed in the number of seconds since the epoch\n     *\n     * @return {string} Returns a token\n     */\n  }, {\n    key: \"createToken\",\n    value: function createToken(userID, exp, iat) {\n      if (this.secret == null) {\n        throw Error(\"tokens can only be created server-side using the API Secret\");\n      }\n      var extra = {};\n      if (exp) {\n        extra.exp = exp;\n      }\n      if (iat) {\n        extra.iat = iat;\n      }\n      return JWTUserToken(this.secret, userID, extra, {});\n    }\n    /**\n     * on - Listen to events on all channels and users your watching\n     *\n     * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n     * or\n     * client.on(event => {console.log(event.type)})\n     *\n     * @param {EventHandler<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType> | string} callbackOrString  The event type to listen for (optional)\n     * @param {EventHandler<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>} [callbackOrNothing] The callback to call\n     *\n     * @return {{ unsubscribe: () => void }} Description\n     */\n  }, {\n    key: \"on\",\n    value: function on(callbackOrString, callbackOrNothing) {\n      var _this2 = this;\n      var key = callbackOrNothing ? callbackOrString : 'all';\n      var valid = isValidEventType(key);\n      if (!valid) {\n        throw Error(\"Invalid event type \".concat(key));\n      }\n      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n      if (!(key in this.listeners)) {\n        this.listeners[key] = [];\n      }\n      this.logger('info', \"Attaching listener for \".concat(key, \" event\"), {\n        tags: ['event', 'client']\n      });\n      this.listeners[key].push(callback);\n      return {\n        unsubscribe: function unsubscribe() {\n          _this2.logger('info', \"Removing listener for \".concat(key, \" event\"), {\n            tags: ['event', 'client']\n          });\n          _this2.listeners[key] = _this2.listeners[key].filter(function (el) {\n            return el !== callback;\n          });\n        }\n      };\n    }\n    /**\n     * off - Remove the event handler\n     *\n     */\n  }, {\n    key: \"off\",\n    value: function off(callbackOrString, callbackOrNothing) {\n      var key = callbackOrNothing ? callbackOrString : 'all';\n      var valid = isValidEventType(key);\n      if (!valid) {\n        throw Error(\"Invalid event type \".concat(key));\n      }\n      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n      if (!(key in this.listeners)) {\n        this.listeners[key] = [];\n      }\n      this.logger('info', \"Removing listener for \".concat(key, \" event\"), {\n        tags: ['event', 'client']\n      });\n      this.listeners[key] = this.listeners[key].filter(function (value) {\n        return value !== callback;\n      });\n    }\n  }, {\n    key: \"_logApiRequest\",\n    value: function _logApiRequest(type, url, data, config) {\n      this.logger('info', \"client: \".concat(type, \" - Request - \").concat(url), {\n        tags: ['api', 'api_request', 'client'],\n        url: url,\n        payload: data,\n        config: config\n      });\n    }\n  }, {\n    key: \"_logApiResponse\",\n    value: function _logApiResponse(type, url, response) {\n      this.logger('info', \"client:\".concat(type, \" - Response - url: \").concat(url, \" > status \").concat(response.status), {\n        tags: ['api', 'api_response', 'client'],\n        url: url,\n        response: response\n      });\n    }\n  }, {\n    key: \"_logApiError\",\n    value: function _logApiError(type, url, error) {\n      this.logger('error', \"client:\".concat(type, \" - Error - url: \").concat(url), {\n        tags: ['api', 'api_response', 'client'],\n        url: url,\n        error: error\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function get(url, params) {\n      return this.doAxiosRequest('get', url, null, {\n        params: params\n      });\n    }\n  }, {\n    key: \"put\",\n    value: function put(url, data) {\n      return this.doAxiosRequest('put', url, data);\n    }\n  }, {\n    key: \"post\",\n    value: function post(url, data) {\n      return this.doAxiosRequest('post', url, data);\n    }\n  }, {\n    key: \"patch\",\n    value: function patch(url, data) {\n      return this.doAxiosRequest('patch', url, data);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(url, params) {\n      return this.doAxiosRequest('delete', url, null, {\n        params: params\n      });\n    }\n  }, {\n    key: \"sendFile\",\n    value: function sendFile(url, uri, name, contentType, user) {\n      var data = addFileToFormData(uri, name, contentType);\n      if (user != null) data.append('user', JSON.stringify(user));\n      return this.doAxiosRequest('post', url, data, {\n        headers: data.getHeaders ? data.getHeaders() : {},\n        // node vs browser\n        config: {\n          timeout: 0,\n          maxContentLength: Infinity,\n          maxBodyLength: Infinity\n        }\n      });\n    }\n  }, {\n    key: \"errorFromResponse\",\n    value: function errorFromResponse(response) {\n      var err;\n      err = new Error(\"StreamChat error HTTP code: \".concat(response.status));\n      if (response.data && response.data.code) {\n        err = new Error(\"StreamChat error code \".concat(response.data.code, \": \").concat(response.data.message));\n        err.code = response.data.code;\n      }\n      err.response = response;\n      err.status = response.status;\n      return err;\n    }\n  }, {\n    key: \"handleResponse\",\n    value: function handleResponse(response) {\n      var data = response.data;\n      if ((response.status + '')[0] !== '2') {\n        throw this.errorFromResponse(response);\n      }\n      return data;\n    }\n  }, {\n    key: \"_handleClientEvent\",\n    value: function _handleClientEvent(event) {\n      var _event$me,\n        _this3 = this,\n        _event$me2;\n      var client = this;\n      var postListenerCallbacks = [];\n      this.logger('info', \"client:_handleClientEvent - Received event of type { \".concat(event.type, \" }\"), {\n        tags: ['event', 'client'],\n        event: event\n      });\n      if (event.type === 'user.presence.changed' || event.type === 'user.updated' || event.type === 'user.deleted') {\n        this._handleUserEvent(event);\n      }\n      if (event.type === 'health.check' && event.me) {\n        client.user = event.me;\n        client.state.updateUser(event.me);\n        client.mutedChannels = event.me.channel_mutes;\n        client.mutedUsers = event.me.mutes;\n      }\n      if (event.channel && event.type === 'notification.message_new') {\n        this.configs[event.channel.type] = event.channel.config;\n      }\n      if (event.type === 'notification.channel_mutes_updated' && (_event$me = event.me) !== null && _event$me !== void 0 && _event$me.channel_mutes) {\n        var currentMutedChannelIds = [];\n        var nextMutedChannelIds = [];\n        this.mutedChannels.forEach(function (mute) {\n          return mute.channel && currentMutedChannelIds.push(mute.channel.cid);\n        });\n        event.me.channel_mutes.forEach(function (mute) {\n          return mute.channel && nextMutedChannelIds.push(mute.channel.cid);\n        });\n        /** Set the unread count of un-muted channels to 0, which is the behaviour of backend */\n\n        currentMutedChannelIds.forEach(function (cid) {\n          if (!nextMutedChannelIds.includes(cid) && _this3.activeChannels[cid]) {\n            _this3.activeChannels[cid].state.unreadCount = 0;\n          }\n        });\n        this.mutedChannels = event.me.channel_mutes;\n      }\n      if (event.type === 'notification.mutes_updated' && (_event$me2 = event.me) !== null && _event$me2 !== void 0 && _event$me2.mutes) {\n        this.mutedUsers = event.me.mutes;\n      }\n      if ((event.type === 'channel.deleted' || event.type === 'notification.channel_deleted') && event.cid) {\n        var _this$activeChannels$;\n        client.state.deleteAllChannelReference(event.cid);\n        (_this$activeChannels$ = this.activeChannels[event.cid]) === null || _this$activeChannels$ === void 0 ? void 0 : _this$activeChannels$._disconnect();\n        postListenerCallbacks.push(function () {\n          if (!event.cid) return;\n          delete _this3.activeChannels[event.cid];\n        });\n      }\n      return postListenerCallbacks;\n    }\n  }, {\n    key: \"_muteStatus\",\n    value: function _muteStatus(cid) {\n      var muteStatus;\n      for (var i = 0; i < this.mutedChannels.length; i++) {\n        var _mute$channel;\n        var mute = this.mutedChannels[i];\n        if (((_mute$channel = mute.channel) === null || _mute$channel === void 0 ? void 0 : _mute$channel.cid) === cid) {\n          muteStatus = {\n            muted: mute.expires ? new Date(mute.expires).getTime() > new Date().getTime() : true,\n            createdAt: mute.created_at ? new Date(mute.created_at) : new Date(),\n            expiresAt: mute.expires ? new Date(mute.expires) : null\n          };\n          break;\n        }\n      }\n      if (muteStatus) {\n        return muteStatus;\n      }\n      return {\n        muted: false,\n        createdAt: null,\n        expiresAt: null\n      };\n    }\n  }, {\n    key: \"connect\",\n    value:\n    /**\n     * @private\n     */\n    function () {\n      var _connect = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        var client, warmUpPromise, handshake;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                this.connecting = true;\n                client = this;\n                this.failures = 0;\n                if (!(client.userID == null || this._user == null)) {\n                  _context14.next = 5;\n                  break;\n                }\n                throw Error('Call connectUser or connectAnonymousUser before starting the connection');\n              case 5:\n                if (!(client.wsBaseURL == null)) {\n                  _context14.next = 7;\n                  break;\n                }\n                throw Error('Websocket base url not set');\n              case 7:\n                if (!(client.clientID == null)) {\n                  _context14.next = 9;\n                  break;\n                }\n                throw Error('clientID is not set');\n              case 9:\n                // The StableWSConnection handles all the reconnection logic.\n                this.wsConnection = new StableWSConnection({\n                  wsBaseURL: client.wsBaseURL,\n                  clientID: client.clientID,\n                  userID: client.userID,\n                  tokenManager: client.tokenManager,\n                  user: this._user,\n                  authType: this.getAuthType(),\n                  userAgent: this.getUserAgent(),\n                  apiKey: this.key,\n                  recoverCallback: this.recoverState,\n                  messageCallback: this.handleEvent,\n                  eventCallback: this.dispatchEvent,\n                  logger: this.logger,\n                  device: this.options.device\n                });\n                if (this.options.warmUp) {\n                  warmUpPromise = this.doAxiosRequest('options', this.baseURL + '/connect');\n                }\n                _context14.next = 13;\n                return this.wsConnection.connect();\n              case 13:\n                handshake = _context14.sent;\n                _context14.prev = 14;\n                _context14.next = 17;\n                return warmUpPromise;\n              case 17:\n                _context14.next = 22;\n                break;\n              case 19:\n                _context14.prev = 19;\n                _context14.t0 = _context14[\"catch\"](14);\n                this.logger('error', 'Warmup request failed', {\n                  error: _context14.t0\n                });\n              case 22:\n                return _context14.abrupt(\"return\", handshake);\n              case 23:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this, [[14, 19]]);\n      }));\n      function connect() {\n        return _connect.apply(this, arguments);\n      }\n      return connect;\n    }()\n    /**\n     * queryUsers - Query users and watch user presence\n     *\n     * @param {UserFilters<UserType>} filterConditions MongoDB style filter conditions\n     * @param {UserSort<UserType>} sort Sort options, for instance [{last_active: -1}].\n     * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_active: -1}, {created_at: 1}]\n     * @param {UserOptions} options Option object, {presence: true}\n     *\n     * @return {Promise<APIResponse & { users: Array<UserResponse<UserType>> }>} User Query Response\n     */\n  }, {\n    key: \"queryUsers\",\n    value: function () {\n      var _queryUsers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee15(filterConditions) {\n        var sort,\n          options,\n          defaultOptions,\n          data,\n          _args15 = arguments;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                sort = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : [];\n                options = _args15.length > 2 && _args15[2] !== undefined ? _args15[2] : {};\n                defaultOptions = {\n                  presence: false\n                }; // Make sure we wait for the connect promise if there is a pending one\n\n                _context15.next = 5;\n                return this.setUserPromise;\n              case 5:\n                if (!this._hasConnectionID()) {\n                  defaultOptions.presence = false;\n                } // Return a list of users\n\n                _context15.next = 8;\n                return this.get(this.baseURL + '/users', {\n                  payload: _objectSpread(_objectSpread({\n                    filter_conditions: filterConditions,\n                    sort: normalizeQuerySort(sort)\n                  }, defaultOptions), options)\n                });\n              case 8:\n                data = _context15.sent;\n                this.state.updateUsers(data.users);\n                return _context15.abrupt(\"return\", data);\n              case 11:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n      function queryUsers(_x15) {\n        return _queryUsers.apply(this, arguments);\n      }\n      return queryUsers;\n    }()\n    /**\n     * queryBannedUsers - Query user bans\n     *\n     * @param {BannedUsersFilters} filterConditions MongoDB style filter conditions\n     * @param {BannedUsersSort} sort Sort options [{created_at: 1}].\n     * @param {BannedUsersPaginationOptions} options Option object, {limit: 10, offset:0}\n     *\n     * @return {Promise<BannedUsersResponse<ChannelType, CommandType, UserType>>} Ban Query Response\n     */\n  }, {\n    key: \"queryBannedUsers\",\n    value: function () {\n      var _queryBannedUsers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n        var filterConditions,\n          sort,\n          options,\n          _args16 = arguments;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                filterConditions = _args16.length > 0 && _args16[0] !== undefined ? _args16[0] : {};\n                sort = _args16.length > 1 && _args16[1] !== undefined ? _args16[1] : [];\n                options = _args16.length > 2 && _args16[2] !== undefined ? _args16[2] : {};\n                _context16.next = 5;\n                return this.get(this.baseURL + '/query_banned_users', {\n                  payload: _objectSpread({\n                    filter_conditions: filterConditions,\n                    sort: normalizeQuerySort(sort)\n                  }, options)\n                });\n              case 5:\n                return _context16.abrupt(\"return\", _context16.sent);\n              case 6:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n      function queryBannedUsers() {\n        return _queryBannedUsers.apply(this, arguments);\n      }\n      return queryBannedUsers;\n    }()\n    /**\n     * queryMessageFlags - Query message flags\n     *\n     * @param {MessageFlagsFilters} filterConditions MongoDB style filter conditions\n     * @param {MessageFlagsPaginationOptions} options Option object, {limit: 10, offset:0}\n     *\n     * @return {Promise<MessageFlagsResponse<ChannelType, CommandType, UserType>>} Message Flags Response\n     */\n  }, {\n    key: \"queryMessageFlags\",\n    value: function () {\n      var _queryMessageFlags = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n        var filterConditions,\n          options,\n          _args17 = arguments;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                filterConditions = _args17.length > 0 && _args17[0] !== undefined ? _args17[0] : {};\n                options = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : {};\n                _context17.next = 4;\n                return this.get(this.baseURL + '/moderation/flags/message', {\n                  payload: _objectSpread({\n                    filter_conditions: filterConditions\n                  }, options)\n                });\n              case 4:\n                return _context17.abrupt(\"return\", _context17.sent);\n              case 5:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n      function queryMessageFlags() {\n        return _queryMessageFlags.apply(this, arguments);\n      }\n      return queryMessageFlags;\n    }()\n    /**\n     * queryChannels - Query channels\n     *\n     * @param {ChannelFilters<ChannelType, CommandType, UserType>} filterConditions object MongoDB style filters\n     * @param {ChannelSort<ChannelType>} [sort] Sort options, for instance {created_at: -1}.\n     * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_updated: -1}, {created_at: 1}]\n     * @param {ChannelOptions} [options] Options object\n     * @param {ChannelStateOptions} [stateOptions] State options object. These options will only be used for state management and won't be sent in the request.\n     * - stateOptions.skipInitialization - Skips the initialization of the state for the channels matching the ids in the list.\n     *\n     * @return {Promise<APIResponse & { channels: Array<ChannelAPIResponse<AttachmentType,ChannelType,CommandType,MessageType,ReactionType,UserType>>}> } search channels response\n     */\n  }, {\n    key: \"queryChannels\",\n    value: function () {\n      var _queryChannels = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee18(filterConditions) {\n        var sort,\n          options,\n          stateOptions,\n          skipInitialization,\n          defaultOptions,\n          payload,\n          data,\n          channels,\n          _iterator2,\n          _step2,\n          channelState,\n          _iterator3,\n          _step3,\n          _channelState,\n          c,\n          _args18 = arguments;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                sort = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : [];\n                options = _args18.length > 2 && _args18[2] !== undefined ? _args18[2] : {};\n                stateOptions = _args18.length > 3 && _args18[3] !== undefined ? _args18[3] : {};\n                skipInitialization = stateOptions.skipInitialization;\n                defaultOptions = {\n                  state: true,\n                  watch: true,\n                  presence: false\n                }; // Make sure we wait for the connect promise if there is a pending one\n\n                _context18.next = 7;\n                return this.setUserPromise;\n              case 7:\n                if (!this._hasConnectionID()) {\n                  defaultOptions.watch = false;\n                } // Return a list of channels\n\n                payload = _objectSpread(_objectSpread({\n                  filter_conditions: filterConditions,\n                  sort: normalizeQuerySort(sort)\n                }, defaultOptions), options);\n                _context18.next = 11;\n                return this.post(this.baseURL + '/channels', payload);\n              case 11:\n                data = _context18.sent;\n                channels = []; // update our cache of the configs\n\n                _iterator2 = _createForOfIteratorHelper(data.channels);\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    channelState = _step2.value;\n                    this._addChannelConfig(channelState);\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n                _iterator3 = _createForOfIteratorHelper(data.channels);\n                try {\n                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                    _channelState = _step3.value;\n                    c = this.channel(_channelState.channel.type, _channelState.channel.id);\n                    c.data = _channelState.channel;\n                    c.initialized = true;\n                    if (skipInitialization === undefined) {\n                      c._initializeState(_channelState);\n                    } else if (!skipInitialization.includes(_channelState.channel.id)) {\n                      c.state.clearMessages();\n                      c._initializeState(_channelState);\n                    }\n                    channels.push(c);\n                  }\n                } catch (err) {\n                  _iterator3.e(err);\n                } finally {\n                  _iterator3.f();\n                }\n                return _context18.abrupt(\"return\", channels);\n              case 18:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n      function queryChannels(_x16) {\n        return _queryChannels.apply(this, arguments);\n      }\n      return queryChannels;\n    }()\n    /**\n     * search - Query messages\n     *\n     * @param {ChannelFilters<ChannelType, CommandType, UserType>} filterConditions MongoDB style filter conditions\n     * @param {MessageFilters<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType> | string} query search query or object MongoDB style filters\n     * @param {SearchOptions<MessageType>} [options] Option object, {user_id: 'tommaso'}\n     *\n     * @return {Promise<SearchAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} search messages response\n     */\n  }, {\n    key: \"search\",\n    value: function () {\n      var _search = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee19(filterConditions, query) {\n        var options,\n          payload,\n          _args19 = arguments;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                options = _args19.length > 2 && _args19[2] !== undefined ? _args19[2] : {};\n                if (!(options.offset && (options.sort || options.next))) {\n                  _context19.next = 3;\n                  break;\n                }\n                throw Error(\"Cannot specify offset with sort or next parameters\");\n              case 3:\n                payload = _objectSpread(_objectSpread({\n                  filter_conditions: filterConditions\n                }, options), {}, {\n                  sort: options.sort ? normalizeQuerySort(options.sort) : undefined\n                });\n                if (!(typeof query === 'string')) {\n                  _context19.next = 8;\n                  break;\n                }\n                payload.query = query;\n                _context19.next = 13;\n                break;\n              case 8:\n                if (!(_typeof(query) === 'object')) {\n                  _context19.next = 12;\n                  break;\n                }\n                payload.message_filter_conditions = query;\n                _context19.next = 13;\n                break;\n              case 12:\n                throw Error(\"Invalid type \".concat(_typeof(query), \" for query parameter\"));\n              case 13:\n                _context19.next = 15;\n                return this.setUserPromise;\n              case 15:\n                _context19.next = 17;\n                return this.get(this.baseURL + '/search', {\n                  payload: payload\n                });\n              case 17:\n                return _context19.abrupt(\"return\", _context19.sent);\n              case 18:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n      function search(_x17, _x18) {\n        return _search.apply(this, arguments);\n      }\n      return search;\n    }()\n    /**\n     * setLocalDevice - Set the device info for the current client(device) that will be sent via WS connection automatically\n     *\n     * @param {BaseDeviceFields} device the device object\n     * @param {string} device.id device id\n     * @param {string} device.push_provider the push provider (apn or firebase)\n     *\n     */\n  }, {\n    key: \"setLocalDevice\",\n    value: function setLocalDevice(device) {\n      if (this.wsConnection) {\n        throw new Error('you can only set device before opening a websocket connection');\n      }\n      this.options.device = device;\n    }\n    /**\n     * addDevice - Adds a push device for a user.\n     *\n     * @param {string} id the device id\n     * @param {'apn' | 'firebase'} push_provider the push provider (apn or firebase)\n     * @param {string} [userID] the user id (defaults to current user)\n     *\n     */\n  }, {\n    key: \"addDevice\",\n    value: function () {\n      var _addDevice = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee20(id, push_provider, userID) {\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return this.post(this.baseURL + '/devices', _objectSpread({\n                  id: id,\n                  push_provider: push_provider\n                }, userID != null ? {\n                  user_id: userID\n                } : {}));\n              case 2:\n                return _context20.abrupt(\"return\", _context20.sent);\n              case 3:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n      function addDevice(_x19, _x20, _x21) {\n        return _addDevice.apply(this, arguments);\n      }\n      return addDevice;\n    }()\n    /**\n     * getDevices - Returns the devices associated with a current user\n     *\n     * @param {string} [userID] User ID. Only works on serverside\n     *\n     * @return {APIResponse & Device<UserType>[]} Array of devices\n     */\n  }, {\n    key: \"getDevices\",\n    value: function () {\n      var _getDevices = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee21(userID) {\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return this.get(this.baseURL + '/devices', userID ? {\n                  user_id: userID\n                } : {});\n              case 2:\n                return _context21.abrupt(\"return\", _context21.sent);\n              case 3:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n      function getDevices(_x22) {\n        return _getDevices.apply(this, arguments);\n      }\n      return getDevices;\n    }()\n    /**\n     * removeDevice - Removes the device with the given id. Clientside users can only delete their own devices\n     *\n     * @param {string} id The device id\n     * @param {string} [userID] The user id. Only specify this for serverside requests\n     *\n     */\n  }, {\n    key: \"removeDevice\",\n    value: function () {\n      var _removeDevice = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee22(id, userID) {\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return this.delete(this.baseURL + '/devices', _objectSpread({\n                  id: id\n                }, userID ? {\n                  user_id: userID\n                } : {}));\n              case 2:\n                return _context22.abrupt(\"return\", _context22.sent);\n              case 3:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n      function removeDevice(_x23, _x24) {\n        return _removeDevice.apply(this, arguments);\n      }\n      return removeDevice;\n    }()\n    /**\n     * getRateLimits - Returns the rate limits quota and usage for the current app, possibly filter for a specific platform and/or endpoints.\n     * Only available server-side.\n     *\n     * @param {object} [params] The params for the call. If none of the params are set, all limits for all platforms are returned.\n     * @returns {Promise<GetRateLimitsResponse>}\n     */\n  }, {\n    key: \"getRateLimits\",\n    value: function () {\n      var _getRateLimits = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee23(params) {\n        var _ref6, serverSide, web, android, ios, endpoints;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                _ref6 = params || {}, serverSide = _ref6.serverSide, web = _ref6.web, android = _ref6.android, ios = _ref6.ios, endpoints = _ref6.endpoints;\n                return _context23.abrupt(\"return\", this.get(this.baseURL + '/rate_limits', {\n                  server_side: serverSide,\n                  web: web,\n                  android: android,\n                  ios: ios,\n                  endpoints: endpoints ? endpoints.join(',') : undefined\n                }));\n              case 2:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n      function getRateLimits(_x25) {\n        return _getRateLimits.apply(this, arguments);\n      }\n      return getRateLimits;\n    }()\n  }, {\n    key: \"_addChannelConfig\",\n    value: function _addChannelConfig(channelState) {\n      this.configs[channelState.channel.type] = channelState.channel.config;\n    }\n    /**\n     * channel - Returns a new channel with the given type, id and custom data\n     *\n     * If you want to create a unique conversation between 2 or more users; you can leave out the ID parameter and provide the list of members.\n     * Make sure to await channel.create() or channel.watch() before accessing channel functions:\n     * ie. channel = client.channel(\"messaging\", {members: [\"tommaso\", \"thierry\"]})\n     * await channel.create() to assign an ID to channel\n     *\n     * @param {string} channelType The channel type\n     * @param {string | ChannelData<ChannelType> | null} [channelIDOrCustom]   The channel ID, you can leave this out if you want to create a conversation channel\n     * @param {object} [custom]    Custom data to attach to the channel\n     *\n     * @return {channel} The channel object, initialize it using channel.watch()\n     */\n  }, {\n    key: \"channel\",\n    value: function channel(channelType, channelIDOrCustom) {\n      var custom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (!this.userID && !this._isUsingServerAuth()) {\n        throw Error('Call connectUser or connectAnonymousUser before creating a channel');\n      }\n      if (~channelType.indexOf(':')) {\n        throw Error(\"Invalid channel group \".concat(channelType, \", can't contain the : character\"));\n      } // support channel(\"messaging\", null, {options})\n      // support channel(\"messaging\", undefined, {options})\n      // support channel(\"messaging\", \"\", {options})\n\n      if (channelIDOrCustom == null || channelIDOrCustom === '') {\n        return new Channel(this, channelType, undefined, custom);\n      } // support channel(\"messaging\", {options})\n\n      if (_typeof(channelIDOrCustom) === 'object') {\n        return this.getChannelByMembers(channelType, channelIDOrCustom);\n      }\n      return this.getChannelById(channelType, channelIDOrCustom, custom);\n    }\n    /**\n     * It's a helper method for `client.channel()` method, used to create unique conversation or\n     * channel based on member list instead of id.\n     *\n     * If the channel already exists in `activeChannels` list, then we simply return it, since that\n     * means the same channel was already requested or created.\n     *\n     * Otherwise we create a new instance of Channel class and return it.\n     *\n     * @private\n     *\n     * @param {string} channelType The channel type\n     * @param {object} [custom]    Custom data to attach to the channel\n     *\n     * @return {channel} The channel object, initialize it using channel.watch()\n     */\n  }, {\n    key: \"partialUpdateUser\",\n    value:\n    /**\n     * partialUpdateUser - Update the given user object\n     *\n     * @param {PartialUserUpdate<UserType>} partialUserObject which should contain id and any of \"set\" or \"unset\" params;\n     * example: {id: \"user1\", set:{field: value}, unset:[\"field2\"]}\n     *\n     * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>} list of updated users\n     */\n    function () {\n      var _partialUpdateUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee24(partialUserObject) {\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return this.partialUpdateUsers([partialUserObject]);\n              case 2:\n                return _context24.abrupt(\"return\", _context24.sent);\n              case 3:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n      function partialUpdateUser(_x26) {\n        return _partialUpdateUser.apply(this, arguments);\n      }\n      return partialUpdateUser;\n    }()\n    /**\n     * upsertUsers - Batch upsert the list of users\n     *\n     * @param {UserResponse<UserType>[]} users list of users\n     *\n     * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>}\n     */\n  }, {\n    key: \"upsertUsers\",\n    value: function () {\n      var _upsertUsers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee25(users) {\n        var userMap, _iterator4, _step4, userObject;\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                userMap = {};\n                _iterator4 = _createForOfIteratorHelper(users);\n                _context25.prev = 2;\n                _iterator4.s();\n              case 4:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context25.next = 11;\n                  break;\n                }\n                userObject = _step4.value;\n                if (userObject.id) {\n                  _context25.next = 8;\n                  break;\n                }\n                throw Error('User ID is required when updating a user');\n              case 8:\n                userMap[userObject.id] = userObject;\n              case 9:\n                _context25.next = 4;\n                break;\n              case 11:\n                _context25.next = 16;\n                break;\n              case 13:\n                _context25.prev = 13;\n                _context25.t0 = _context25[\"catch\"](2);\n                _iterator4.e(_context25.t0);\n              case 16:\n                _context25.prev = 16;\n                _iterator4.f();\n                return _context25.finish(16);\n              case 19:\n                _context25.next = 21;\n                return this.post(this.baseURL + '/users', {\n                  users: userMap\n                });\n              case 21:\n                return _context25.abrupt(\"return\", _context25.sent);\n              case 22:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this, [[2, 13, 16, 19]]);\n      }));\n      function upsertUsers(_x27) {\n        return _upsertUsers.apply(this, arguments);\n      }\n      return upsertUsers;\n    }()\n    /**\n     * @deprecated Please use upsertUsers() function instead.\n     *\n     * updateUsers - Batch update the list of users\n     *\n     * @param {UserResponse<UserType>[]} users list of users\n     * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>}\n     */\n  }, {\n    key: \"upsertUser\",\n    value:\n    /**\n     * upsertUser - Update or Create the given user object\n     *\n     * @param {UserResponse<UserType>} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n     *\n     * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>}\n     */\n    function upsertUser(userObject) {\n      return this.upsertUsers([userObject]);\n    }\n    /**\n     * @deprecated Please use upsertUser() function instead.\n     *\n     * updateUser - Update or Create the given user object\n     *\n     * @param {UserResponse<UserType>} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n     * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>}\n     */\n  }, {\n    key: \"partialUpdateUsers\",\n    value:\n    /**\n     * partialUpdateUsers - Batch partial update of users\n     *\n     * @param {PartialUserUpdate<UserType>[]} users list of partial update requests\n     *\n     * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>}\n     */\n    function () {\n      var _partialUpdateUsers = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee26(users) {\n        var _iterator5, _step5, userObject;\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                _iterator5 = _createForOfIteratorHelper(users);\n                _context26.prev = 1;\n                _iterator5.s();\n              case 3:\n                if ((_step5 = _iterator5.n()).done) {\n                  _context26.next = 9;\n                  break;\n                }\n                userObject = _step5.value;\n                if (userObject.id) {\n                  _context26.next = 7;\n                  break;\n                }\n                throw Error('User ID is required when updating a user');\n              case 7:\n                _context26.next = 3;\n                break;\n              case 9:\n                _context26.next = 14;\n                break;\n              case 11:\n                _context26.prev = 11;\n                _context26.t0 = _context26[\"catch\"](1);\n                _iterator5.e(_context26.t0);\n              case 14:\n                _context26.prev = 14;\n                _iterator5.f();\n                return _context26.finish(14);\n              case 17:\n                _context26.next = 19;\n                return this.patch(this.baseURL + '/users', {\n                  users: users\n                });\n              case 19:\n                return _context26.abrupt(\"return\", _context26.sent);\n              case 20:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this, [[1, 11, 14, 17]]);\n      }));\n      function partialUpdateUsers(_x28) {\n        return _partialUpdateUsers.apply(this, arguments);\n      }\n      return partialUpdateUsers;\n    }()\n  }, {\n    key: \"deleteUser\",\n    value: function () {\n      var _deleteUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee27(userID, params) {\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                _context27.next = 2;\n                return this.delete(this.baseURL + \"/users/\".concat(userID), params);\n              case 2:\n                return _context27.abrupt(\"return\", _context27.sent);\n              case 3:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n      function deleteUser(_x29, _x30) {\n        return _deleteUser.apply(this, arguments);\n      }\n      return deleteUser;\n    }()\n  }, {\n    key: \"reactivateUser\",\n    value: function () {\n      var _reactivateUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee28(userID, options) {\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                _context28.next = 2;\n                return this.post(this.baseURL + \"/users/\".concat(userID, \"/reactivate\"), _objectSpread({}, options));\n              case 2:\n                return _context28.abrupt(\"return\", _context28.sent);\n              case 3:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n      function reactivateUser(_x31, _x32) {\n        return _reactivateUser.apply(this, arguments);\n      }\n      return reactivateUser;\n    }()\n  }, {\n    key: \"deactivateUser\",\n    value: function () {\n      var _deactivateUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee29(userID, options) {\n        return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                _context29.next = 2;\n                return this.post(this.baseURL + \"/users/\".concat(userID, \"/deactivate\"), _objectSpread({}, options));\n              case 2:\n                return _context29.abrupt(\"return\", _context29.sent);\n              case 3:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this);\n      }));\n      function deactivateUser(_x33, _x34) {\n        return _deactivateUser.apply(this, arguments);\n      }\n      return deactivateUser;\n    }()\n  }, {\n    key: \"exportUser\",\n    value: function () {\n      var _exportUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee30(userID, options) {\n        return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                _context30.next = 2;\n                return this.get(this.baseURL + \"/users/\".concat(userID, \"/export\"), _objectSpread({}, options));\n              case 2:\n                return _context30.abrupt(\"return\", _context30.sent);\n              case 3:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this);\n      }));\n      function exportUser(_x35, _x36) {\n        return _exportUser.apply(this, arguments);\n      }\n      return exportUser;\n    }()\n    /** banUser - bans a user from all channels\n     *\n     * @param {string} targetUserID\n     * @param {BanUserOptions<UserType>} [options]\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"banUser\",\n    value: function () {\n      var _banUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee31(targetUserID, options) {\n        return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                if ((options === null || options === void 0 ? void 0 : options.user_id) !== undefined) {\n                  options.banned_by_id = options.user_id;\n                  delete options.user_id;\n                  console.warn(\"banUser: 'user_id' is deprecated, please consider switching to 'banned_by_id'\");\n                }\n                if ((options === null || options === void 0 ? void 0 : options.user) !== undefined) {\n                  options.banned_by = options.user;\n                  delete options.user;\n                  console.warn(\"banUser: 'user' is deprecated, please consider switching to 'banned_by'\");\n                }\n                _context31.next = 4;\n                return this.post(this.baseURL + '/moderation/ban', _objectSpread({\n                  target_user_id: targetUserID\n                }, options));\n              case 4:\n                return _context31.abrupt(\"return\", _context31.sent);\n              case 5:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31, this);\n      }));\n      function banUser(_x37, _x38) {\n        return _banUser.apply(this, arguments);\n      }\n      return banUser;\n    }()\n    /** unbanUser - revoke global ban for a user\n     *\n     * @param {string} targetUserID\n     * @param {UnBanUserOptions} [options]\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"unbanUser\",\n    value: function () {\n      var _unbanUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee32(targetUserID, options) {\n        return _regeneratorRuntime.wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                _context32.next = 2;\n                return this.delete(this.baseURL + '/moderation/ban', _objectSpread({\n                  target_user_id: targetUserID\n                }, options));\n              case 2:\n                return _context32.abrupt(\"return\", _context32.sent);\n              case 3:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32, this);\n      }));\n      function unbanUser(_x39, _x40) {\n        return _unbanUser.apply(this, arguments);\n      }\n      return unbanUser;\n    }()\n    /** shadowBan - shadow bans a user from all channels\n     *\n     * @param {string} targetUserID\n     * @param {BanUserOptions<UserType>} [options]\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"shadowBan\",\n    value: function () {\n      var _shadowBan = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee33(targetUserID, options) {\n        return _regeneratorRuntime.wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                _context33.next = 2;\n                return this.banUser(targetUserID, _objectSpread({\n                  shadow: true\n                }, options));\n              case 2:\n                return _context33.abrupt(\"return\", _context33.sent);\n              case 3:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33, this);\n      }));\n      function shadowBan(_x41, _x42) {\n        return _shadowBan.apply(this, arguments);\n      }\n      return shadowBan;\n    }()\n    /** removeShadowBan - revoke global shadow ban for a user\n     *\n     * @param {string} targetUserID\n     * @param {UnBanUserOptions} [options]\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"removeShadowBan\",\n    value: function () {\n      var _removeShadowBan = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee34(targetUserID, options) {\n        return _regeneratorRuntime.wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                _context34.next = 2;\n                return this.unbanUser(targetUserID, _objectSpread({\n                  shadow: true\n                }, options));\n              case 2:\n                return _context34.abrupt(\"return\", _context34.sent);\n              case 3:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34, this);\n      }));\n      function removeShadowBan(_x43, _x44) {\n        return _removeShadowBan.apply(this, arguments);\n      }\n      return removeShadowBan;\n    }()\n    /** muteUser - mutes a user\n     *\n     * @param {string} targetID\n     * @param {string} [userID] Only used with serverside auth\n     * @param {MuteUserOptions<UserType>} [options]\n     * @returns {Promise<MuteUserResponse<ChannelType, CommandType, UserType>>}\n     */\n  }, {\n    key: \"muteUser\",\n    value: function () {\n      var _muteUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee35(targetID, userID) {\n        var options,\n          _args35 = arguments;\n        return _regeneratorRuntime.wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n                options = _args35.length > 2 && _args35[2] !== undefined ? _args35[2] : {};\n                _context35.next = 3;\n                return this.post(this.baseURL + '/moderation/mute', _objectSpread(_objectSpread({\n                  target_id: targetID\n                }, userID ? {\n                  user_id: userID\n                } : {}), options));\n              case 3:\n                return _context35.abrupt(\"return\", _context35.sent);\n              case 4:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n        }, _callee35, this);\n      }));\n      function muteUser(_x45, _x46) {\n        return _muteUser.apply(this, arguments);\n      }\n      return muteUser;\n    }()\n    /** unmuteUser - unmutes a user\n     *\n     * @param {string} targetID\n     * @param {string} [currentUserID] Only used with serverside auth\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"unmuteUser\",\n    value: function () {\n      var _unmuteUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee36(targetID, currentUserID) {\n        return _regeneratorRuntime.wrap(function _callee36$(_context36) {\n          while (1) {\n            switch (_context36.prev = _context36.next) {\n              case 0:\n                _context36.next = 2;\n                return this.post(this.baseURL + '/moderation/unmute', _objectSpread({\n                  target_id: targetID\n                }, currentUserID ? {\n                  user_id: currentUserID\n                } : {}));\n              case 2:\n                return _context36.abrupt(\"return\", _context36.sent);\n              case 3:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n        }, _callee36, this);\n      }));\n      function unmuteUser(_x47, _x48) {\n        return _unmuteUser.apply(this, arguments);\n      }\n      return unmuteUser;\n    }()\n    /** userMuteStatus - check if a user is muted or not, can be used after connectUser() is called\n     *\n     * @param {string} targetID\n     * @returns {boolean}\n     */\n  }, {\n    key: \"userMuteStatus\",\n    value: function userMuteStatus(targetID) {\n      if (!this.user || !this.wsPromise) {\n        throw new Error('Make sure to await connectUser() first.');\n      }\n      for (var i = 0; i < this.mutedUsers.length; i += 1) {\n        if (this.mutedUsers[i].target.id === targetID) return true;\n      }\n      return false;\n    }\n    /**\n     * flagMessage - flag a message\n     * @param {string} targetMessageID\n     * @param {string} [options.user_id] currentUserID, only used with serverside auth\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"flagMessage\",\n    value: function () {\n      var _flagMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee37(targetMessageID) {\n        var options,\n          _args37 = arguments;\n        return _regeneratorRuntime.wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n                options = _args37.length > 1 && _args37[1] !== undefined ? _args37[1] : {};\n                _context37.next = 3;\n                return this.post(this.baseURL + '/moderation/flag', _objectSpread({\n                  target_message_id: targetMessageID\n                }, options));\n              case 3:\n                return _context37.abrupt(\"return\", _context37.sent);\n              case 4:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n        }, _callee37, this);\n      }));\n      function flagMessage(_x49) {\n        return _flagMessage.apply(this, arguments);\n      }\n      return flagMessage;\n    }()\n    /**\n     * flagUser - flag a user\n     * @param {string} targetID\n     * @param {string} [options.user_id] currentUserID, only used with serverside auth\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"flagUser\",\n    value: function () {\n      var _flagUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee38(targetID) {\n        var options,\n          _args38 = arguments;\n        return _regeneratorRuntime.wrap(function _callee38$(_context38) {\n          while (1) {\n            switch (_context38.prev = _context38.next) {\n              case 0:\n                options = _args38.length > 1 && _args38[1] !== undefined ? _args38[1] : {};\n                _context38.next = 3;\n                return this.post(this.baseURL + '/moderation/flag', _objectSpread({\n                  target_user_id: targetID\n                }, options));\n              case 3:\n                return _context38.abrupt(\"return\", _context38.sent);\n              case 4:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n        }, _callee38, this);\n      }));\n      function flagUser(_x50) {\n        return _flagUser.apply(this, arguments);\n      }\n      return flagUser;\n    }()\n    /**\n     * unflagMessage - unflag a message\n     * @param {string} targetMessageID\n     * @param {string} [options.user_id] currentUserID, only used with serverside auth\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"unflagMessage\",\n    value: function () {\n      var _unflagMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee39(targetMessageID) {\n        var options,\n          _args39 = arguments;\n        return _regeneratorRuntime.wrap(function _callee39$(_context39) {\n          while (1) {\n            switch (_context39.prev = _context39.next) {\n              case 0:\n                options = _args39.length > 1 && _args39[1] !== undefined ? _args39[1] : {};\n                _context39.next = 3;\n                return this.post(this.baseURL + '/moderation/unflag', _objectSpread({\n                  target_message_id: targetMessageID\n                }, options));\n              case 3:\n                return _context39.abrupt(\"return\", _context39.sent);\n              case 4:\n              case \"end\":\n                return _context39.stop();\n            }\n          }\n        }, _callee39, this);\n      }));\n      function unflagMessage(_x51) {\n        return _unflagMessage.apply(this, arguments);\n      }\n      return unflagMessage;\n    }()\n    /**\n     * unflagUser - unflag a user\n     * @param {string} targetID\n     * @param {string} [options.user_id] currentUserID, only used with serverside auth\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"unflagUser\",\n    value: function () {\n      var _unflagUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee40(targetID) {\n        var options,\n          _args40 = arguments;\n        return _regeneratorRuntime.wrap(function _callee40$(_context40) {\n          while (1) {\n            switch (_context40.prev = _context40.next) {\n              case 0:\n                options = _args40.length > 1 && _args40[1] !== undefined ? _args40[1] : {};\n                _context40.next = 3;\n                return this.post(this.baseURL + '/moderation/unflag', _objectSpread({\n                  target_user_id: targetID\n                }, options));\n              case 3:\n                return _context40.abrupt(\"return\", _context40.sent);\n              case 4:\n              case \"end\":\n                return _context40.stop();\n            }\n          }\n        }, _callee40, this);\n      }));\n      function unflagUser(_x52) {\n        return _unflagUser.apply(this, arguments);\n      }\n      return unflagUser;\n    }()\n    /**\n     * markAllRead - marks all channels for this user as read\n     * @param {MarkAllReadOptions<UserType>} [data]\n     *\n     * @return {Promise<APIResponse>}\n     */\n  }, {\n    key: \"markAllRead\",\n    value: function () {\n      var _markAllRead = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee41() {\n        var data,\n          _args41 = arguments;\n        return _regeneratorRuntime.wrap(function _callee41$(_context41) {\n          while (1) {\n            switch (_context41.prev = _context41.next) {\n              case 0:\n                data = _args41.length > 0 && _args41[0] !== undefined ? _args41[0] : {};\n                _context41.next = 3;\n                return this.post(this.baseURL + '/channels/read', _objectSpread({}, data));\n              case 3:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n        }, _callee41, this);\n      }));\n      function markAllRead() {\n        return _markAllRead.apply(this, arguments);\n      }\n      return markAllRead;\n    }()\n  }, {\n    key: \"createCommand\",\n    value: function createCommand(data) {\n      return this.post(this.baseURL + '/commands', data);\n    }\n  }, {\n    key: \"getCommand\",\n    value: function getCommand(name) {\n      return this.get(this.baseURL + \"/commands/\".concat(name));\n    }\n  }, {\n    key: \"updateCommand\",\n    value: function updateCommand(name, data) {\n      return this.put(this.baseURL + \"/commands/\".concat(name), data);\n    }\n  }, {\n    key: \"deleteCommand\",\n    value: function deleteCommand(name) {\n      return this.delete(this.baseURL + \"/commands/\".concat(name));\n    }\n  }, {\n    key: \"listCommands\",\n    value: function listCommands() {\n      return this.get(this.baseURL + \"/commands\");\n    }\n  }, {\n    key: \"createChannelType\",\n    value: function createChannelType(data) {\n      var channelData = _extends({}, {\n        commands: ['all']\n      }, data);\n      return this.post(this.baseURL + '/channeltypes', channelData);\n    }\n  }, {\n    key: \"getChannelType\",\n    value: function getChannelType(channelType) {\n      return this.get(this.baseURL + \"/channeltypes/\".concat(channelType));\n    }\n  }, {\n    key: \"updateChannelType\",\n    value: function updateChannelType(channelType, data) {\n      return this.put(this.baseURL + \"/channeltypes/\".concat(channelType), data);\n    }\n  }, {\n    key: \"deleteChannelType\",\n    value: function deleteChannelType(channelType) {\n      return this.delete(this.baseURL + \"/channeltypes/\".concat(channelType));\n    }\n  }, {\n    key: \"listChannelTypes\",\n    value: function listChannelTypes() {\n      return this.get(this.baseURL + \"/channeltypes\");\n    }\n    /**\n     * translateMessage - adds the translation to the message\n     *\n     * @param {string} messageId\n     * @param {string} language\n     *\n     * @return {APIResponse & MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} Response that includes the message\n     */\n  }, {\n    key: \"translateMessage\",\n    value: function () {\n      var _translateMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee42(messageId, language) {\n        return _regeneratorRuntime.wrap(function _callee42$(_context42) {\n          while (1) {\n            switch (_context42.prev = _context42.next) {\n              case 0:\n                _context42.next = 2;\n                return this.post(this.baseURL + \"/messages/\".concat(messageId, \"/translate\"), {\n                  language: language\n                });\n              case 2:\n                return _context42.abrupt(\"return\", _context42.sent);\n              case 3:\n              case \"end\":\n                return _context42.stop();\n            }\n          }\n        }, _callee42, this);\n      }));\n      function translateMessage(_x53, _x54) {\n        return _translateMessage.apply(this, arguments);\n      }\n      return translateMessage;\n    }()\n    /**\n     * _normalizeExpiration - transforms expiration value into ISO string\n     * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date\n     */\n  }, {\n    key: \"_normalizeExpiration\",\n    value: function _normalizeExpiration(timeoutOrExpirationDate) {\n      var pinExpires;\n      if (typeof timeoutOrExpirationDate === 'number') {\n        var now = new Date();\n        now.setSeconds(now.getSeconds() + timeoutOrExpirationDate);\n        pinExpires = now.toISOString();\n      } else if (isString(timeoutOrExpirationDate)) {\n        pinExpires = timeoutOrExpirationDate;\n      } else if (timeoutOrExpirationDate instanceof Date) {\n        pinExpires = timeoutOrExpirationDate.toISOString();\n      }\n      return pinExpires;\n    }\n    /**\n     * _messageId - extracts string message id from either message object or message id\n     * @param {string | { id: string }} messageOrMessageId message object or message id\n     * @param {string} errorText error message to report in case of message id absence\n     */\n  }, {\n    key: \"_validateAndGetMessageId\",\n    value: function _validateAndGetMessageId(messageOrMessageId, errorText) {\n      var messageId;\n      if (typeof messageOrMessageId === 'string') {\n        messageId = messageOrMessageId;\n      } else {\n        if (!messageOrMessageId.id) {\n          throw Error(errorText);\n        }\n        messageId = messageOrMessageId.id;\n      }\n      return messageId;\n    }\n    /**\n     * pinMessage - pins the message\n     * @param {string | { id: string }} messageOrMessageId message object or message id\n     * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date\n     * @param {string | { id: string }} [userId]\n     */\n  }, {\n    key: \"pinMessage\",\n    value: function pinMessage(messageOrMessageId, timeoutOrExpirationDate, userId) {\n      var messageId = this._validateAndGetMessageId(messageOrMessageId, 'Please specify the message id when calling unpinMessage');\n      return this.partialUpdateMessage(messageId, {\n        set: {\n          pinned: true,\n          pin_expires: this._normalizeExpiration(timeoutOrExpirationDate)\n        }\n      }, userId);\n    }\n    /**\n     * unpinMessage - unpins the message that was previously pinned\n     * @param {string | { id: string }} messageOrMessageId message object or message id\n     * @param {string | { id: string }} [userId]\n     */\n  }, {\n    key: \"unpinMessage\",\n    value: function unpinMessage(messageOrMessageId, userId) {\n      var messageId = this._validateAndGetMessageId(messageOrMessageId, 'Please specify the message id when calling unpinMessage');\n      return this.partialUpdateMessage(messageId, {\n        set: {\n          pinned: false\n        }\n      }, userId);\n    }\n    /**\n     * updateMessage - Update the given message\n     *\n     * @param {Omit<MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>, 'mentioned_users'> & { mentioned_users?: string[] }} message object, id needs to be specified\n     * @param {string | { id: string }} [userId]\n     *\n     * @return {APIResponse & { message: MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType> }} Response that includes the message\n     */\n  }, {\n    key: \"updateMessage\",\n    value: function () {\n      var _updateMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee43(message, userId) {\n        var clonedMessage, reservedMessageFields;\n        return _regeneratorRuntime.wrap(function _callee43$(_context43) {\n          while (1) {\n            switch (_context43.prev = _context43.next) {\n              case 0:\n                if (message.id) {\n                  _context43.next = 2;\n                  break;\n                }\n                throw Error('Please specify the message id when calling updateMessage');\n              case 2:\n                clonedMessage = _extends({}, message);\n                delete clonedMessage.id;\n                reservedMessageFields = ['command', 'created_at', 'html', 'latest_reactions', 'own_reactions', 'reaction_counts', 'reply_count', 'type', 'updated_at', 'user', '__html'];\n                reservedMessageFields.forEach(function (item) {\n                  if (clonedMessage[item] != null) {\n                    delete clonedMessage[item];\n                  }\n                });\n                if (userId != null) {\n                  if (isString(userId)) {\n                    clonedMessage.user_id = userId;\n                  } else {\n                    clonedMessage.user = {\n                      id: userId.id\n                    };\n                  }\n                }\n                /**\n                 * Server always expects mentioned_users to be array of string. We are adding extra check, just in case\n                 * SDK missed this conversion.\n                 */\n\n                if (Array.isArray(clonedMessage.mentioned_users) && !isString(clonedMessage.mentioned_users[0])) {\n                  clonedMessage.mentioned_users = clonedMessage.mentioned_users.map(function (mu) {\n                    return mu.id;\n                  });\n                }\n                _context43.next = 10;\n                return this.post(this.baseURL + \"/messages/\".concat(message.id), {\n                  message: clonedMessage\n                });\n              case 10:\n                return _context43.abrupt(\"return\", _context43.sent);\n              case 11:\n              case \"end\":\n                return _context43.stop();\n            }\n          }\n        }, _callee43, this);\n      }));\n      function updateMessage(_x55, _x56) {\n        return _updateMessage.apply(this, arguments);\n      }\n      return updateMessage;\n    }()\n    /**\n     * partialUpdateMessage - Update the given message id while retaining additional properties\n     *\n     * @param {string} id the message id\n     *\n     * @param {PartialUpdateMessage<MessageType>}  partialMessageObject which should contain id and any of \"set\" or \"unset\" params;\n     *         example: {id: \"user1\", set:{text: \"hi\"}, unset:[\"color\"]}\n     * @param {string | { id: string }} [userId]\n     *\n     * @return {APIResponse & { message: MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType> }} Response that includes the updated message\n     */\n  }, {\n    key: \"partialUpdateMessage\",\n    value: function () {\n      var _partialUpdateMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee44(id, partialMessageObject, userId) {\n        var user;\n        return _regeneratorRuntime.wrap(function _callee44$(_context44) {\n          while (1) {\n            switch (_context44.prev = _context44.next) {\n              case 0:\n                if (id) {\n                  _context44.next = 2;\n                  break;\n                }\n                throw Error('Please specify the message id when calling partialUpdateMessage');\n              case 2:\n                user = userId;\n                if (userId != null && isString(userId)) {\n                  user = {\n                    id: userId\n                  };\n                }\n                _context44.next = 6;\n                return this.put(this.baseURL + \"/messages/\".concat(id), _objectSpread(_objectSpread({}, partialMessageObject), {}, {\n                  user: user\n                }));\n              case 6:\n                return _context44.abrupt(\"return\", _context44.sent);\n              case 7:\n              case \"end\":\n                return _context44.stop();\n            }\n          }\n        }, _callee44, this);\n      }));\n      function partialUpdateMessage(_x57, _x58, _x59) {\n        return _partialUpdateMessage.apply(this, arguments);\n      }\n      return partialUpdateMessage;\n    }()\n  }, {\n    key: \"deleteMessage\",\n    value: function () {\n      var _deleteMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee45(messageID, hardDelete) {\n        var params;\n        return _regeneratorRuntime.wrap(function _callee45$(_context45) {\n          while (1) {\n            switch (_context45.prev = _context45.next) {\n              case 0:\n                params = {};\n                if (hardDelete) {\n                  params = {\n                    hard: true\n                  };\n                }\n                _context45.next = 4;\n                return this.delete(this.baseURL + \"/messages/\".concat(messageID), params);\n              case 4:\n                return _context45.abrupt(\"return\", _context45.sent);\n              case 5:\n              case \"end\":\n                return _context45.stop();\n            }\n          }\n        }, _callee45, this);\n      }));\n      function deleteMessage(_x60, _x61) {\n        return _deleteMessage.apply(this, arguments);\n      }\n      return deleteMessage;\n    }()\n  }, {\n    key: \"getMessage\",\n    value: function () {\n      var _getMessage = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee46(messageID) {\n        return _regeneratorRuntime.wrap(function _callee46$(_context46) {\n          while (1) {\n            switch (_context46.prev = _context46.next) {\n              case 0:\n                _context46.next = 2;\n                return this.get(this.baseURL + \"/messages/\".concat(messageID));\n              case 2:\n                return _context46.abrupt(\"return\", _context46.sent);\n              case 3:\n              case \"end\":\n                return _context46.stop();\n            }\n          }\n        }, _callee46, this);\n      }));\n      function getMessage(_x62) {\n        return _getMessage.apply(this, arguments);\n      }\n      return getMessage;\n    }()\n  }, {\n    key: \"getUserAgent\",\n    value: function getUserAgent() {\n      return this.userAgent || \"stream-chat-javascript-client-\".concat(this.node ? 'node' : 'browser', \"-\", \"4.1.0\");\n    }\n  }, {\n    key: \"setUserAgent\",\n    value: function setUserAgent(userAgent) {\n      this.userAgent = userAgent;\n    }\n    /**\n     * _isUsingServerAuth - Returns true if we're using server side auth\n     */\n  }, {\n    key: \"_enrichAxiosOptions\",\n    value: function _enrichAxiosOptions() {\n      var _this$wsConnection4;\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        params: {},\n        headers: {},\n        config: {}\n      };\n      var token = this._getToken();\n      return _objectSpread({\n        params: _objectSpread(_objectSpread({\n          user_id: this.userID\n        }, options.params), {}, {\n          api_key: this.key,\n          connection_id: (_this$wsConnection4 = this.wsConnection) === null || _this$wsConnection4 === void 0 ? void 0 : _this$wsConnection4.connectionID\n        }),\n        headers: _objectSpread({\n          Authorization: token,\n          'stream-auth-type': this.getAuthType(),\n          'X-Stream-Client': this.getUserAgent()\n        }, options.headers)\n      }, options.config);\n    }\n  }, {\n    key: \"_getToken\",\n    value: function _getToken() {\n      if (!this.tokenManager || this.anonymous) return null;\n      return this.tokenManager.getToken();\n    }\n  }, {\n    key: \"_startCleaning\",\n    value: function _startCleaning() {\n      var that = this;\n      if (this.cleaningIntervalRef != null) {\n        return;\n      }\n      this.cleaningIntervalRef = setInterval(function () {\n        // call clean on the channel, used for calling the stop.typing event etc.\n        for (var _i3 = 0, _Object$values2 = Object.values(that.activeChannels); _i3 < _Object$values2.length; _i3++) {\n          var _channel7 = _Object$values2[_i3];\n          _channel7.clean();\n        }\n      }, 500);\n    }\n  }, {\n    key: \"verifyWebhook\",\n    value: function verifyWebhook(requestBody, xSignature) {\n      return !!this.secret && CheckSignature(requestBody, this.secret, xSignature);\n    }\n    /** getPermission - gets the definition for a permission\n     *\n     * @param {string} name\n     * @returns {Promise<PermissionAPIResponse>}\n     */\n  }, {\n    key: \"getPermission\",\n    value: function getPermission(name) {\n      return this.get(\"\".concat(this.baseURL, \"/permissions/\").concat(name));\n    }\n    /** createPermission - creates a custom permission\n     *\n     * @param {CustomPermissionOptions} permissionData the permission data\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"createPermission\",\n    value: function createPermission(permissionData) {\n      return this.post(\"\".concat(this.baseURL, \"/permissions\"), _objectSpread({}, permissionData));\n    }\n    /** updatePermission - updates an existing custom permission\n     *\n     * @param {string} id\n     * @param {Omit<CustomPermissionOptions, 'id'>} permissionData the permission data\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"updatePermission\",\n    value: function updatePermission(id, permissionData) {\n      return this.put(\"\".concat(this.baseURL, \"/permissions/\").concat(id), _objectSpread({}, permissionData));\n    }\n    /** deletePermission - deletes a custom permission\n     *\n     * @param {string} name\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"deletePermission\",\n    value: function deletePermission(name) {\n      return this.delete(\"\".concat(this.baseURL, \"/permissions/\").concat(name));\n    }\n    /** listPermissions - returns the list of all permissions for this application\n     *\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"listPermissions\",\n    value: function listPermissions() {\n      return this.get(\"\".concat(this.baseURL, \"/permissions\"));\n    }\n    /** createRole - creates a custom role\n     *\n     * @param {string} name the new role name\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"createRole\",\n    value: function createRole(name) {\n      return this.post(\"\".concat(this.baseURL, \"/roles\"), {\n        name: name\n      });\n    }\n    /** listRoles - returns the list of all roles for this application\n     *\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"listRoles\",\n    value: function listRoles() {\n      return this.get(\"\".concat(this.baseURL, \"/roles\"));\n    }\n    /** deleteRole - deletes a custom role\n     *\n     * @param {string} name the role name\n     * @returns {Promise<APIResponse>}\n     */\n  }, {\n    key: \"deleteRole\",\n    value: function deleteRole(name) {\n      return this.delete(\"\".concat(this.baseURL, \"/roles/\").concat(name));\n    }\n    /** sync - returns all events that happened for a list of channels since last sync\n     * @param {string[]} channel_cids list of channel CIDs\n     * @param {string} last_sync_at last time the user was online and in sync. RFC3339 ie. \"2020-05-06T15:05:01.207Z\"\n     */\n  }, {\n    key: \"sync\",\n    value: function sync(channel_cids, last_sync_at) {\n      return this.post(\"\".concat(this.baseURL, \"/sync\"), {\n        channel_cids: channel_cids,\n        last_sync_at: last_sync_at\n      });\n    }\n    /**\n     * sendUserCustomEvent - Send a custom event to a user\n     *\n     * @param {string} targetUserID target user id\n     * @param {UserCustomEvent} event for example {type: 'friendship-request'}\n     *\n     * @return {Promise<APIResponse>} The Server Response\n     */\n  }, {\n    key: \"sendUserCustomEvent\",\n    value: function () {\n      var _sendUserCustomEvent = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee47(targetUserID, event) {\n        return _regeneratorRuntime.wrap(function _callee47$(_context47) {\n          while (1) {\n            switch (_context47.prev = _context47.next) {\n              case 0:\n                _context47.next = 2;\n                return this.post(\"\".concat(this.baseURL, \"/users/\").concat(targetUserID, \"/event\"), {\n                  event: event\n                });\n              case 2:\n                return _context47.abrupt(\"return\", _context47.sent);\n              case 3:\n              case \"end\":\n                return _context47.stop();\n            }\n          }\n        }, _callee47, this);\n      }));\n      function sendUserCustomEvent(_x63, _x64) {\n        return _sendUserCustomEvent.apply(this, arguments);\n      }\n      return sendUserCustomEvent;\n    }()\n  }, {\n    key: \"createBlockList\",\n    value: function createBlockList(blockList) {\n      return this.post(\"\".concat(this.baseURL, \"/blocklists\"), blockList);\n    }\n  }, {\n    key: \"listBlockLists\",\n    value: function listBlockLists() {\n      return this.get(\"\".concat(this.baseURL, \"/blocklists\"));\n    }\n  }, {\n    key: \"getBlockList\",\n    value: function getBlockList(name) {\n      return this.get(\"\".concat(this.baseURL, \"/blocklists/\").concat(name));\n    }\n  }, {\n    key: \"updateBlockList\",\n    value: function updateBlockList(name, data) {\n      return this.put(\"\".concat(this.baseURL, \"/blocklists/\").concat(name), data);\n    }\n  }, {\n    key: \"deleteBlockList\",\n    value: function deleteBlockList(name) {\n      return this.delete(\"\".concat(this.baseURL, \"/blocklists/\").concat(name));\n    }\n  }, {\n    key: \"exportChannels\",\n    value: function exportChannels(request) {\n      var payload = {\n        channels: request\n      };\n      return this.post(\"\".concat(this.baseURL, \"/export_channels\"), payload);\n    }\n  }, {\n    key: \"exportChannel\",\n    value: function exportChannel(request) {\n      return this.exportChannels([request]);\n    }\n  }, {\n    key: \"getExportChannelStatus\",\n    value: function getExportChannelStatus(id) {\n      return this.get(\"\".concat(this.baseURL, \"/export_channels/\").concat(id));\n    }\n    /**\n     * createSegment - Creates a Campaign Segment\n     *\n     * @param {SegmentData} params Segment data\n     *\n     * @return {Segment} The Created Segment\n     */\n  }, {\n    key: \"createSegment\",\n    value: function () {\n      var _createSegment = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee48(params) {\n        var _yield$this$post, segment;\n        return _regeneratorRuntime.wrap(function _callee48$(_context48) {\n          while (1) {\n            switch (_context48.prev = _context48.next) {\n              case 0:\n                _context48.next = 2;\n                return this.post(this.baseURL + \"/segments\", {\n                  segment: params\n                });\n              case 2:\n                _yield$this$post = _context48.sent;\n                segment = _yield$this$post.segment;\n                return _context48.abrupt(\"return\", segment);\n              case 5:\n              case \"end\":\n                return _context48.stop();\n            }\n          }\n        }, _callee48, this);\n      }));\n      function createSegment(_x65) {\n        return _createSegment.apply(this, arguments);\n      }\n      return createSegment;\n    }()\n    /**\n     * getSegment - Get a Campaign Segment\n     *\n     * @param {string} id Segment ID\n     *\n     * @return {Segment} A Segment\n     */\n  }, {\n    key: \"getSegment\",\n    value: function () {\n      var _getSegment = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee49(id) {\n        var _yield$this$get, segment;\n        return _regeneratorRuntime.wrap(function _callee49$(_context49) {\n          while (1) {\n            switch (_context49.prev = _context49.next) {\n              case 0:\n                _context49.next = 2;\n                return this.get(this.baseURL + \"/segments/\".concat(id));\n              case 2:\n                _yield$this$get = _context49.sent;\n                segment = _yield$this$get.segment;\n                return _context49.abrupt(\"return\", segment);\n              case 5:\n              case \"end\":\n                return _context49.stop();\n            }\n          }\n        }, _callee49, this);\n      }));\n      function getSegment(_x66) {\n        return _getSegment.apply(this, arguments);\n      }\n      return getSegment;\n    }()\n    /**\n     * listSegments - List Campaign Segments\n     *\n     *\n     * @return {Segment[]} Segments\n     */\n  }, {\n    key: \"listSegments\",\n    value: function () {\n      var _listSegments = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee50(options) {\n        var _yield$this$get2, segments;\n        return _regeneratorRuntime.wrap(function _callee50$(_context50) {\n          while (1) {\n            switch (_context50.prev = _context50.next) {\n              case 0:\n                _context50.next = 2;\n                return this.get(this.baseURL + \"/segments\", options);\n              case 2:\n                _yield$this$get2 = _context50.sent;\n                segments = _yield$this$get2.segments;\n                return _context50.abrupt(\"return\", segments);\n              case 5:\n              case \"end\":\n                return _context50.stop();\n            }\n          }\n        }, _callee50, this);\n      }));\n      function listSegments(_x67) {\n        return _listSegments.apply(this, arguments);\n      }\n      return listSegments;\n    }()\n    /**\n     * updateSegment - Update a Campaign Segment\n     *\n     * @param {string} id Segment ID\n     * @param {Partial<SegmentData>} params Segment data\n     *\n     * @return {Segment} Updated Segment\n     */\n  }, {\n    key: \"updateSegment\",\n    value: function () {\n      var _updateSegment = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee51(id, params) {\n        var _yield$this$put, segment;\n        return _regeneratorRuntime.wrap(function _callee51$(_context51) {\n          while (1) {\n            switch (_context51.prev = _context51.next) {\n              case 0:\n                _context51.next = 2;\n                return this.put(this.baseURL + \"/segments/\".concat(id), {\n                  segment: params\n                });\n              case 2:\n                _yield$this$put = _context51.sent;\n                segment = _yield$this$put.segment;\n                return _context51.abrupt(\"return\", segment);\n              case 5:\n              case \"end\":\n                return _context51.stop();\n            }\n          }\n        }, _callee51, this);\n      }));\n      function updateSegment(_x68, _x69) {\n        return _updateSegment.apply(this, arguments);\n      }\n      return updateSegment;\n    }()\n    /**\n     * deleteSegment - Delete a Campaign Segment\n     *\n     * @param {string} id Segment ID\n     *\n     * @return {Promise<APIResponse>} The Server Response\n     */\n  }, {\n    key: \"deleteSegment\",\n    value: function () {\n      var _deleteSegment = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee52(id) {\n        return _regeneratorRuntime.wrap(function _callee52$(_context52) {\n          while (1) {\n            switch (_context52.prev = _context52.next) {\n              case 0:\n                return _context52.abrupt(\"return\", this.delete(this.baseURL + \"/segments/\".concat(id)));\n              case 1:\n              case \"end\":\n                return _context52.stop();\n            }\n          }\n        }, _callee52, this);\n      }));\n      function deleteSegment(_x70) {\n        return _deleteSegment.apply(this, arguments);\n      }\n      return deleteSegment;\n    }()\n    /**\n     * createCampaign - Creates a Campaign\n     *\n     * @param {CampaignData} params Campaign data\n     *\n     * @return {Campaign} The Created Campaign\n     */\n  }, {\n    key: \"createCampaign\",\n    value: function () {\n      var _createCampaign = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee53(params) {\n        var _yield$this$post2, campaign;\n        return _regeneratorRuntime.wrap(function _callee53$(_context53) {\n          while (1) {\n            switch (_context53.prev = _context53.next) {\n              case 0:\n                _context53.next = 2;\n                return this.post(this.baseURL + \"/campaigns\", {\n                  campaign: params\n                });\n              case 2:\n                _yield$this$post2 = _context53.sent;\n                campaign = _yield$this$post2.campaign;\n                return _context53.abrupt(\"return\", campaign);\n              case 5:\n              case \"end\":\n                return _context53.stop();\n            }\n          }\n        }, _callee53, this);\n      }));\n      function createCampaign(_x71) {\n        return _createCampaign.apply(this, arguments);\n      }\n      return createCampaign;\n    }()\n    /**\n     * getCampaign - Get a Campaign\n     *\n     * @param {string} id Campaign ID\n     *\n     * @return {Campaign} A Campaign\n     */\n  }, {\n    key: \"getCampaign\",\n    value: function () {\n      var _getCampaign = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee54(id) {\n        var _yield$this$get3, campaign;\n        return _regeneratorRuntime.wrap(function _callee54$(_context54) {\n          while (1) {\n            switch (_context54.prev = _context54.next) {\n              case 0:\n                _context54.next = 2;\n                return this.get(this.baseURL + \"/campaigns/\".concat(id));\n              case 2:\n                _yield$this$get3 = _context54.sent;\n                campaign = _yield$this$get3.campaign;\n                return _context54.abrupt(\"return\", campaign);\n              case 5:\n              case \"end\":\n                return _context54.stop();\n            }\n          }\n        }, _callee54, this);\n      }));\n      function getCampaign(_x72) {\n        return _getCampaign.apply(this, arguments);\n      }\n      return getCampaign;\n    }()\n    /**\n     * listCampaigns - List Campaigns\n     *\n     *\n     * @return {Campaign[]} Campaigns\n     */\n  }, {\n    key: \"listCampaigns\",\n    value: function () {\n      var _listCampaigns = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee55(options) {\n        var _yield$this$get4, campaigns;\n        return _regeneratorRuntime.wrap(function _callee55$(_context55) {\n          while (1) {\n            switch (_context55.prev = _context55.next) {\n              case 0:\n                _context55.next = 2;\n                return this.get(this.baseURL + \"/campaigns\", options);\n              case 2:\n                _yield$this$get4 = _context55.sent;\n                campaigns = _yield$this$get4.campaigns;\n                return _context55.abrupt(\"return\", campaigns);\n              case 5:\n              case \"end\":\n                return _context55.stop();\n            }\n          }\n        }, _callee55, this);\n      }));\n      function listCampaigns(_x73) {\n        return _listCampaigns.apply(this, arguments);\n      }\n      return listCampaigns;\n    }()\n    /**\n     * updateCampaign - Update a Campaign\n     *\n     * @param {string} id Campaign ID\n     * @param {Partial<CampaignData>} params Campaign data\n     *\n     * @return {Campaign} Updated Campaign\n     */\n  }, {\n    key: \"updateCampaign\",\n    value: function () {\n      var _updateCampaign = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee56(id, params) {\n        var _yield$this$put2, campaign;\n        return _regeneratorRuntime.wrap(function _callee56$(_context56) {\n          while (1) {\n            switch (_context56.prev = _context56.next) {\n              case 0:\n                _context56.next = 2;\n                return this.put(this.baseURL + \"/campaigns/\".concat(id), {\n                  campaign: params\n                });\n              case 2:\n                _yield$this$put2 = _context56.sent;\n                campaign = _yield$this$put2.campaign;\n                return _context56.abrupt(\"return\", campaign);\n              case 5:\n              case \"end\":\n                return _context56.stop();\n            }\n          }\n        }, _callee56, this);\n      }));\n      function updateCampaign(_x74, _x75) {\n        return _updateCampaign.apply(this, arguments);\n      }\n      return updateCampaign;\n    }()\n    /**\n     * deleteCampaign - Delete a Campaign\n     *\n     * @param {string} id Campaign ID\n     *\n     * @return {Promise<APIResponse>} The Server Response\n     */\n  }, {\n    key: \"deleteCampaign\",\n    value: function () {\n      var _deleteCampaign = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee57(id) {\n        return _regeneratorRuntime.wrap(function _callee57$(_context57) {\n          while (1) {\n            switch (_context57.prev = _context57.next) {\n              case 0:\n                return _context57.abrupt(\"return\", this.delete(this.baseURL + \"/campaigns/\".concat(id)));\n              case 1:\n              case \"end\":\n                return _context57.stop();\n            }\n          }\n        }, _callee57, this);\n      }));\n      function deleteCampaign(_x76) {\n        return _deleteCampaign.apply(this, arguments);\n      }\n      return deleteCampaign;\n    }()\n    /**\n     * scheduleCampaign - Schedule a Campaign\n     *\n     * @param {string} id Campaign ID\n     * @param {{sendAt: number}} params Schedule params\n     *\n     * @return {Campaign} Scheduled Campaign\n     */\n  }, {\n    key: \"scheduleCampaign\",\n    value: function () {\n      var _scheduleCampaign = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee58(id, params) {\n        var sendAt, _yield$this$patch, campaign;\n        return _regeneratorRuntime.wrap(function _callee58$(_context58) {\n          while (1) {\n            switch (_context58.prev = _context58.next) {\n              case 0:\n                sendAt = params.sendAt;\n                _context58.next = 3;\n                return this.patch(this.baseURL + \"/campaigns/\".concat(id, \"/schedule\"), {\n                  send_at: sendAt\n                });\n              case 3:\n                _yield$this$patch = _context58.sent;\n                campaign = _yield$this$patch.campaign;\n                return _context58.abrupt(\"return\", campaign);\n              case 6:\n              case \"end\":\n                return _context58.stop();\n            }\n          }\n        }, _callee58, this);\n      }));\n      function scheduleCampaign(_x77, _x78) {\n        return _scheduleCampaign.apply(this, arguments);\n      }\n      return scheduleCampaign;\n    }()\n    /**\n     * stopCampaign - Stop a Campaign\n     *\n     * @param {string} id Campaign ID\n     *\n     * @return {Campaign} Stopped Campaign\n     */\n  }, {\n    key: \"stopCampaign\",\n    value: function () {\n      var _stopCampaign = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee59(id) {\n        var _yield$this$patch2, campaign;\n        return _regeneratorRuntime.wrap(function _callee59$(_context59) {\n          while (1) {\n            switch (_context59.prev = _context59.next) {\n              case 0:\n                _context59.next = 2;\n                return this.patch(this.baseURL + \"/campaigns/\".concat(id, \"/stop\"));\n              case 2:\n                _yield$this$patch2 = _context59.sent;\n                campaign = _yield$this$patch2.campaign;\n                return _context59.abrupt(\"return\", campaign);\n              case 5:\n              case \"end\":\n                return _context59.stop();\n            }\n          }\n        }, _callee59, this);\n      }));\n      function stopCampaign(_x79) {\n        return _stopCampaign.apply(this, arguments);\n      }\n      return stopCampaign;\n    }()\n    /**\n     * resumeCampaign - Resume a Campaign\n     *\n     * @param {string} id Campaign ID\n     *\n     * @return {Campaign} Resumed Campaign\n     */\n  }, {\n    key: \"resumeCampaign\",\n    value: function () {\n      var _resumeCampaign = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee60(id) {\n        var _yield$this$patch3, campaign;\n        return _regeneratorRuntime.wrap(function _callee60$(_context60) {\n          while (1) {\n            switch (_context60.prev = _context60.next) {\n              case 0:\n                _context60.next = 2;\n                return this.patch(this.baseURL + \"/campaigns/\".concat(id, \"/resume\"));\n              case 2:\n                _yield$this$patch3 = _context60.sent;\n                campaign = _yield$this$patch3.campaign;\n                return _context60.abrupt(\"return\", campaign);\n              case 5:\n              case \"end\":\n                return _context60.stop();\n            }\n          }\n        }, _callee60, this);\n      }));\n      function resumeCampaign(_x80) {\n        return _resumeCampaign.apply(this, arguments);\n      }\n      return resumeCampaign;\n    }()\n    /**\n     * testCampaign - Test a Campaign\n     *\n     * @param {string} id Campaign ID\n     * @param {{users: string[]}} params Test params\n     * @return {Campaign} Test Campaign\n     */\n  }, {\n    key: \"testCampaign\",\n    value: function () {\n      var _testCampaign = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee61(id, params) {\n        var users, _yield$this$post3, campaign;\n        return _regeneratorRuntime.wrap(function _callee61$(_context61) {\n          while (1) {\n            switch (_context61.prev = _context61.next) {\n              case 0:\n                users = params.users;\n                _context61.next = 3;\n                return this.post(this.baseURL + \"/campaigns/\".concat(id, \"/test\"), {\n                  users: users\n                });\n              case 3:\n                _yield$this$post3 = _context61.sent;\n                campaign = _yield$this$post3.campaign;\n                return _context61.abrupt(\"return\", campaign);\n              case 6:\n              case \"end\":\n                return _context61.stop();\n            }\n          }\n        }, _callee61, this);\n      }));\n      function testCampaign(_x81, _x82) {\n        return _testCampaign.apply(this, arguments);\n      }\n      return testCampaign;\n    }()\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance(key, secretOrOptions, options) {\n      if (!StreamChat._instance) {\n        if (typeof secretOrOptions === 'string') {\n          StreamChat._instance = new StreamChat(key, secretOrOptions, options);\n        } else {\n          StreamChat._instance = new StreamChat(key, secretOrOptions);\n        }\n      }\n      return StreamChat._instance;\n    }\n  }]);\n  return StreamChat;\n}();\n_defineProperty(StreamChat, \"_instance\", void 0);\nvar Allow = 'Allow';\nvar Deny = 'Deny';\nvar AnyResource = ['*'];\nvar AnyRole = ['*'];\nvar MaxPriority = 999;\nvar MinPriority = 1; // deprecated permission object class, you should use the new permission system v2 and use permissions\n// defined in BuiltinPermissions to configure your channel types\n\nvar Permission = function Permission(name, priority) {\n  var resources = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : AnyResource;\n  var roles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : AnyRole;\n  var owner = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var action = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Allow;\n  _classCallCheck(this, Permission);\n  _defineProperty(this, \"name\", void 0);\n  _defineProperty(this, \"action\", void 0);\n  _defineProperty(this, \"owner\", void 0);\n  _defineProperty(this, \"priority\", void 0);\n  _defineProperty(this, \"resources\", void 0);\n  _defineProperty(this, \"roles\", void 0);\n  this.name = name;\n  this.action = action;\n  this.owner = owner;\n  this.priority = priority;\n  this.resources = resources;\n  this.roles = roles;\n}; // deprecated\n\nvar AllowAll = new Permission('Allow all', MaxPriority, AnyResource, AnyRole, false, Allow); // deprecated\n\nvar DenyAll = new Permission('Deny all', MinPriority, AnyResource, AnyRole, false, Deny);\nvar BuiltinRoles = {\n  Admin: 'admin',\n  Anonymous: 'anonymous',\n  ChannelMember: 'channel_member',\n  ChannelModerator: 'channel_moderator',\n  Guest: 'guest',\n  User: 'user'\n};\nvar BuiltinPermissions = {\n  AddLinks: 'Add Links',\n  BanUser: 'Ban User',\n  CreateChannel: 'Create Channel',\n  CreateMessage: 'Create Message',\n  CreateReaction: 'Create Reaction',\n  DeleteAnyAttachment: 'Delete Any Attachment',\n  DeleteAnyChannel: 'Delete Any Channel',\n  DeleteAnyMessage: 'Delete Any Message',\n  DeleteAnyReaction: 'Delete Any Reaction',\n  DeleteOwnAttachment: 'Delete Own Attachment',\n  DeleteOwnChannel: 'Delete Own Channel',\n  DeleteOwnMessage: 'Delete Own Message',\n  DeleteOwnReaction: 'Delete Own Reaction',\n  ReadAnyChannel: 'Read Any Channel',\n  ReadOwnChannel: 'Read Own Channel',\n  RunMessageAction: 'Run Message Action',\n  UpdateAnyChannel: 'Update Any Channel',\n  UpdateAnyMessage: 'Update Any Message',\n  UpdateMembersAnyChannel: 'Update Members Any Channel',\n  UpdateMembersOwnChannel: 'Update Members Own Channel',\n  UpdateOwnChannel: 'Update Own Channel',\n  UpdateOwnMessage: 'Update Own Message',\n  UploadAttachment: 'Upload Attachment',\n  UseFrozenChannel: 'Send messages and reactions to frozen channels'\n};\nexport { Allow, AllowAll, AnyResource, AnyRole, BuiltinPermissions, BuiltinRoles, Channel, ChannelState, CheckSignature, ClientState, Deny, DenyAll, DevToken, EVENT_MAP, JWTServerToken, JWTUserToken, MaxPriority, MinPriority, Permission, StableWSConnection, StreamChat, TokenManager, UserFromToken, chatCodes, decodeBase64, encodeBase64, isOwnUser, isValidEventType, logChatPromiseExecution };","map":{"version":3,"sources":["../src/base64.ts","../https","../src/channel_state.ts","../src/events.ts","../src/utils.ts","../src/channel.ts","../src/client_state.ts","../src/connection.ts","../jsonwebtoken","../crypto","../src/signing.ts","../src/token_manager.ts","../src/client.ts","../src/permissions.ts"],"names":["isString","arrayOrString","isMapStringCallback","callback","map","res","k","len","length","charAt","kValue","mappedValue","encodeBase64","data","fromByteArray","Uint8Array","char","charCodeAt","decodeBase64","s","e","w","String","fromCharCode","L","i","b","c","x","l","a","r","A","ChannelState","channel","_channel","watcher_count","typing","read","messages","pinnedMessages","threads","mutedUsers","watchers","members","membership","unreadCount","isUpToDate","last_message_at","state","Date","newMessage","timestampChanged","addIfDoesNotExist","addMessagesSorted","message","__html","html","pinned_at","created_at","updated_at","status","newMessages","initializing","formatMessage","user","cid","getClient","updateUserReference","id","getTime","parentID","parent_id","show_in_channel","_addToMessageList","thread","threadMessages","addPinnedMessage","pinnedMessage","result","removeMessageFromArray","reaction","enforce_unique","messageWithReaction","_updateMessage","msg","own_reactions","_addOwnReactionToMessage","ownReactions","_removeOwnReactionFromMessage","userID","user_id","push","filter","item","type","parseMessage","m","toString","updatedMessages","quoted_message_id","quoted_message","attachments","updateFunc","pinned","msgIndex","findIndex","sortBy","addMessageToList","messageArr","messageArrayLength","concat","messageTime","messageIsNewest","left","middle","right","Math","floor","splice","messageToRemove","isRemoved","removed","msgArray","_updateUserMessages","parentId","hardDelete","_deleteUserMessages","deleted_at","latest_reactions","mentioned_users","reply_count","thread_participants","filteredMessages","now","lastEvent","Object","entries","receivedAt","received_at","dispatchEvent","EVENT_MAP","IS_VALID_EVENT_MAP_TYPE","all","isValidEventType","eventType","logChatPromiseExecution","promise","name","then","catch","error","console","warn","sleep","Promise","setTimeout","isFunction","value","prototype","call","Function","chatCodes","TOKEN_EXPIRED","WS_CLOSED_SUCCESS","isReadableStream","obj","readable","_read","isBuffer","constructor","isFileWebAPI","uri","window","File","isOwnUser","total_unread_count","undefined","isOwnUserBaseProperty","property","ownUserBaseProperties","channel_mutes","devices","mutes","unread_channels","unread_count","invisible","roles","addFileToFormData","contentType","FormData","append","split","reverse","normalizeQuerySort","sort","sortFields","sortArr","Array","isArray","field","direction","retryInterval","numberOfFailures","max","min","random","alphabet","randomId","Channel","client","validTypeRe","validIDRe","test","Error","_client","_data","listeners","initialized","lastTypingEvent","isTyping","disconnected","configs","options","sendMessageResponse","post","_channelURL","sendFile","url","delete","event","_checkInitialized","query","offset","next","payload","filter_conditions","message_filter_conditions","wsPromise","get","baseURL","filterConditions","messageID","keys","reactionType","channelData","updateMessage","reserved","forEach","key","_update","update","patch","coolDownInterval","cooldown","accept_invite","reject_invite","add_members","add_moderators","assign_roles","invites","remove_members","demote_moderators","opts","channel_cid","_muteStatus","formData","message_id","form_data","getConfig","typing_events","diff","lastKeyStroke","sendEvent","messageSlice","slice","read_events","resolve","stopTyping","clean","defaultOptions","watch","presence","_hasConnectionID","combined","logger","tags","response","messageIds","ids","join","last_read","shadowed","silent","userMuteStatus","muteStatus","muted","lastRead","count","_countMessageAsUnread","some","queryURL","membersStr","member","tempChannelCid","activeChannels","_addChannelConfig","_initializeState","targetUserID","banUser","userId","clearHistory","clear_history","unbanUser","shadowBan","removeShadowBan","callbackOrString","callbackOrNothing","valid","unsubscribe","el","channelState","hard_delete","removeMessage","addMessageSorted","removeQuotedMessageReferences","removePinnedMessage","ownMessage","isThreadMessage","clearMessages","addReaction","removeReaction","listener","_isUsingServerAuth","clientState","addPinnedMessages","pinned_messages","watcher","parsedRead","unread_messages","setIsUpToDate","ClientState","users","userChannelReferences","updateUser","channelID","isCloseEvent","code","isErrorEvent","StableWSConnection","apiKey","authType","clientID","eventCallback","messageCallback","recoverCallback","tokenManager","userAgent","wsBaseURL","device","consecutiveFailures","totalFailures","isConnecting","isHealthy","wsID","pingInterval","connectionCheckTimeout","_listenForConnectionChanges","healthCheck","_connect","isStatic","_reconnect","refreshToken","isWSFailure","stringify","StatusCode","_waitForHealthy","timeout","race","interval","connectionOpen","params","user_details","user_token","getToken","server_determines_connection_id","qs","encodeURIComponent","JSON","token","healthCheckTimeoutRef","clearInterval","connectionCheckTimeoutRef","_removeConnectionListeners","ws","removeAllListeners","isClosedPromise","close","readyState","OPEN","onclose","tokenReady","_setupConnectionPromise","wsURL","_buildUrl","WebSocket","onopen","bind","onerror","onmessage","connectionID","connection_id","_destroyCurrentWSConnection","loadToken","open","_setHealth","parse","isResolved","rejectPromise","_errorFromWSEvent","resolvePromise","scheduleNextPing","scheduleConnectionCheck","reason","healthy","online","statusCode","addEventListener","onlineStatusChanged","removeEventListener","that","reject","clearTimeout","client_id","send","JWTUserToken","apiSecret","extraData","jwtOptions","TypeError","algorithm","noTimestamp","JWTServerToken","server","jwt","sign","UserFromToken","fragments","b64Payload","DevToken","CheckSignature","body","secret","signature","Buffer","from","hash","crypto","createHmac","digest","TokenManager","loadTokenPromise","tokenOrProvider","validateToken","tokenProvider","anon","tokenUserId","StreamChat","secretOrOptions","mutedChannels","inputOptions","browser","node","withCredentials","warmUp","recoverStateOnReconnect","httpsAgent","https","Agent","keepAlive","keepAliveMsecs","axiosInstance","axios","create","setBaseURL","process","env","STREAM_LOCAL_TEST_RUN","STREAM_LOCAL_TEST_HOST","wsConnection","setUserPromise","anonymous","_instance","replace","Boolean","userTokenOrProvider","allowServerSideConnect","setTokenPromise","_setToken","_setUser","openConnection","disconnectUser","connectUser","setTokenOrProvider","_user","cleaningIntervalRef","disconnect","connect","_startCleaning","apn_config","p12_cert","before","toISOString","updateAppSettings","revoke_tokens_issued_before","_normalizeDate","revokeUsersToken","userIDs","set","partialUpdateUsers","apnTemplate","apn_template","firebaseTemplate","firebase_template","firebaseDataTemplate","firebase_data_template","skipDevices","skip_devices","closePromise","closeConnection","values","_disconnect","reset","anonymousUser","_setupConnection","connectAnonymousUser","last_active","guestUser","access_token","exp","iat","extra","config","requestConfig","_enrichAxiosOptions","_logApiRequest","put","_logApiResponse","handleResponse","_logApiError","doAxiosRequest","headers","getHeaders","maxContentLength","Infinity","maxBodyLength","err","errorFromResponse","postListenerCallbacks","_handleClientEvent","_handleChannelEvent","_callClientListeners","_callChannelListeners","messageEvent","jsonString","refMap","_updateMemberWatcherReferences","updateUserMessages","deleteUserMessages","_updateUserMessageReferences","mark_messages_deleted","_deleteUserMessageReference","_handleUserEvent","me","currentMutedChannelIds","nextMutedChannelIds","mute","includes","deleteAllChannelReference","expires","createdAt","expiresAt","cids","queryChannels","$in","limit","connecting","failures","getAuthType","getUserAgent","recoverState","handleEvent","warmUpPromise","handshake","updateUsers","stateOptions","skipInitialization","channels","push_provider","serverSide","web","android","ios","endpoints","server_side","channelType","channelIDOrCustom","custom","indexOf","getChannelByMembers","getChannelById","tempCid","membersStrInExistingChannel","partialUserObject","userMap","userObject","upsertUsers","upsertUser","banned_by_id","banned_by","target_user_id","shadow","targetID","target_id","currentUserID","target","targetMessageID","target_message_id","commands","messageId","language","timeoutOrExpirationDate","pinExpires","setSeconds","getSeconds","messageOrMessageId","errorText","_validateAndGetMessageId","partialUpdateMessage","pin_expires","_normalizeExpiration","clonedMessage","reservedMessageFields","mu","partialMessageObject","hard","_getToken","api_key","Authorization","setInterval","requestBody","xSignature","permissionData","channel_cids","last_sync_at","blockList","request","exportChannels","segment","segments","campaign","campaigns","sendAt","send_at","Allow","Deny","AnyResource","AnyRole","MaxPriority","MinPriority","Permission","priority","resources","owner","action","AllowAll","DenyAll","BuiltinRoles","Admin","Anonymous","ChannelMember","ChannelModerator","Guest","User","BuiltinPermissions","AddLinks","BanUser","CreateChannel","CreateMessage","CreateReaction","DeleteAnyAttachment","DeleteAnyChannel","DeleteAnyMessage","DeleteAnyReaction","DeleteOwnAttachment","DeleteOwnChannel","DeleteOwnMessage","DeleteOwnReaction","ReadAnyChannel","ReadOwnChannel","RunMessageAction","UpdateAnyChannel","UpdateAnyMessage","UpdateMembersAnyChannel","UpdateMembersOwnChannel","UpdateOwnChannel","UpdateOwnMessage","UploadAttachment","UseFrozenChannel"],"mappings":"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","sourcesContent":["import { fromByteArray } from 'base64-js';\n\nfunction isString<T>(arrayOrString: string | T[]): arrayOrString is string {\n  return typeof (arrayOrString as string) === 'string';\n}\n\ntype MapGenericCallback<T, U> = (value: T, index: number, array: T[]) => U;\ntype MapStringCallback<U> = (value: string, index: number, string: string) => U;\n\nfunction isMapStringCallback<T, U>(\n  arrayOrString: string | T[],\n  callback: MapGenericCallback<T, U> | MapStringCallback<U>,\n): callback is MapStringCallback<U> {\n  return !!callback && isString(arrayOrString);\n}\n\n// source - https://github.com/beatgammit/base64-js/blob/master/test/convert.js#L72\nfunction map<T, U>(array: T[], callback: MapGenericCallback<T, U>): U[];\nfunction map<U>(string: string, callback: MapStringCallback<U>): U[];\nfunction map<T, U>(\n  arrayOrString: string | T[],\n  callback: MapGenericCallback<T, U> | MapStringCallback<U>,\n): U[] {\n  const res = [];\n\n  if (isString(arrayOrString) && isMapStringCallback(arrayOrString, callback)) {\n    for (let k = 0, len = arrayOrString.length; k < len; k++) {\n      if (arrayOrString.charAt(k)) {\n        const kValue = arrayOrString.charAt(k);\n        const mappedValue = callback(kValue, k, arrayOrString);\n        res[k] = mappedValue;\n      }\n    }\n  } else if (!isString(arrayOrString) && !isMapStringCallback(arrayOrString, callback)) {\n    for (let k = 0, len = arrayOrString.length; k < len; k++) {\n      if (k in arrayOrString) {\n        const kValue = arrayOrString[k];\n        const mappedValue = callback(kValue, k, arrayOrString);\n        res[k] = mappedValue;\n      }\n    }\n  }\n\n  return res;\n}\n\nexport const encodeBase64 = (data: string): string =>\n  fromByteArray(new Uint8Array(map(data, (char) => char.charCodeAt(0))));\n\n// base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\nexport const decodeBase64 = (s: string): string => {\n  const e = {} as { [key: string]: number },\n    w = String.fromCharCode,\n    L = s.length;\n  let i,\n    b = 0,\n    c,\n    x,\n    l = 0,\n    a,\n    r = '';\n  const A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  for (i = 0; i < 64; i++) {\n    e[A.charAt(i)] = i;\n  }\n  for (x = 0; x < L; x++) {\n    c = e[s.charAt(x)];\n    b = (b << 6) + c;\n    l += 6;\n    while (l >= 8) {\n      ((a = (b >>> (l -= 8)) & 0xff) || x < L - 2) && (r += w(a));\n    }\n  }\n  return r;\n};\n","export default null;","import { Channel } from './channel';\nimport {\n  ChannelMemberResponse,\n  ChannelMembership,\n  FormatMessageResponse,\n  Event,\n  LiteralStringForUnion,\n  MessageResponse,\n  ReactionResponse,\n  UnknownType,\n  UserResponse,\n} from './types';\n\n/**\n * ChannelState - A container class for the channel state.\n */\nexport class ChannelState<\n  AttachmentType extends UnknownType = UnknownType,\n  ChannelType extends UnknownType = UnknownType,\n  CommandType extends string = LiteralStringForUnion,\n  EventType extends UnknownType = UnknownType,\n  MessageType extends UnknownType = UnknownType,\n  ReactionType extends UnknownType = UnknownType,\n  UserType extends UnknownType = UnknownType\n> {\n  _channel: Channel<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  >;\n  watcher_count: number;\n  typing: Record<\n    string,\n    Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >\n  >;\n  read: Record<string, { last_read: Date; user: UserResponse<UserType> }>;\n  messages: Array<\n    ReturnType<\n      ChannelState<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >['formatMessage']\n    >\n  >;\n  pinnedMessages: Array<\n    ReturnType<\n      ChannelState<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >['formatMessage']\n    >\n  >;\n  threads: Record<\n    string,\n    Array<\n      ReturnType<\n        ChannelState<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >['formatMessage']\n      >\n    >\n  >;\n  mutedUsers: Array<UserResponse<UserType>>;\n  watchers: Record<string, UserResponse<UserType>>;\n  members: Record<string, ChannelMemberResponse<UserType>>;\n  unreadCount: number;\n  membership: ChannelMembership<UserType>;\n  last_message_at: Date | null;\n  /**\n   * Flag which indicates if channel state contain latest/recent messages or no.\n   * This flag should be managed by UI sdks using a setter - setIsUpToDate.\n   * When false, any new message (received by websocket event - message.new) will not\n   * be pushed on to message list.\n   */\n  isUpToDate: boolean;\n  constructor(\n    channel: Channel<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    this._channel = channel;\n    this.watcher_count = 0;\n    this.typing = {};\n    this.read = {};\n    this.messages = [];\n    this.pinnedMessages = [];\n    this.threads = {};\n    // a list of users to hide messages from\n    this.mutedUsers = [];\n    this.watchers = {};\n    this.members = {};\n    this.membership = {};\n    this.unreadCount = 0;\n    /**\n     * Flag which indicates if channel state contain latest/recent messages or no.\n     * This flag should be managed by UI sdks using a setter - setIsUpToDate.\n     * When false, any new message (received by websocket event - message.new) will not\n     * be pushed on to message list.\n     */\n    this.isUpToDate = true;\n    this.last_message_at =\n      channel?.state?.last_message_at != null\n        ? new Date(channel.state.last_message_at)\n        : null;\n  }\n\n  /**\n   * addMessageSorted - Add a message to the state\n   *\n   * @param {MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} newMessage A new message\n   * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   *\n   */\n  addMessageSorted(\n    newMessage: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n    timestampChanged = false,\n    addIfDoesNotExist = true,\n  ) {\n    return this.addMessagesSorted(\n      [newMessage],\n      timestampChanged,\n      false,\n      addIfDoesNotExist,\n    );\n  }\n\n  /**\n   * formatMessage - Takes the message object. Parses the dates, sets __html\n   * and sets the status to received if missing. Returns a message object\n   *\n   * @param {MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} message a message object\n   *\n   */\n  formatMessage(\n    message: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): FormatMessageResponse<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    MessageType,\n    ReactionType,\n    UserType\n  > {\n    return {\n      ...message,\n      /**\n       * @deprecated please use `html`\n       */\n      __html: message.html,\n      // parse the date..\n      pinned_at: message.pinned_at ? new Date(message.pinned_at) : null,\n      created_at: message.created_at ? new Date(message.created_at) : new Date(),\n      updated_at: message.updated_at ? new Date(message.updated_at) : new Date(),\n      status: message.status || 'received',\n    };\n  }\n\n  /**\n   * addMessagesSorted - Add the list of messages to state and resorts the messages\n   *\n   * @param {Array<MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} newMessages A list of messages\n   * @param {boolean} timestampChanged Whether updating messages with changed created_at value.\n   * @param {boolean} initializing Whether channel is being initialized.\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   *\n   */\n  addMessagesSorted(\n    newMessages: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >[],\n    timestampChanged = false,\n    initializing = false,\n    addIfDoesNotExist = true,\n  ) {\n    for (let i = 0; i < newMessages.length; i += 1) {\n      const message = this.formatMessage(newMessages[i]);\n\n      if (message.user && this._channel?.cid) {\n        /**\n         * Store the reference to user for this channel, so that when we have to\n         * handle updates to user, we can use the reference map, to determine which\n         * channels need to be updated with updated user object.\n         */\n        this._channel\n          .getClient()\n          .state.updateUserReference(message.user, this._channel.cid);\n      }\n\n      if (initializing && message.id && this.threads[message.id]) {\n        // If we are initializing the state of channel (e.g., in case of connection recovery),\n        // then in that case we remove thread related to this message from threads object.\n        // This way we can ensure that we don't have any stale data in thread object\n        // and consumer can refetch the replies.\n        delete this.threads[message.id];\n      }\n\n      if (!this.last_message_at) {\n        this.last_message_at = new Date(message.created_at.getTime());\n      }\n\n      if (message.created_at.getTime() > this.last_message_at.getTime()) {\n        this.last_message_at = new Date(message.created_at.getTime());\n      }\n\n      // update or append the messages...\n      const parentID = message.parent_id;\n\n      // add to the main message list\n      if (!parentID || message.show_in_channel) {\n        this.messages = this._addToMessageList(\n          this.messages,\n          message,\n          timestampChanged,\n          'created_at',\n          addIfDoesNotExist,\n        );\n      }\n\n      /**\n       * Add message to thread if applicable and the message\n       * was added when querying for replies, or the thread already exits.\n       * This is to prevent the thread state from getting out of sync if\n       * a thread message is shown in channel but older than the newest thread\n       * message. This situation can result in a thread state where a random\n       * message is \"oldest\" message, and newer messages are therefore not loaded.\n       * This can also occur if an old thread message is updated.\n       */\n      if (parentID && !initializing) {\n        const thread = this.threads[parentID] || [];\n        const threadMessages = this._addToMessageList(\n          thread,\n          message,\n          timestampChanged,\n          'created_at',\n          addIfDoesNotExist,\n        );\n        this.threads[parentID] = threadMessages;\n      }\n    }\n  }\n\n  /**\n   * addPinnedMessages - adds messages in pinnedMessages property\n   *\n   * @param {Array<MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} pinnedMessages A list of pinned messages\n   *\n   */\n  addPinnedMessages(\n    pinnedMessages: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >[],\n  ) {\n    for (let i = 0; i < pinnedMessages.length; i += 1) {\n      this.addPinnedMessage(pinnedMessages[i]);\n    }\n  }\n\n  /**\n   * addPinnedMessage - adds message in pinnedMessages\n   *\n   * @param {MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} pinnedMessage message to update\n   *\n   */\n  addPinnedMessage(\n    pinnedMessage: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    this.pinnedMessages = this._addToMessageList(\n      this.pinnedMessages,\n      this.formatMessage(pinnedMessage),\n      false,\n      'pinned_at',\n    );\n  }\n\n  /**\n   * removePinnedMessage - removes pinned message from pinnedMessages\n   *\n   * @param {MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} message message to remove\n   *\n   */\n  removePinnedMessage(\n    message: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    const { result } = this.removeMessageFromArray(this.pinnedMessages, message);\n    this.pinnedMessages = result;\n  }\n\n  addReaction(\n    reaction: ReactionResponse<ReactionType, UserType>,\n    message?: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n    enforce_unique?: boolean,\n  ) {\n    if (!message) return;\n    const messageWithReaction = message;\n    this._updateMessage(message, (msg) => {\n      messageWithReaction.own_reactions = this._addOwnReactionToMessage(\n        msg.own_reactions,\n        reaction,\n        enforce_unique,\n      );\n      return this.formatMessage(messageWithReaction);\n    });\n    return messageWithReaction;\n  }\n\n  _addOwnReactionToMessage(\n    ownReactions: ReactionResponse<ReactionType, UserType>[] | null | undefined,\n    reaction: ReactionResponse<ReactionType, UserType>,\n    enforce_unique?: boolean,\n  ) {\n    if (enforce_unique) {\n      ownReactions = [];\n    } else {\n      ownReactions = this._removeOwnReactionFromMessage(ownReactions, reaction);\n    }\n\n    ownReactions = ownReactions || [];\n    if (this._channel.getClient().userID === reaction.user_id) {\n      ownReactions.push(reaction);\n    }\n\n    return ownReactions;\n  }\n\n  _removeOwnReactionFromMessage(\n    ownReactions: ReactionResponse<ReactionType, UserType>[] | null | undefined,\n    reaction: ReactionResponse<ReactionType, UserType>,\n  ) {\n    if (ownReactions) {\n      return ownReactions.filter(\n        (item) => item.user_id !== reaction.user_id || item.type !== reaction.type,\n      );\n    }\n    return ownReactions;\n  }\n\n  removeReaction(\n    reaction: ReactionResponse<ReactionType, UserType>,\n    message?: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    if (!message) return;\n    const messageWithReaction = message;\n    this._updateMessage(message, (msg) => {\n      messageWithReaction.own_reactions = this._removeOwnReactionFromMessage(\n        msg.own_reactions,\n        reaction,\n      );\n      return this.formatMessage(messageWithReaction);\n    });\n    return messageWithReaction;\n  }\n\n  removeQuotedMessageReferences(\n    message: MessageResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    const parseMessage = (\n      m: ReturnType<\n        ChannelState<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >['formatMessage']\n      >,\n    ) =>\n      (({\n        ...m,\n        created_at: m.created_at.toString(),\n        pinned_at: m.pinned_at?.toString(),\n        updated_at: m.updated_at?.toString(),\n      } as unknown) as MessageResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >);\n\n    const updatedMessages = this.messages\n      .filter((msg) => msg.quoted_message_id === message.id)\n      .map(parseMessage)\n      .map((msg) => ({ ...msg, quoted_message: { ...message, attachments: [] } }));\n\n    this.addMessagesSorted(updatedMessages, true);\n  }\n\n  /**\n   * Updates all instances of given message in channel state\n   * @param message\n   * @param updateFunc\n   */\n  _updateMessage(\n    message: {\n      id?: string;\n      parent_id?: string;\n      pinned?: boolean;\n      show_in_channel?: boolean;\n    },\n    updateFunc: (\n      msg: ReturnType<\n        ChannelState<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >['formatMessage']\n      >,\n    ) => ReturnType<\n      ChannelState<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >['formatMessage']\n    >,\n  ) {\n    const { parent_id, show_in_channel, pinned } = message;\n\n    if (parent_id && this.threads[parent_id]) {\n      const thread = this.threads[parent_id];\n      const msgIndex = thread.findIndex((msg) => msg.id === message.id);\n      if (msgIndex !== -1) {\n        thread[msgIndex] = updateFunc(thread[msgIndex]);\n        this.threads[parent_id] = thread;\n      }\n    }\n\n    if ((!show_in_channel && !parent_id) || show_in_channel) {\n      const msgIndex = this.messages.findIndex((msg) => msg.id === message.id);\n      if (msgIndex !== -1) {\n        this.messages[msgIndex] = updateFunc(this.messages[msgIndex]);\n      }\n    }\n\n    if (pinned) {\n      const msgIndex = this.pinnedMessages.findIndex((msg) => msg.id === message.id);\n      if (msgIndex !== -1) {\n        this.pinnedMessages[msgIndex] = updateFunc(this.pinnedMessages[msgIndex]);\n      }\n    }\n  }\n\n  /**\n   * Setter for isUpToDate.\n   *\n   * @param isUpToDate  Flag which indicates if channel state contain latest/recent messages or no.\n   *                    This flag should be managed by UI sdks using a setter - setIsUpToDate.\n   *                    When false, any new message (received by websocket event - message.new) will not\n   *                    be pushed on to message list.\n   */\n  setIsUpToDate = (isUpToDate: boolean) => {\n    this.isUpToDate = isUpToDate;\n  };\n\n  /**\n   * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isn't found\n   *\n   * @param {Array<ReturnType<ChannelState<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>['formatMessage']>>} messages A list of messages\n   * @param message\n   * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n   * @param {string} sortBy field name to use to sort the messages by\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   */\n  _addToMessageList(\n    messages: Array<\n      ReturnType<\n        ChannelState<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >['formatMessage']\n      >\n    >,\n    message: ReturnType<\n      ChannelState<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >['formatMessage']\n    >,\n    timestampChanged = false,\n    sortBy: 'pinned_at' | 'created_at' = 'created_at',\n    addIfDoesNotExist = true,\n  ) {\n    const addMessageToList = addIfDoesNotExist || timestampChanged;\n    let messageArr = messages;\n\n    // if created_at has changed, message should be filtered and re-inserted in correct order\n    // slow op but usually this only happens for a message inserted to state before actual response with correct timestamp\n    if (timestampChanged) {\n      messageArr = messageArr.filter((msg) => !(msg.id && message.id === msg.id));\n    }\n\n    // Get array length after filtering\n    const messageArrayLength = messageArr.length;\n\n    // for empty list just concat and return unless it's an update or deletion\n    if (messageArrayLength === 0 && addMessageToList) {\n      return messageArr.concat(message);\n    } else if (messageArrayLength === 0) {\n      return [...messageArr];\n    }\n\n    const messageTime = (message[sortBy] as Date).getTime();\n    const messageIsNewest =\n      (messageArr[messageArrayLength - 1][sortBy] as Date).getTime() < messageTime;\n\n    // if message is newer than last item in the list concat and return unless it's an update or deletion\n    if (messageIsNewest && addMessageToList) {\n      return messageArr.concat(message);\n    } else if (messageIsNewest) {\n      return [...messageArr];\n    }\n\n    // find the closest index to push the new message\n    let left = 0;\n    let middle = 0;\n    let right = messageArrayLength - 1;\n    while (left <= right) {\n      middle = Math.floor((right + left) / 2);\n      if ((messageArr[middle][sortBy] as Date).getTime() <= messageTime)\n        left = middle + 1;\n      else right = middle - 1;\n    }\n\n    // message already exists and not filtered due to timestampChanged, update and return\n    if (!timestampChanged && message.id) {\n      if (messageArr[left] && message.id === messageArr[left].id) {\n        messageArr[left] = message;\n        return [...messageArr];\n      }\n\n      if (messageArr[left - 1] && message.id === messageArr[left - 1].id) {\n        messageArr[left - 1] = message;\n        return [...messageArr];\n      }\n    }\n\n    // Do not add updated or deleted messages to the list if they do not already exist\n    // or have a timestamp change.\n    if (addMessageToList) {\n      messageArr.splice(left, 0, message);\n    }\n    return [...messageArr];\n  }\n\n  /**\n   * removeMessage - Description\n   *\n   * @param {{ id: string; parent_id?: string }} messageToRemove Object of the message to remove. Needs to have at id specified.\n   *\n   * @return {boolean} Returns if the message was removed\n   */\n  removeMessage(messageToRemove: { id: string; parent_id?: string }) {\n    let isRemoved = false;\n    if (messageToRemove.parent_id && this.threads[messageToRemove.parent_id]) {\n      const { removed, result: threadMessages } = this.removeMessageFromArray(\n        this.threads[messageToRemove.parent_id],\n        messageToRemove,\n      );\n\n      this.threads[messageToRemove.parent_id] = threadMessages;\n      isRemoved = removed;\n    } else {\n      const { removed, result: messages } = this.removeMessageFromArray(\n        this.messages,\n        messageToRemove,\n      );\n      this.messages = messages;\n      isRemoved = removed;\n    }\n\n    return isRemoved;\n  }\n\n  removeMessageFromArray = (\n    msgArray: Array<\n      ReturnType<\n        ChannelState<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >['formatMessage']\n      >\n    >,\n    msg: { id: string; parent_id?: string },\n  ) => {\n    const result = msgArray.filter(\n      (message) => !(!!message.id && !!msg.id && message.id === msg.id),\n    );\n\n    return { removed: result.length < msgArray.length, result };\n  };\n\n  /**\n   * Updates the message.user property with updated user object, for messages.\n   *\n   * @param {UserResponse<UserType>} user\n   */\n  updateUserMessages = (user: UserResponse<UserType>) => {\n    const _updateUserMessages = (\n      messages: Array<\n        ReturnType<\n          ChannelState<\n            AttachmentType,\n            ChannelType,\n            CommandType,\n            EventType,\n            MessageType,\n            ReactionType,\n            UserType\n          >['formatMessage']\n        >\n      >,\n      user: UserResponse<UserType>,\n    ) => {\n      for (let i = 0; i < messages.length; i++) {\n        const m = messages[i];\n        if (m.user?.id === user.id) {\n          messages[i] = { ...m, user };\n        }\n      }\n    };\n\n    _updateUserMessages(this.messages, user);\n\n    for (const parentId in this.threads) {\n      _updateUserMessages(this.threads[parentId], user);\n    }\n\n    _updateUserMessages(this.pinnedMessages, user);\n  };\n\n  /**\n   * Marks the messages as deleted, from deleted user.\n   *\n   * @param {UserResponse<UserType>} user\n   * @param {boolean} hardDelete\n   */\n  deleteUserMessages = (user: UserResponse<UserType>, hardDelete = false) => {\n    const _deleteUserMessages = (\n      messages: Array<\n        ReturnType<\n          ChannelState<\n            AttachmentType,\n            ChannelType,\n            CommandType,\n            EventType,\n            MessageType,\n            ReactionType,\n            UserType\n          >['formatMessage']\n        >\n      >,\n      user: UserResponse<UserType>,\n      hardDelete = false,\n    ) => {\n      for (let i = 0; i < messages.length; i++) {\n        const m = messages[i];\n        if (m.user?.id !== user.id) {\n          continue;\n        }\n\n        if (hardDelete) {\n          /**\n           * In case of hard delete, we need to strip down all text, html,\n           * attachments and all the custom properties on message\n           */\n          messages[i] = ({\n            cid: m.cid,\n            created_at: m.created_at,\n            deleted_at: user.deleted_at,\n            id: m.id,\n            latest_reactions: [],\n            mentioned_users: [],\n            own_reactions: [],\n            parent_id: m.parent_id,\n            reply_count: m.reply_count,\n            status: m.status,\n            thread_participants: m.thread_participants,\n            type: 'deleted',\n            updated_at: m.updated_at,\n            user: m.user,\n          } as unknown) as ReturnType<\n            ChannelState<\n              AttachmentType,\n              ChannelType,\n              CommandType,\n              EventType,\n              MessageType,\n              ReactionType,\n              UserType\n            >['formatMessage']\n          >;\n        } else {\n          messages[i] = {\n            ...m,\n            type: 'deleted',\n            deleted_at: user.deleted_at,\n          };\n        }\n      }\n    };\n\n    _deleteUserMessages(this.messages, user, hardDelete);\n\n    for (const parentId in this.threads) {\n      _deleteUserMessages(this.threads[parentId], user, hardDelete);\n    }\n\n    _deleteUserMessages(this.pinnedMessages, user, hardDelete);\n  };\n\n  /**\n   * filterErrorMessages - Removes error messages from the channel state.\n   *\n   */\n  filterErrorMessages() {\n    const filteredMessages = this.messages.filter((message) => message.type !== 'error');\n\n    this.messages = filteredMessages;\n  }\n\n  /**\n   * clean - Remove stale data such as users that stayed in typing state for more than 5 seconds\n   */\n  clean() {\n    const now = new Date();\n    // prevent old users from showing up as typing\n    for (const [userID, lastEvent] of Object.entries(this.typing)) {\n      const receivedAt =\n        typeof lastEvent.received_at === 'string'\n          ? new Date(lastEvent.received_at)\n          : lastEvent.received_at || new Date();\n      if (now.getTime() - receivedAt.getTime() > 7000) {\n        delete this.typing[userID];\n        this._channel.getClient().dispatchEvent({\n          cid: this._channel.cid,\n          type: 'typing.stop',\n          user: { id: userID },\n        } as Event<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>);\n      }\n    }\n  }\n\n  clearMessages() {\n    this.messages = [];\n    this.pinnedMessages = [];\n  }\n}\n","export const EVENT_MAP = {\n  'channel.created': true,\n  'channel.deleted': true,\n  'channel.hidden': true,\n  'channel.muted': true,\n  'channel.truncated': true,\n  'channel.unmuted': true,\n  'channel.updated': true,\n  'channel.visible': true,\n  'health.check': true,\n  'member.added': true,\n  'member.removed': true,\n  'member.updated': true,\n  'message.deleted': true,\n  'message.new': true,\n  'message.read': true,\n  'message.updated': true,\n  'notification.added_to_channel': true,\n  'notification.channel_deleted': true,\n  'notification.channel_mutes_updated': true,\n  'notification.channel_truncated': true,\n  'notification.invite_accepted': true,\n  'notification.invite_rejected': true,\n  'notification.invited': true,\n  'notification.mark_read': true,\n  'notification.message_new': true,\n  'notification.mutes_updated': true,\n  'notification.removed_from_channel': true,\n  'reaction.deleted': true,\n  'reaction.new': true,\n  'reaction.updated': true,\n  'typing.start': true,\n  'typing.stop': true,\n  'user.banned': true,\n  'user.deleted': true,\n  'user.presence.changed': true,\n  'user.unbanned': true,\n  'user.updated': true,\n  'user.watching.start': true,\n  'user.watching.stop': true,\n\n  // local events\n  'connection.changed': true,\n  'connection.recovered': true,\n};\n\nconst IS_VALID_EVENT_MAP_TYPE = { ...EVENT_MAP, all: true };\n\nexport const isValidEventType = (eventType: string): boolean =>\n  IS_VALID_EVENT_MAP_TYPE[eventType as keyof typeof IS_VALID_EVENT_MAP_TYPE] || false;\n","import FormData from 'form-data';\nimport {\n  AscDesc,\n  LiteralStringForUnion,\n  OwnUserBase,\n  OwnUserResponse,\n  UnknownType,\n  UserResponse,\n} from './types';\n\n/**\n * logChatPromiseExecution - utility function for logging the execution of a promise..\n *  use this when you want to run the promise and handle errors by logging a warning\n *\n * @param {Promise<T>} promise The promise you want to run and log\n * @param {string} name    A descriptive name of what the promise does for log output\n *\n */\nexport function logChatPromiseExecution<T>(promise: Promise<T>, name: string) {\n  promise.then().catch((error) => {\n    console.warn(`failed to do ${name}, ran into error: `, error);\n  });\n}\n\nexport const sleep = (m: number): Promise<void> => new Promise((r) => setTimeout(r, m));\n\nexport function isFunction<T>(value: Function | T): value is Function {\n  return (\n    value &&\n    (Object.prototype.toString.call(value) === '[object Function]' ||\n      'function' === typeof value ||\n      value instanceof Function)\n  );\n}\n\nexport const chatCodes = {\n  TOKEN_EXPIRED: 40,\n  WS_CLOSED_SUCCESS: 1000,\n};\n\nfunction isReadableStream(obj: unknown): obj is NodeJS.ReadStream {\n  return (\n    obj !== null &&\n    typeof obj === 'object' &&\n    ((obj as NodeJS.ReadStream).readable ||\n      typeof (obj as NodeJS.ReadStream)._read === 'function')\n  );\n}\n\nfunction isBuffer(obj: unknown): obj is Buffer {\n  return (\n    obj != null &&\n    (obj as Buffer).constructor != null &&\n    // @ts-expect-error\n    typeof obj.constructor.isBuffer === 'function' &&\n    // @ts-expect-error\n    obj.constructor.isBuffer(obj)\n  );\n}\n\nfunction isFileWebAPI(uri: unknown): uri is File {\n  return typeof window !== 'undefined' && 'File' in window && uri instanceof File;\n}\n\nexport function isOwnUser<\n  ChannelType extends UnknownType = UnknownType,\n  CommandType extends string = LiteralStringForUnion,\n  UserType extends UnknownType = UnknownType\n>(\n  user?: OwnUserResponse<ChannelType, CommandType, UserType> | UserResponse<UserType>,\n): user is OwnUserResponse<ChannelType, CommandType, UserType> {\n  return (\n    (user as OwnUserResponse<ChannelType, CommandType, UserType>)?.total_unread_count !==\n    undefined\n  );\n}\n\nexport function isOwnUserBaseProperty(property: string) {\n  const ownUserBaseProperties: {\n    [Property in keyof Required<OwnUserBase>]: boolean;\n  } = {\n    channel_mutes: true,\n    devices: true,\n    mutes: true,\n    total_unread_count: true,\n    unread_channels: true,\n    unread_count: true,\n    invisible: true,\n    roles: true,\n  };\n\n  return ownUserBaseProperties[property as keyof OwnUserBase];\n}\n\nexport function addFileToFormData(\n  uri: string | NodeJS.ReadableStream | Buffer | File,\n  name?: string,\n  contentType?: string,\n) {\n  const data = new FormData();\n\n  if (isReadableStream(uri) || isBuffer(uri) || isFileWebAPI(uri)) {\n    if (name) data.append('file', uri, name);\n    else data.append('file', uri);\n  } else {\n    data.append('file', {\n      uri,\n      name: name || (uri as string).split('/').reverse()[0],\n      contentType: contentType || undefined,\n      type: contentType || undefined,\n    });\n  }\n\n  return data;\n}\nexport function normalizeQuerySort<T extends Record<string, AscDesc | undefined>>(\n  sort: T | T[],\n) {\n  const sortFields: Array<{ direction: AscDesc; field: keyof T }> = [];\n  const sortArr = Array.isArray(sort) ? sort : [sort];\n  for (const item of sortArr) {\n    const entries = Object.entries(item) as [keyof T, AscDesc][];\n    if (entries.length > 1) {\n      console.warn(\n        \"client._buildSort() - multiple fields in a single sort object detected. Object's field order is not guaranteed\",\n      );\n    }\n    for (const [field, direction] of entries) {\n      sortFields.push({ field, direction });\n    }\n  }\n  return sortFields;\n}\n\n/**\n * retryInterval - A retry interval which increases acc to number of failures\n *\n * @return {number} Duration to wait in milliseconds\n */\nexport function retryInterval(numberOfFailures: number) {\n  // try to reconnect in 0.25-25 seconds (random to spread out the load from failures)\n  const max = Math.min(500 + numberOfFailures * 2000, 25000);\n  const min = Math.min(Math.max(250, (numberOfFailures - 1) * 2000), 25000);\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\n/** adopted from https://github.com/ai/nanoid/blob/master/non-secure/index.js */\nconst alphabet = 'ModuleSymbhasOwnPr0123456789ABCDEFGHNRVfgctiUvzKqYTJkLxpZXIjQW';\nexport function randomId() {\n  let id = '';\n  for (let i = 0; i < 21; i++) {\n    id += alphabet[(Math.random() * 64) | 0];\n  }\n  return id;\n}\n","import { ChannelState } from './channel_state';\nimport { isValidEventType } from './events';\nimport { logChatPromiseExecution, normalizeQuerySort } from './utils';\nimport { StreamChat } from './client';\nimport {\n  APIResponse,\n  BanUserOptions,\n  ChannelAPIResponse,\n  ChannelData,\n  ChannelFilters,\n  ChannelMemberAPIResponse,\n  ChannelMemberResponse,\n  ChannelQueryOptions,\n  ChannelResponse,\n  DeleteChannelAPIResponse,\n  Event,\n  EventAPIResponse,\n  EventHandler,\n  EventTypes,\n  FormatMessageResponse,\n  GetMultipleMessagesAPIResponse,\n  GetReactionsAPIResponse,\n  GetRepliesAPIResponse,\n  InviteOptions,\n  LiteralStringForUnion,\n  MarkReadOptions,\n  Message,\n  MessageFilters,\n  MessageResponse,\n  MuteChannelAPIResponse,\n  PaginationOptions,\n  PartialUpdateChannel,\n  PartialUpdateChannelAPIResponse,\n  QueryMembersOptions,\n  Reaction,\n  ReactionAPIResponse,\n  SearchOptions,\n  SearchPayload,\n  SearchAPIResponse,\n  SendMessageAPIResponse,\n  TruncateChannelAPIResponse,\n  UnknownType,\n  UpdateChannelAPIResponse,\n  UserFilters,\n  UserResponse,\n  UserSort,\n  SearchMessageSortBase,\n} from './types';\nimport { Role } from './permissions';\n\n/**\n * Channel - The Channel class manages it's own state.\n */\nexport class Channel<\n  AttachmentType extends UnknownType = UnknownType,\n  ChannelType extends UnknownType = UnknownType,\n  CommandType extends string = LiteralStringForUnion,\n  EventType extends UnknownType = UnknownType,\n  MessageType extends UnknownType = UnknownType,\n  ReactionType extends UnknownType = UnknownType,\n  UserType extends UnknownType = UnknownType\n> {\n  _client: StreamChat<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  >;\n  type: string;\n  id: string | undefined;\n  data:\n    | ChannelData<ChannelType>\n    | ChannelResponse<ChannelType, CommandType, UserType>\n    | undefined;\n  _data: ChannelData<ChannelType> | ChannelResponse<ChannelType, CommandType, UserType>;\n  cid: string;\n  listeners: {\n    [key: string]: (\n      | string\n      | EventHandler<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n    )[];\n  };\n  state: ChannelState<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  >;\n  initialized: boolean;\n  lastKeyStroke?: Date;\n  lastTypingEvent: Date | null;\n  isTyping: boolean;\n  disconnected: boolean;\n\n  /**\n   * constructor - Create a channel\n   *\n   * @param {StreamChat<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>} client the chat client\n   * @param {string} type  the type of channel\n   * @param {string} [id]  the id of the chat\n   * @param {ChannelData<ChannelType>} data any additional custom params\n   *\n   * @return {Channel<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>} Returns a new uninitialized channel\n   */\n  constructor(\n    client: StreamChat<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n    type: string,\n    id: string | undefined,\n    data: ChannelData<ChannelType>,\n  ) {\n    const validTypeRe = /^[\\w_-]+$/;\n    const validIDRe = /^[\\w!_-]+$/;\n\n    if (!validTypeRe.test(type)) {\n      throw new Error(`Invalid chat type ${type}, letters, numbers and \"_-\" are allowed`);\n    }\n    if (typeof id === 'string' && !validIDRe.test(id)) {\n      throw new Error(`Invalid chat id ${id}, letters, numbers and \"!-_\" are allowed`);\n    }\n\n    this._client = client;\n    this.type = type;\n    this.id = id;\n    // used by the frontend, gets updated:\n    this.data = data;\n    // this._data is used for the requests...\n    this._data = { ...data };\n    this.cid = `${type}:${id}`;\n    this.listeners = {};\n    // perhaps the state variable should be private\n    this.state = new ChannelState<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >(this);\n    this.initialized = false;\n    this.lastTypingEvent = null;\n    this.isTyping = false;\n    this.disconnected = false;\n  }\n\n  /**\n   * getClient - Get the chat client for this channel. If client.disconnect() was called, this function will error\n   *\n   * @return {StreamChat<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>}\n   */\n  getClient(): StreamChat<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  > {\n    if (this.disconnected === true) {\n      throw Error(`You can't use a channel after client.disconnect() was called`);\n    }\n    return this._client;\n  }\n\n  /**\n   * getConfig - Get the configs for this channel type\n   *\n   * @return {Record<string, unknown>}\n   */\n  getConfig() {\n    const client = this.getClient();\n    return client.configs[this.type];\n  }\n\n  /**\n   * sendMessage - Send a message to this channel\n   *\n   * @param {Message<AttachmentType, MessageType, UserType>} message The Message object\n   * @param {{ skip_push?: boolean }} [options] Option object, {skip_push: true} to skip sending push notifications\n   *\n   * @return {Promise<SendMessageAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The Server Response\n   */\n  async sendMessage(\n    message: Message<AttachmentType, MessageType, UserType>,\n    options?: { skip_push?: boolean },\n  ) {\n    const sendMessageResponse = await this.getClient().post<\n      SendMessageAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL() + '/message', {\n      message,\n      ...options,\n    });\n\n    // Reset unreadCount to 0.\n    this.state.unreadCount = 0;\n\n    return sendMessageResponse;\n  }\n\n  sendFile(\n    uri: string | NodeJS.ReadableStream | Buffer | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse<UserType>,\n  ) {\n    return this.getClient().sendFile(\n      `${this._channelURL()}/file`,\n      uri,\n      name,\n      contentType,\n      user,\n    );\n  }\n\n  sendImage(\n    uri: string | NodeJS.ReadableStream | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse<UserType>,\n  ) {\n    return this.getClient().sendFile(\n      `${this._channelURL()}/image`,\n      uri,\n      name,\n      contentType,\n      user,\n    );\n  }\n\n  deleteFile(url: string) {\n    return this.getClient().delete<APIResponse>(`${this._channelURL()}/file`, { url });\n  }\n\n  deleteImage(url: string) {\n    return this.getClient().delete<APIResponse>(`${this._channelURL()}/image`, { url });\n  }\n\n  /**\n   * sendEvent - Send an event on this channel\n   *\n   * @param {Event<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>} event for example {type: 'message.read'}\n   *\n   * @return {Promise<EventAPIResponse<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>>} The Server Response\n   */\n  async sendEvent(\n    event: Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    this._checkInitialized();\n    return await this.getClient().post<\n      EventAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL() + '/event', {\n      event,\n    });\n  }\n\n  /**\n   * search - Query messages\n   *\n   * @param {MessageFilters<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType> | string}  query search query or object MongoDB style filters\n   * @param {{client_id?: string; connection_id?: string; query?: string; message_filter_conditions?: MessageFilters<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>}} options Option object, {user_id: 'tommaso'}\n   *\n   * @return {Promise<SearchAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} search messages response\n   */\n  async search(\n    query:\n      | MessageFilters<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n      | string,\n    options: SearchOptions<MessageType> & {\n      client_id?: string;\n      connection_id?: string;\n      message_filter_conditions?: MessageFilters<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >;\n      query?: string;\n    } = {},\n  ) {\n    if (options.offset && (options.sort || options.next)) {\n      throw Error(`Cannot specify offset with sort or next parameters`);\n    }\n    // Return a list of channels\n    const payload: SearchPayload<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    > = {\n      filter_conditions: { cid: this.cid } as ChannelFilters<\n        ChannelType,\n        CommandType,\n        UserType\n      >,\n      ...options,\n      sort: options.sort\n        ? normalizeQuerySort<SearchMessageSortBase<MessageType>>(options.sort)\n        : undefined,\n    };\n    if (typeof query === 'string') {\n      payload.query = query;\n    } else if (typeof query === 'object') {\n      payload.message_filter_conditions = query;\n    } else {\n      throw Error(`Invalid type ${typeof query} for query parameter`);\n    }\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.getClient().wsPromise;\n\n    return await this.getClient().get<\n      SearchAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this.getClient().baseURL + '/search', {\n      payload,\n    });\n  }\n\n  /**\n   * queryMembers - Query Members\n   *\n   * @param {UserFilters<UserType>}  filterConditions object MongoDB style filters\n   * @param {UserSort<UserType>} [sort] Sort options, for instance [{created_at: -1}].\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_active: -1}, {created_at: 1}]\n   * @param {{ limit?: number; offset?: number }} [options] Option object, {limit: 10, offset:10}\n   *\n   * @return {Promise<ChannelMemberAPIResponse<UserType>>} Query Members response\n   */\n  async queryMembers(\n    filterConditions: UserFilters<UserType>,\n    sort: UserSort<UserType> = [],\n    options: QueryMembersOptions = {},\n  ) {\n    let id: string | undefined;\n    const type = this.type;\n    let members: string[] | ChannelMemberResponse<UserType>[] | undefined;\n    if (this.id) {\n      id = this.id;\n    } else if (this.data?.members && Array.isArray(this.data.members)) {\n      members = this.data.members;\n    }\n    // Return a list of members\n    return await this.getClient().get<ChannelMemberAPIResponse<UserType>>(\n      this.getClient().baseURL + '/members',\n      {\n        payload: {\n          type,\n          id,\n          members,\n          sort: normalizeQuerySort(sort),\n          filter_conditions: filterConditions,\n          ...options,\n        },\n      },\n    );\n  }\n\n  /**\n   * sendReaction - Send a reaction about a message\n   *\n   * @param {string} messageID the message id\n   * @param {Reaction<ReactionType, UserType>} reaction the reaction object for instance {type: 'love'}\n   * @param {{ enforce_unique?: boolean, skip_push?: boolean }} [options] Option object, {enforce_unique: true, skip_push: true} to override any existing reaction or skip sending push notifications\n   *\n   * @return {Promise<ReactionAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The Server Response\n   */\n  async sendReaction(\n    messageID: string,\n    reaction: Reaction<ReactionType, UserType>,\n    options?: { enforce_unique?: boolean; skip_push?: boolean },\n  ) {\n    if (!messageID) {\n      throw Error(`Message id is missing`);\n    }\n    if (!reaction || Object.keys(reaction).length === 0) {\n      throw Error(`Reaction object is missing`);\n    }\n    return await this.getClient().post<\n      ReactionAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this.getClient().baseURL + `/messages/${messageID}/reaction`, {\n      reaction,\n      ...options,\n    });\n  }\n\n  /**\n   * deleteReaction - Delete a reaction by user and type\n   *\n   * @param {string} messageID the id of the message from which te remove the reaction\n   * @param {string} reactionType the type of reaction that should be removed\n   * @param {string} [user_id] the id of the user (used only for server side request) default null\n   *\n   * @return {Promise<ReactionAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The Server Response\n   */\n  deleteReaction(messageID: string, reactionType: string, user_id?: string) {\n    this._checkInitialized();\n    if (!reactionType || !messageID) {\n      throw Error(\n        'Deleting a reaction requires specifying both the message and reaction type',\n      );\n    }\n\n    const url =\n      this.getClient().baseURL + `/messages/${messageID}/reaction/${reactionType}`;\n    //provided when server side request\n    if (user_id) {\n      return this.getClient().delete<\n        ReactionAPIResponse<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n      >(url, { user_id });\n    }\n\n    return this.getClient().delete<\n      ReactionAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(url, {});\n  }\n\n  /**\n   * update - Edit the channel's custom properties\n   *\n   * @param {ChannelData<ChannelType>} channelData The object to update the custom properties of this channel with\n   * @param {Message<AttachmentType, MessageType, UserType>} [updateMessage] Optional message object for channel members notification\n   * @param {{ skip_push?: boolean }} [options] Option object, {skip_push: true} to skip sending push notifications\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async update(\n    channelData:\n      | Partial<ChannelData<ChannelType>>\n      | Partial<ChannelResponse<ChannelType, CommandType, UserType>> = {},\n    updateMessage?: Message<AttachmentType, MessageType, UserType>,\n    options?: { skip_push?: boolean },\n  ) {\n    // Strip out reserved names that will result in API errors.\n    const reserved = [\n      'config',\n      'cid',\n      'created_by',\n      'id',\n      'member_count',\n      'type',\n      'created_at',\n      'updated_at',\n      'last_message_at',\n      'own_capabilities',\n    ];\n    reserved.forEach((key) => {\n      delete channelData[key];\n    });\n\n    return await this._update({\n      message: updateMessage,\n      data: channelData,\n      ...options,\n    });\n  }\n\n  /**\n   * updatePartial - partial update channel properties\n   *\n   * @param {PartialUpdateChannel<ChannelType>} partial update request\n   *\n   * @return {Promise<PartialUpdateChannelAPIResponse<ChannelType,CommandType, UserType>>}\n   */\n  async updatePartial(update: PartialUpdateChannel<ChannelType>) {\n    return await this.getClient().patch<\n      PartialUpdateChannelAPIResponse<ChannelType, CommandType, UserType>\n    >(this._channelURL(), update);\n  }\n\n  /**\n   * enableSlowMode - enable slow mode\n   *\n   * @param {number} coolDownInterval the cooldown interval in seconds\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async enableSlowMode(coolDownInterval: number) {\n    const data = await this.getClient().post<\n      UpdateChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL(), {\n      cooldown: coolDownInterval,\n    });\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * disableSlowMode - disable slow mode\n   *\n   * @return {Promise<UpdateChannelAPIResponse<ChannelType, AttachmentType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async disableSlowMode() {\n    const data = await this.getClient().post<\n      UpdateChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL(), {\n      cooldown: 0,\n    });\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * delete - Delete the channel. Messages are permanently removed.\n   *\n   * @return {Promise<DeleteChannelAPIResponse<ChannelType, CommandType, UserType>>} The server response\n   */\n  async delete() {\n    return await this.getClient().delete<\n      DeleteChannelAPIResponse<ChannelType, CommandType, UserType>\n    >(this._channelURL(), {});\n  }\n\n  /**\n   * truncate - Removes all messages from the channel\n   *\n   * @return {Promise<TruncateChannelAPIResponse<ChannelType, CommandType, UserType>>} The server response\n   */\n  async truncate() {\n    return await this.getClient().post<\n      TruncateChannelAPIResponse<ChannelType, CommandType, UserType>\n    >(this._channelURL() + '/truncate', {});\n  }\n\n  /**\n   * acceptInvite - accept invitation to the channel\n   *\n   * @param {InviteOptions<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} [options] The object to update the custom properties of this channel with\n   *\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async acceptInvite(\n    options: InviteOptions<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    > = {},\n  ) {\n    return await this._update({\n      accept_invite: true,\n      ...options,\n    });\n  }\n\n  /**\n   * rejectInvite - reject invitation to the channel\n   *\n   * @param {InviteOptions<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} [options] The object to update the custom properties of this channel with\n   *\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async rejectInvite(\n    options: InviteOptions<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    > = {},\n  ) {\n    return await this._update({\n      reject_invite: true,\n      ...options,\n    });\n  }\n\n  /**\n   * addMembers - add members to the channel\n   *\n   * @param {{user_id: string, channel_role?: Role}[]} members An array of members to add to the channel\n   * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async addMembers(\n    members: string[] | { user_id: string; channel_role?: Role }[],\n    message?: Message<AttachmentType, MessageType, UserType>,\n  ) {\n    return await this._update({\n      add_members: members,\n      message,\n    });\n  }\n\n  /**\n   * addModerators - add moderators to the channel\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async addModerators(\n    members: string[],\n    message?: Message<AttachmentType, MessageType, UserType>,\n  ) {\n    return await this._update({\n      add_moderators: members,\n      message,\n    });\n  }\n\n  /**\n   * assignRoles - sets member roles in a channel\n   *\n   * @param {{channel_role: Role, user_id: string}[]} roles List of role assignments\n   * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async assignRoles(\n    roles: { channel_role: Role; user_id: string }[],\n    message?: Message<AttachmentType, MessageType, UserType>,\n  ) {\n    return await this._update({\n      assign_roles: roles,\n      message,\n    });\n  }\n\n  /**\n   * inviteMembers - invite members to the channel\n   *\n   * @param {{user_id: string, channel_role?: Role}[]} members An array of members to invite to the channel\n   * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async inviteMembers(\n    members: { user_id: string; channel_role?: Role }[] | string[],\n    message?: Message<AttachmentType, MessageType, UserType>,\n  ) {\n    return await this._update({\n      invites: members,\n      message,\n    });\n  }\n\n  /**\n   * removeMembers - remove members from channel\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async removeMembers(\n    members: string[],\n    message?: Message<AttachmentType, MessageType, UserType>,\n  ) {\n    return await this._update({\n      remove_members: members,\n      message,\n    });\n  }\n\n  /**\n   * demoteModerators - remove moderator role from channel members\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message<AttachmentType, MessageType, UserType>} [message] Optional message object for channel members notification\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async demoteModerators(\n    members: string[],\n    message?: Message<AttachmentType, MessageType, UserType>,\n  ) {\n    return await this._update({\n      demote_moderators: members,\n      message,\n    });\n  }\n\n  /**\n   * _update - executes channel update request\n   * @param payload Object Update Channel payload\n   * @return {Promise<UpdateChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   * TODO: introduce new type instead of Object in the next major update\n   */\n  async _update(payload: Object) {\n    const data = await this.getClient().post<\n      UpdateChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL(), payload);\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * mute - mutes the current channel\n   * @param {{ user_id?: string, expiration?: string }} opts expiration in minutes or user_id\n   * @return {Promise<MuteChannelAPIResponse<ChannelType, CommandType, UserType>>} The server response\n   *\n   * example with expiration:\n   * await channel.mute({expiration: moment.duration(2, 'weeks')});\n   *\n   * example server side:\n   * await channel.mute({user_id: userId});\n   *\n   */\n  async mute(opts: { expiration?: number; user_id?: string } = {}) {\n    return await this.getClient().post<\n      MuteChannelAPIResponse<ChannelType, CommandType, UserType>\n    >(this.getClient().baseURL + '/moderation/mute/channel', {\n      channel_cid: this.cid,\n      ...opts,\n    });\n  }\n\n  /**\n   * unmute - mutes the current channel\n   * @param {{ user_id?: string}} opts user_id\n   * @return {Promise<APIResponse>} The server response\n   *\n   * example server side:\n   * await channel.unmute({user_id: userId});\n   */\n  async unmute(opts: { user_id?: string } = {}) {\n    return await this.getClient().post<APIResponse>(\n      this.getClient().baseURL + '/moderation/unmute/channel',\n      {\n        channel_cid: this.cid,\n        ...opts,\n      },\n    );\n  }\n\n  /**\n   * muteStatus - returns the mute status for the current channel\n   * @return {{ muted: boolean; createdAt: Date | null; expiresAt: Date | null }} { muted: true | false, createdAt: Date | null, expiresAt: Date | null}\n   */\n  muteStatus(): {\n    createdAt: Date | null;\n    expiresAt: Date | null;\n    muted: boolean;\n  } {\n    this._checkInitialized();\n    return this.getClient()._muteStatus(this.cid);\n  }\n\n  sendAction(messageID: string, formData: Record<string, string>) {\n    this._checkInitialized();\n    if (!messageID) {\n      throw Error(`Message id is missing`);\n    }\n    return this.getClient().post<\n      SendMessageAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this.getClient().baseURL + `/messages/${messageID}/action`, {\n      message_id: messageID,\n      form_data: formData,\n      id: this.id,\n      type: this.type,\n    });\n  }\n\n  /**\n   * keystroke - First of the typing.start and typing.stop events based on the users keystrokes.\n   * Call this on every keystroke\n   * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}\n   * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread\n   */\n  async keystroke(parent_id?: string) {\n    if (!this.getConfig()?.typing_events) {\n      return;\n    }\n    const now = new Date();\n    const diff = this.lastTypingEvent && now.getTime() - this.lastTypingEvent.getTime();\n    this.lastKeyStroke = now;\n    this.isTyping = true;\n    // send a typing.start every 2 seconds\n    if (diff === null || diff > 2000) {\n      this.lastTypingEvent = new Date();\n      await this.sendEvent({\n        type: 'typing.start',\n        parent_id,\n      } as Event<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>);\n    }\n  }\n\n  /**\n   * stopTyping - Sets last typing to null and sends the typing.stop event\n   * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}\n   * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread\n   */\n  async stopTyping(parent_id?: string) {\n    if (!this.getConfig()?.typing_events) {\n      return;\n    }\n    this.lastTypingEvent = null;\n    this.isTyping = false;\n    await this.sendEvent({\n      type: 'typing.stop',\n      parent_id,\n    } as Event<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>);\n  }\n\n  /**\n   * lastMessage - return the last message, takes into account that last few messages might not be perfectly sorted\n   *\n   * @return {ReturnType<ChannelState<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>['formatMessage']> | undefined} Description\n   */\n  lastMessage() {\n    // get last 5 messages, sort, return the latest\n    // get a slice of the last 5\n    let min = this.state.messages.length - 5;\n    if (min < 0) {\n      min = 0;\n    }\n    const max = this.state.messages.length + 1;\n    const messageSlice = this.state.messages.slice(min, max);\n\n    // sort by pk desc\n    messageSlice.sort((a, b) => b.created_at.getTime() - a.created_at.getTime());\n\n    return messageSlice[0];\n  }\n\n  /**\n   * markRead - Send the mark read event for this user, only works if the `read_events` setting is enabled\n   *\n   * @param {MarkReadOptions<UserType>} data\n   * @return {Promise<EventAPIResponse<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType> | null>} Description\n   */\n  async markRead(data: MarkReadOptions<UserType> = {}) {\n    this._checkInitialized();\n\n    if (!this.getConfig()?.read_events) {\n      return Promise.resolve(null);\n    }\n\n    return await this.getClient().post<\n      EventAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL() + '/read', {\n      ...data,\n    });\n  }\n\n  /**\n   * clean - Cleans the channel state and fires stop typing if needed\n   */\n  clean() {\n    if (this.lastKeyStroke) {\n      const now = new Date();\n      const diff = now.getTime() - this.lastKeyStroke.getTime();\n      if (diff > 1000 && this.isTyping) {\n        logChatPromiseExecution(this.stopTyping(), 'stop typing event');\n      }\n    }\n\n    this.state.clean();\n  }\n\n  /**\n   * watch - Loads the initial channel state and watches for changes\n   *\n   * @param {ChannelQueryOptions<ChannelType, CommandType, UserType>} options additional options for the query endpoint\n   *\n   * @return {Promise<ChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The server response\n   */\n  async watch(options?: ChannelQueryOptions<ChannelType, CommandType, UserType>) {\n    const defaultOptions = {\n      state: true,\n      watch: true,\n      presence: false,\n    };\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.getClient().wsPromise;\n\n    if (!this.getClient()._hasConnectionID()) {\n      defaultOptions.watch = false;\n    }\n\n    const combined = { ...defaultOptions, ...options };\n    const state = await this.query(combined);\n    this.initialized = true;\n    this.data = state.channel;\n\n    this._client.logger(\n      'info',\n      `channel:watch() - started watching channel ${this.cid}`,\n      {\n        tags: ['channel'],\n        channel: this,\n      },\n    );\n    return state;\n  }\n\n  /**\n   * stopWatching - Stops watching the channel\n   *\n   * @return {Promise<APIResponse>} The server response\n   */\n  async stopWatching() {\n    const response = await this.getClient().post<APIResponse>(\n      this._channelURL() + '/stop-watching',\n      {},\n    );\n\n    this._client.logger(\n      'info',\n      `channel:watch() - stopped watching channel ${this.cid}`,\n      {\n        tags: ['channel'],\n        channel: this,\n      },\n    );\n\n    return response;\n  }\n\n  /**\n   * getReplies - List the message replies for a parent message\n   *\n   * @param {string} parent_id The message parent id, ie the top of the thread\n   * @param {PaginationOptions & { user?: UserResponse<UserType>; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}\n   *\n   * @return {Promise<GetRepliesAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} A response with a list of messages\n   */\n  async getReplies(\n    parent_id: string,\n    options: PaginationOptions & { user?: UserResponse<UserType>; user_id?: string },\n  ) {\n    const data = await this.getClient().get<\n      GetRepliesAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this.getClient().baseURL + `/messages/${parent_id}/replies`, {\n      ...options,\n    });\n\n    // add any messages to our thread state\n    if (data.messages) {\n      this.state.addMessagesSorted(data.messages);\n    }\n\n    return data;\n  }\n\n  /**\n   * getReactions - List the reactions, supports pagination\n   *\n   * @param {string} message_id The message id\n   * @param {{ limit?: number; offset?: number }} options The pagination options\n   *\n   * @return {Promise<GetReactionsAPIResponse<ReactionType, UserType>>} Server response\n   */\n  getReactions(message_id: string, options: { limit?: number; offset?: number }) {\n    return this.getClient().get<GetReactionsAPIResponse<ReactionType, UserType>>(\n      this.getClient().baseURL + `/messages/${message_id}/reactions`,\n      {\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * getMessagesById - Retrieves a list of messages by ID\n   *\n   * @param {string[]} messageIds The ids of the messages to retrieve from this channel\n   *\n   * @return {Promise<GetMultipleMessagesAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} Server response\n   */\n  getMessagesById(messageIds: string[]) {\n    return this.getClient().get<\n      GetMultipleMessagesAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this._channelURL() + '/messages', {\n      ids: messageIds.join(','),\n    });\n  }\n\n  /**\n   * lastRead - returns the last time the user marked the channel as read if the user never marked the channel as read, this will return null\n   * @return {Date | null | undefined}\n   */\n  lastRead() {\n    this._checkInitialized();\n    const { userID } = this.getClient();\n    if (userID) {\n      return this.state.read[userID] ? this.state.read[userID].last_read : null;\n    }\n  }\n\n  _countMessageAsUnread(\n    message:\n      | FormatMessageResponse<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n      | MessageResponse<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >,\n  ) {\n    if (message.shadowed) return false;\n    if (message.silent) return false;\n    if (message.user?.id === this.getClient().userID) return false;\n    if (message.user?.id && this.getClient().userMuteStatus(message.user.id))\n      return false;\n\n    if (this.muteStatus().muted) return false;\n\n    return true;\n  }\n\n  /**\n   * countUnread - Count of unread messages\n   *\n   * @param {Date | null} [lastRead] lastRead the time that the user read a message, defaults to current user's read state\n   *\n   * @return {number} Unread count\n   */\n  countUnread(lastRead?: Date | null) {\n    if (!lastRead) return this.state.unreadCount;\n\n    let count = 0;\n    for (let i = 0; i < this.state.messages.length; i += 1) {\n      const message = this.state.messages[i];\n      if (message.created_at > lastRead && this._countMessageAsUnread(message)) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * countUnread - Count the number of unread messages mentioning the current user\n   *\n   * @return {number} Unread mentions count\n   */\n  countUnreadMentions() {\n    const lastRead = this.lastRead();\n    const userID = this.getClient().userID;\n\n    let count = 0;\n    for (let i = 0; i < this.state.messages.length; i += 1) {\n      const message = this.state.messages[i];\n      if (\n        this._countMessageAsUnread(message) &&\n        (!lastRead || message.created_at > lastRead) &&\n        message.mentioned_users?.some((user) => user.id === userID)\n      ) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * create - Creates a new channel\n   *\n   * @return {Promise<ChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} The Server Response\n   */\n  create = async () => {\n    const options = {\n      watch: false,\n      state: false,\n      presence: false,\n    };\n    return await this.query(options);\n  };\n\n  /**\n   * query - Query the API, get messages, members or other channel fields\n   *\n   * @param {ChannelQueryOptions<ChannelType, CommandType, UserType>} options The query options\n   *\n   * @return {Promise<ChannelAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} Returns a query response\n   */\n  async query(options: ChannelQueryOptions<ChannelType, CommandType, UserType>) {\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.getClient().wsPromise;\n\n    let queryURL = `${this.getClient().baseURL}/channels/${this.type}`;\n    if (this.id) {\n      queryURL += `/${this.id}`;\n    }\n\n    const state = await this.getClient().post<\n      ChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(queryURL + '/query', {\n      data: this._data,\n      state: true,\n      ...options,\n    });\n\n    // update the channel id if it was missing\n    if (!this.id) {\n      this.id = state.channel.id;\n      this.cid = state.channel.cid;\n      // set the channel as active...\n\n      const membersStr = state.members\n        .map((member) => member.user_id || member.user?.id)\n        .sort()\n        .join(',');\n      const tempChannelCid = `${this.type}:!members-${membersStr}`;\n\n      if (tempChannelCid in this.getClient().activeChannels) {\n        // This gets set in `client.channel()` function, when channel is created\n        // using members, not id.\n        delete this.getClient().activeChannels[tempChannelCid];\n      }\n\n      if (!(this.cid in this.getClient().activeChannels)) {\n        this.getClient().activeChannels[this.cid] = this;\n      }\n    }\n\n    this.getClient()._addChannelConfig(state);\n\n    // add any messages to our channel state\n    this._initializeState(state);\n\n    return state;\n  }\n\n  /**\n   * banUser - Bans a user from a channel\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<UserType>} options\n   * @returns {Promise<APIResponse>}\n   */\n  async banUser(targetUserID: string, options: BanUserOptions<UserType>) {\n    this._checkInitialized();\n    return await this.getClient().banUser(targetUserID, {\n      ...options,\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * hides the channel from queryChannels for the user until a message is added\n   * If clearHistory is set to true - all messages will be removed for the user\n   *\n   * @param {string | null} userId\n   * @param {boolean} clearHistory\n   * @returns {Promise<APIResponse>}\n   */\n  async hide(userId: string | null = null, clearHistory = false) {\n    this._checkInitialized();\n\n    return await this.getClient().post<APIResponse>(`${this._channelURL()}/hide`, {\n      user_id: userId,\n      clear_history: clearHistory,\n    });\n  }\n\n  /**\n   * removes the hidden status for a channel\n   *\n   * @param {string | null} userId\n   * @returns {Promise<APIResponse>}\n   */\n  async show(userId: string | null = null) {\n    this._checkInitialized();\n    return await this.getClient().post<APIResponse>(`${this._channelURL()}/show`, {\n      user_id: userId,\n    });\n  }\n\n  /**\n   * unbanUser - Removes the bans for a user on a channel\n   *\n   * @param {string} targetUserID\n   * @returns {Promise<APIResponse>}\n   */\n  async unbanUser(targetUserID: string) {\n    this._checkInitialized();\n    return await this.getClient().unbanUser(targetUserID, {\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * shadowBan - Shadow bans a user from a channel\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<UserType>} options\n   * @returns {Promise<APIResponse>}\n   */\n  async shadowBan(targetUserID: string, options: BanUserOptions<UserType>) {\n    this._checkInitialized();\n    return await this.getClient().shadowBan(targetUserID, {\n      ...options,\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * removeShadowBan - Removes the shadow ban for a user on a channel\n   *\n   * @param {string} targetUserID\n   * @returns {Promise<APIResponse>}\n   */\n  async removeShadowBan(targetUserID: string) {\n    this._checkInitialized();\n    return await this.getClient().removeShadowBan(targetUserID, {\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * on - Listen to events on this channel.\n   *\n   * channel.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n   * or\n   * channel.on(event => {console.log(event.type)})\n   *\n   * @param {EventHandler<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType> | EventTypes} callbackOrString  The event type to listen for (optional)\n   * @param {EventHandler<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>} [callbackOrNothing] The callback to call\n   */\n  on(\n    eventType: EventTypes,\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): { unsubscribe: () => void };\n  on(\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): { unsubscribe: () => void };\n  on(\n    callbackOrString:\n      | EventHandler<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n      | EventTypes,\n    callbackOrNothing?: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): { unsubscribe: () => void } {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const valid = isValidEventType(key);\n    if (!valid) {\n      throw Error(`Invalid event type ${key}`);\n    }\n    const callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n    this._client.logger(\n      'info',\n      `Attaching listener for ${key} event on channel ${this.cid}`,\n      {\n        tags: ['event', 'channel'],\n        channel: this,\n      },\n    );\n\n    this.listeners[key].push(callback);\n\n    return {\n      unsubscribe: () => {\n        this._client.logger(\n          'info',\n          `Removing listener for ${key} event from channel ${this.cid}`,\n          { tags: ['event', 'channel'], channel: this },\n        );\n\n        this.listeners[key] = this.listeners[key].filter((el) => el !== callback);\n      },\n    };\n  }\n\n  /**\n   * off - Remove the event handler\n   *\n   */\n  off(\n    eventType: EventTypes,\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): void;\n  off(\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): void;\n  off(\n    callbackOrString:\n      | EventHandler<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n      | EventTypes,\n    callbackOrNothing?: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): void {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const valid = isValidEventType(key);\n    if (!valid) {\n      throw Error(`Invalid event type ${key}`);\n    }\n    const callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n\n    this._client.logger(\n      'info',\n      `Removing listener for ${key} event from channel ${this.cid}`,\n      { tags: ['event', 'channel'], channel: this },\n    );\n    this.listeners[key] = this.listeners[key].filter((value) => value !== callback);\n  }\n\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  _handleChannelEvent(\n    event: Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    const channel = this;\n    this._client.logger(\n      'info',\n      `channel:_handleChannelEvent - Received event of type { ${event.type} } on ${this.cid}`,\n      {\n        tags: ['event', 'channel'],\n        channel: this,\n      },\n    );\n\n    const channelState = channel.state;\n    switch (event.type) {\n      case 'typing.start':\n        if (event.user?.id) {\n          channelState.typing[event.user.id] = event;\n        }\n        break;\n      case 'typing.stop':\n        if (event.user?.id) {\n          delete channelState.typing[event.user.id];\n        }\n        break;\n      case 'message.read':\n        if (event.user?.id) {\n          channelState.read[event.user.id] = {\n            // because in client.ts the handleEvent call that flows to this sets this `event.received_at = new Date();`\n            last_read: event.received_at as Date,\n            user: event.user,\n          };\n\n          if (event.user?.id === this.getClient().user?.id) {\n            channelState.unreadCount = 0;\n          }\n        }\n        break;\n      case 'user.watching.start':\n      case 'user.updated':\n        if (event.user?.id) {\n          channelState.watchers[event.user.id] = event.user;\n        }\n        break;\n      case 'user.watching.stop':\n        if (event.user?.id) {\n          delete channelState.watchers[event.user.id];\n        }\n        break;\n      case 'message.deleted':\n        if (event.message) {\n          if (event.hard_delete) channelState.removeMessage(event.message);\n          else channelState.addMessageSorted(event.message, false, false);\n\n          channelState.removeQuotedMessageReferences(event.message);\n\n          if (event.message.pinned) {\n            channelState.removePinnedMessage(event.message);\n          }\n        }\n        break;\n      case 'message.new':\n        if (event.message) {\n          /* if message belongs to current user, always assume timestamp is changed to filter it out and add again to avoid duplication */\n          const ownMessage = event.user?.id === this.getClient().user?.id;\n          const isThreadMessage =\n            event.message.parent_id && !event.message.show_in_channel;\n\n          if (this.state.isUpToDate || isThreadMessage) {\n            channelState.addMessageSorted(event.message, ownMessage);\n          }\n          if (event.message.pinned) {\n            channelState.addPinnedMessage(event.message);\n          }\n\n          if (ownMessage && event.user?.id) {\n            channelState.unreadCount = 0;\n            channelState.read[event.user.id] = {\n              last_read: new Date(event.created_at as string),\n              user: event.user,\n            };\n          } else if (this._countMessageAsUnread(event.message)) {\n            channelState.unreadCount = channelState.unreadCount + 1;\n          }\n        }\n        break;\n      case 'message.updated':\n        if (event.message) {\n          channelState.addMessageSorted(event.message, false, false);\n          if (event.message.pinned) {\n            channelState.addPinnedMessage(event.message);\n          } else {\n            channelState.removePinnedMessage(event.message);\n          }\n        }\n        break;\n      case 'channel.truncated':\n        channelState.clearMessages();\n        channelState.unreadCount = 0;\n        break;\n      case 'member.added':\n      case 'member.updated':\n        if (event.member?.user_id) {\n          channelState.members[event.member.user_id] = event.member;\n        }\n        break;\n      case 'member.removed':\n        if (event.user?.id) {\n          delete channelState.members[event.user.id];\n        }\n        break;\n      case 'channel.updated':\n        if (event.channel) {\n          channel.data = event.channel;\n        }\n        break;\n      case 'reaction.new':\n        if (event.message && event.reaction) {\n          event.message = channelState.addReaction(event.reaction, event.message);\n        }\n        break;\n      case 'reaction.deleted':\n        if (event.reaction) {\n          event.message = channelState.removeReaction(event.reaction, event.message);\n        }\n        break;\n      case 'reaction.updated':\n        if (event.reaction) {\n          // assuming reaction.updated is only called if enforce_unique is true\n          event.message = channelState.addReaction(event.reaction, event.message, true);\n        }\n        break;\n      case 'channel.hidden':\n        if (event.clear_history) {\n          channelState.clearMessages();\n        }\n        break;\n      default:\n    }\n\n    // any event can send over the online count\n    if (event.watcher_count !== undefined) {\n      channel.state.watcher_count = event.watcher_count;\n    }\n  }\n\n  _callChannelListeners = (\n    event: Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) => {\n    const channel = this;\n    // gather and call the listeners\n    const listeners = [];\n    if (channel.listeners.all) {\n      listeners.push(...channel.listeners.all);\n    }\n    if (channel.listeners[event.type]) {\n      listeners.push(...channel.listeners[event.type]);\n    }\n\n    // call the event and send it to the listeners\n    for (const listener of listeners) {\n      if (typeof listener !== 'string') {\n        listener(event);\n      }\n    }\n  };\n\n  /**\n   * _channelURL - Returns the channel url\n   *\n   * @return {string} The channel url\n   */\n  _channelURL = () => {\n    if (!this.id) {\n      throw new Error('channel id is not defined');\n    }\n    return `${this.getClient().baseURL}/channels/${this.type}/${this.id}`;\n  };\n\n  _checkInitialized() {\n    if (!this.initialized && !this.getClient()._isUsingServerAuth()) {\n      throw Error(\n        `Channel ${this.cid} hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve`,\n      );\n    }\n  }\n\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  _initializeState(\n    state: ChannelAPIResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    const { state: clientState, user, userID } = this.getClient();\n\n    // add the Users\n    if (state.members) {\n      for (const member of state.members) {\n        if (member.user) {\n          clientState.updateUserReference(member.user, this.cid);\n        }\n      }\n    }\n\n    this.state.membership = state.membership || {};\n\n    const messages = state.messages || [];\n    if (!this.state.messages) {\n      this.state.messages = [];\n    }\n    this.state.addMessagesSorted(messages, false, true);\n    if (!this.state.pinnedMessages) {\n      this.state.pinnedMessages = [];\n    }\n    this.state.addPinnedMessages(state.pinned_messages || []);\n    this.state.watcher_count = state.watcher_count || 0;\n    // convert the arrays into objects for easier syncing...\n    if (state.watchers) {\n      for (const watcher of state.watchers) {\n        if (watcher) {\n          clientState.updateUserReference(watcher, this.cid);\n          this.state.watchers[watcher.id] = watcher;\n        }\n      }\n    }\n\n    // initialize read state to last message or current time if the channel is empty\n    // if the user is a member, this value will be overwritten later on otherwise this ensures\n    // that everything up to this point is not marked as unread\n    if (userID != null) {\n      const last_read = this.state.last_message_at || new Date();\n      if (user) {\n        this.state.read[user.id] = {\n          user,\n          last_read,\n        };\n      }\n    }\n\n    // apply read state if part of the state\n    if (state.read) {\n      for (const read of state.read) {\n        const parsedRead = { ...read, last_read: new Date(read.last_read) };\n        this.state.read[read.user.id] = parsedRead;\n        if (read.user.id === user?.id && typeof parsedRead.unread_messages === 'number') {\n          this.state.unreadCount = parsedRead.unread_messages;\n        }\n      }\n    }\n\n    if (state.members) {\n      for (const member of state.members) {\n        if (member.user) {\n          this.state.members[member.user.id] = member;\n        }\n      }\n    }\n  }\n\n  _disconnect() {\n    this._client.logger(\n      'info',\n      `channel:disconnect() - Disconnecting the channel ${this.cid}`,\n      {\n        tags: ['connection', 'channel'],\n        channel: this,\n      },\n    );\n\n    this.disconnected = true;\n    this.state.setIsUpToDate(false);\n  }\n}\n","import { UnknownType, UserResponse } from './types';\n\n/**\n * ClientState - A container class for the client state.\n */\nexport class ClientState<UserType = UnknownType> {\n  users: {\n    [key: string]: UserResponse<UserType>;\n  };\n  userChannelReferences: { [key: string]: { [key: string]: boolean } };\n  constructor() {\n    // show the status for a certain user...\n    // ie online, offline etc\n    this.users = {};\n    // store which channels contain references to the specified user...\n    this.userChannelReferences = {};\n  }\n\n  updateUsers(users: UserResponse<UserType>[]) {\n    for (const user of users) {\n      this.updateUser(user);\n    }\n  }\n\n  updateUser(user?: UserResponse<UserType>) {\n    if (user != null) {\n      this.users[user.id] = user;\n    }\n  }\n\n  updateUserReference(user: UserResponse<UserType>, channelID: string) {\n    if (user == null) {\n      return;\n    }\n    this.updateUser(user);\n    if (!this.userChannelReferences[user.id]) {\n      this.userChannelReferences[user.id] = {};\n    }\n    this.userChannelReferences[user.id][channelID] = true;\n  }\n\n  deleteAllChannelReference(channelID: string) {\n    for (const userID in this.userChannelReferences) {\n      delete this.userChannelReferences[userID][channelID];\n    }\n  }\n}\n","import WebSocket from 'isomorphic-ws';\nimport { chatCodes, sleep, retryInterval } from './utils';\nimport { TokenManager } from './token_manager';\nimport {\n  BaseDeviceFields,\n  ConnectAPIResponse,\n  ConnectionChangeEvent,\n  ConnectionOpen,\n  LiteralStringForUnion,\n  Logger,\n  UnknownType,\n  UserResponse,\n} from './types';\n\n// Type guards to check WebSocket error type\nconst isCloseEvent = (\n  res: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent,\n): res is WebSocket.CloseEvent => (res as WebSocket.CloseEvent).code !== undefined;\n\nconst isErrorEvent = (\n  res: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent,\n): res is WebSocket.ErrorEvent => (res as WebSocket.ErrorEvent).error !== undefined;\n\ntype Constructor<\n  ChannelType extends UnknownType = UnknownType,\n  CommandType extends string = LiteralStringForUnion,\n  UserType extends UnknownType = UnknownType\n> = {\n  apiKey: string;\n  authType: 'anonymous' | 'jwt';\n  clientID: string;\n  eventCallback: (event: ConnectionChangeEvent) => void;\n  logger: Logger | (() => void);\n  messageCallback: (messageEvent: WebSocket.MessageEvent) => void;\n  recoverCallback: (\n    open?: ConnectionOpen<ChannelType, CommandType, UserType>,\n  ) => Promise<void>;\n  tokenManager: TokenManager<UserType>;\n  user: UserResponse<UserType>;\n  userAgent: string;\n  userID: string;\n  wsBaseURL: string;\n  device?: BaseDeviceFields;\n};\n\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */\nexport class StableWSConnection<\n  ChannelType extends UnknownType = UnknownType,\n  CommandType extends string = LiteralStringForUnion,\n  UserType extends UnknownType = UnknownType\n> {\n  apiKey: Constructor<ChannelType, CommandType, UserType>['apiKey'];\n  authType: Constructor<ChannelType, CommandType, UserType>['authType'];\n  clientID: Constructor<ChannelType, CommandType, UserType>['clientID'];\n  eventCallback: Constructor<ChannelType, CommandType, UserType>['eventCallback'];\n  logger: Constructor<ChannelType, CommandType, UserType>['logger'];\n  messageCallback: Constructor<ChannelType, CommandType, UserType>['messageCallback'];\n  recoverCallback: Constructor<ChannelType, CommandType, UserType>['recoverCallback'];\n  tokenManager: Constructor<ChannelType, CommandType, UserType>['tokenManager'];\n  user: Constructor<ChannelType, CommandType, UserType>['user'];\n  userAgent: Constructor<ChannelType, CommandType, UserType>['userAgent'];\n  userID: Constructor<ChannelType, CommandType, UserType>['userID'];\n  wsBaseURL: Constructor<ChannelType, CommandType, UserType>['wsBaseURL'];\n  device: Constructor<ChannelType, CommandType, UserType>['device'];\n\n  connectionID?: string;\n  connectionOpen?: ConnectAPIResponse<ChannelType, CommandType, UserType>;\n  consecutiveFailures: number;\n  pingInterval: number;\n  healthCheckTimeoutRef?: NodeJS.Timeout;\n  isConnecting: boolean;\n  isHealthy: boolean;\n  isResolved?: boolean;\n  lastEvent: Date | null;\n  connectionCheckTimeout: number;\n  connectionCheckTimeoutRef?: NodeJS.Timeout;\n  rejectPromise?: (\n    reason?: Error & {\n      code?: string | number;\n      isWSFailure?: boolean;\n      StatusCode?: string | number;\n    },\n  ) => void;\n  resolvePromise?: (value: WebSocket.MessageEvent) => void;\n  totalFailures: number;\n  ws?: WebSocket;\n  wsID: number;\n\n  constructor({\n    apiKey,\n    authType,\n    clientID,\n    eventCallback,\n    logger,\n    messageCallback,\n    recoverCallback,\n    tokenManager,\n    user,\n    userAgent,\n    userID,\n    wsBaseURL,\n    device,\n  }: Constructor<ChannelType, CommandType, UserType>) {\n    this.wsBaseURL = wsBaseURL;\n    this.clientID = clientID;\n    this.userID = userID;\n    this.user = user;\n    this.authType = authType;\n    this.userAgent = userAgent;\n    this.apiKey = apiKey;\n    this.tokenManager = tokenManager;\n    this.device = device;\n    /** consecutive failures influence the duration of the timeout */\n    this.consecutiveFailures = 0;\n    /** keep track of the total number of failures */\n    this.totalFailures = 0;\n    /** We only make 1 attempt to reconnect at the same time.. */\n    this.isConnecting = false;\n    /** Boolean that indicates if we have a working connection to the server */\n    this.isHealthy = false;\n    /** Callback when the connection fails and recovers */\n    this.recoverCallback = recoverCallback;\n    this.messageCallback = messageCallback;\n    this.eventCallback = eventCallback;\n    this.logger = logger;\n    /** Incremented when a new WS connection is made */\n    this.wsID = 1;\n    /** Store the last event time for health checks */\n    this.lastEvent = null;\n    /** Send a health check message every 25 seconds */\n    this.pingInterval = 25 * 1000;\n    this.connectionCheckTimeout = this.pingInterval + 10 * 1000;\n    this._listenForConnectionChanges();\n  }\n\n  /**\n   * connect - Connect to the WS URL\n   *\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received\n   */\n  async connect() {\n    if (this.isConnecting) {\n      throw Error(\n        `You've called connect twice, can only attempt 1 connection at the time`,\n      );\n    }\n\n    try {\n      const healthCheck = await this._connect();\n      this.isConnecting = false;\n      this.consecutiveFailures = 0;\n\n      this.logger(\n        'info',\n        `connection:connect() - Established ws connection with healthcheck: ${healthCheck}`,\n        {\n          tags: ['connection'],\n        },\n      );\n    } catch (error) {\n      this.isConnecting = false;\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n\n      if (error.code === chatCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic()) {\n        this.logger(\n          'info',\n          'connection:connect() - WS failure due to expired token, so going to try to reload token and reconnect',\n          {\n            tags: ['connection'],\n          },\n        );\n        this._reconnect({ refreshToken: true });\n      } else if (!error.isWSFailure) {\n        // API rejected the connection and we should not retry\n        throw new Error(\n          JSON.stringify({\n            code: error.code,\n            StatusCode: error.StatusCode,\n            message: error.message,\n            isWSFailure: error.isWSFailure,\n          }),\n        );\n      }\n    }\n\n    return await this._waitForHealthy();\n  }\n\n  /**\n   * _waitForHealthy polls the promise connection to see if its resolved until it times out\n   * the default 15s timeout allows between 2~3 tries\n   * @param timeout duration(ms)\n   */\n  async _waitForHealthy(timeout = 15000) {\n    return Promise.race([\n      (async () => {\n        const interval = 50; // ms\n        for (let i = 0; i <= timeout; i += interval) {\n          try {\n            return await this.connectionOpen;\n          } catch (error) {\n            if (i === timeout) {\n              throw new Error(\n                JSON.stringify({\n                  code: error.code,\n                  StatusCode: error.StatusCode,\n                  message: error.message,\n                  isWSFailure: error.isWSFailure,\n                }),\n              );\n            }\n            await sleep(interval);\n          }\n        }\n      })(),\n      (async () => {\n        await sleep(timeout);\n        throw new Error(\n          JSON.stringify({\n            code: '',\n            StatusCode: '',\n            message: 'initial WS connection could not be established',\n            isWSFailure: true,\n          }),\n        );\n      })(),\n    ]);\n  }\n\n  _buildUrl = () => {\n    const params = {\n      user_id: this.user.id,\n      user_details: this.user,\n      user_token: this.tokenManager.getToken(),\n      server_determines_connection_id: true,\n      device: this.device,\n    };\n    const qs = encodeURIComponent(JSON.stringify(params));\n    const token = this.tokenManager.getToken();\n    return `${this.wsBaseURL}/connect?json=${qs}&api_key=${this.apiKey}&authorization=${token}&stream-auth-type=${this.authType}&X-Stream-Client=${this.userAgent}`;\n  };\n\n  /**\n   * disconnect - Disconnect the connection and doesn't recover...\n   *\n   */\n  disconnect(timeout?: number) {\n    this.logger(\n      'info',\n      `connection:disconnect() - Closing the websocket connection for wsID ${this.wsID}`,\n      {\n        tags: ['connection'],\n      },\n    );\n\n    this.wsID += 1;\n\n    // start by removing all the listeners\n    if (this.healthCheckTimeoutRef) {\n      clearInterval(this.healthCheckTimeoutRef);\n    }\n    if (this.connectionCheckTimeoutRef) {\n      clearInterval(this.connectionCheckTimeoutRef);\n    }\n\n    this._removeConnectionListeners();\n\n    this.isHealthy = false;\n\n    // remove ws handlers...\n    if (this.ws && this.ws.removeAllListeners) {\n      this.ws.removeAllListeners();\n    }\n\n    let isClosedPromise: Promise<void>;\n    // and finally close...\n    // Assigning to local here because we will remove it from this before the\n    // promise resolves.\n    const { ws } = this;\n    if (ws && ws.close && ws.readyState === ws.OPEN) {\n      isClosedPromise = new Promise((resolve) => {\n        const onclose = (event: WebSocket.CloseEvent) => {\n          this.logger(\n            'info',\n            `connection:disconnect() - resolving isClosedPromise ${\n              event ? 'with' : 'without'\n            } close frame`,\n            {\n              tags: ['connection'],\n              event,\n            },\n          );\n          resolve();\n        };\n\n        ws.onclose = onclose;\n        // In case we don't receive close frame websocket server in time,\n        // lets not wait for more than 1 seconds.\n        setTimeout(onclose, timeout != null ? timeout : 1000);\n      });\n\n      this.logger(\n        'info',\n        `connection:disconnect() - Manually closed connection by calling client.disconnect()`,\n        {\n          tags: ['connection'],\n        },\n      );\n\n      ws.close(\n        chatCodes.WS_CLOSED_SUCCESS,\n        'Manually closed connection by calling client.disconnect()',\n      );\n    } else {\n      this.logger(\n        'info',\n        `connection:disconnect() - ws connection doesn't exist or it is already closed.`,\n        {\n          tags: ['connection'],\n        },\n      );\n      isClosedPromise = Promise.resolve();\n    }\n\n    delete this.ws;\n\n    return isClosedPromise;\n  }\n\n  /**\n   * _connect - Connect to the WS endpoint\n   *\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received\n   */\n  async _connect() {\n    await this.tokenManager.tokenReady();\n    this._setupConnectionPromise();\n    const wsURL = this._buildUrl();\n    this.ws = new WebSocket(wsURL);\n    this.ws.onopen = this.onopen.bind(this, this.wsID);\n    this.ws.onclose = this.onclose.bind(this, this.wsID);\n    this.ws.onerror = this.onerror.bind(this, this.wsID);\n    this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n    const response = await this.connectionOpen;\n\n    if (response) {\n      this.connectionID = response.connection_id;\n\n      return response;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * _reconnect - Retry the connection to WS endpoint\n   *\n   * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available\n   *\n   * - `interval`\t{int}\t\t\tnumber of ms that function should wait before reconnecting\n   * - `refreshToken` {boolean}\treload/refresh user token be refreshed before attempting reconnection.\n   */\n  async _reconnect(\n    options: { interval?: number; refreshToken?: boolean } = {},\n  ): Promise<void> {\n    this.logger('info', 'connection:_reconnect() - Initiating the reconnect', {\n      tags: ['connection'],\n    });\n    // only allow 1 connection at the time\n    if (this.isConnecting || this.isHealthy) {\n      this.logger(\n        'info',\n        'connection:_reconnect() - Abort (1) since already connecting or healthy',\n        {\n          tags: ['connection'],\n        },\n      );\n      return;\n    }\n\n    // reconnect in case of on error or on close\n    // also reconnect if the health check cycle fails\n    let interval = options.interval;\n    if (!interval) {\n      interval = retryInterval(this.consecutiveFailures);\n    }\n    // reconnect, or try again after a little while...\n    await sleep(interval);\n\n    // Check once again if by some other call to _reconnect is active or connection is\n    // already restored, then no need to proceed.\n    if (this.isConnecting || this.isHealthy) {\n      this.logger(\n        'info',\n        'connection:_reconnect() - Abort (2) since already connecting or healthy',\n        {\n          tags: ['connection'],\n        },\n      );\n      return;\n    }\n\n    this.isConnecting = true;\n\n    // cleanup the old connection\n    this.logger('info', 'connection:_reconnect() - Destroying current WS connection', {\n      tags: ['connection'],\n    });\n\n    this._destroyCurrentWSConnection();\n\n    if (options.refreshToken) {\n      await this.tokenManager.loadToken();\n    }\n\n    try {\n      const open = await this._connect();\n      if (this.recoverCallback) {\n        this.logger('info', 'connection:_reconnect() - Waiting for recoverCallBack', {\n          tags: ['connection'],\n        });\n        await this.recoverCallback(open);\n        this.logger('info', 'connection:_reconnect() - Finished recoverCallBack', {\n          tags: ['connection'],\n        });\n      }\n      this.isConnecting = false;\n      this.consecutiveFailures = 0;\n    } catch (error) {\n      this.isConnecting = false;\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n      if (error.code === chatCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic()) {\n        this.logger(\n          'info',\n          'connection:_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect',\n          {\n            tags: ['connection'],\n          },\n        );\n\n        return this._reconnect({ refreshToken: true });\n      }\n\n      // reconnect on WS failures, don't reconnect if there is a code bug\n      if (error.isWSFailure) {\n        this.logger(\n          'info',\n          'connection:_reconnect() - WS failure, so going to try to reconnect',\n          {\n            tags: ['connection'],\n          },\n        );\n\n        this._reconnect();\n      }\n    }\n    this.logger('info', 'connection:_reconnect() - == END ==', {\n      tags: ['connection'],\n    });\n  }\n\n  /**\n   * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n   *\n   * @param {Event} event Event with type online or offline\n   *\n   */\n  onlineStatusChanged = (event: Event) => {\n    if (event.type === 'offline') {\n      // mark the connection as down\n      this.logger(\n        'info',\n        'connection:onlineStatusChanged() - Status changing to offline',\n        {\n          tags: ['connection'],\n        },\n      );\n      this._setHealth(false);\n    } else if (event.type === 'online') {\n      // retry right now...\n      // We check this.isHealthy, not sure if it's always\n      // smart to create a new WS connection if the old one is still up and running.\n      // it's possible we didn't miss any messages, so this process is just expensive and not needed.\n      this.logger(\n        'info',\n        `connection:onlineStatusChanged() - Status changing to online. isHealthy: ${this.isHealthy}`,\n        {\n          tags: ['connection'],\n        },\n      );\n      if (!this.isHealthy) {\n        this._reconnect({ interval: 10 });\n      }\n    }\n  };\n\n  onopen = (wsID: number) => {\n    if (this.wsID !== wsID) return;\n\n    this.logger('info', 'connection:onopen() - onopen callback', {\n      tags: ['connection'],\n      wsID,\n    });\n  };\n\n  onmessage = (wsID: number, event: WebSocket.MessageEvent) => {\n    if (this.wsID !== wsID) return;\n\n    const data = typeof event.data === 'string' ? JSON.parse(event.data) : null;\n\n    // we wait till the first message before we consider the connection open..\n    // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n    // after that a ws.onclose..\n    if (!this.isResolved && data) {\n      if (data.error != null) {\n        this.rejectPromise?.(this._errorFromWSEvent(data, false));\n        return;\n      } else {\n        this.resolvePromise?.(event);\n        // set healthy..\n        this._setHealth(true);\n      }\n    }\n\n    // trigger the event..\n    this.lastEvent = new Date();\n    this.logger('info', 'connection:onmessage() - onmessage callback', {\n      tags: ['connection'],\n      event,\n      wsID,\n    });\n\n    if (data && data.type === 'health.check') {\n      this.scheduleNextPing();\n    }\n\n    this.messageCallback(event);\n    this.scheduleConnectionCheck();\n  };\n\n  onclose = (wsID: number, event: WebSocket.CloseEvent) => {\n    this.logger('info', 'connection:onclose() - onclose callback - ' + event.code, {\n      tags: ['connection'],\n      event,\n      wsID,\n    });\n\n    if (this.wsID !== wsID) return;\n\n    if (event.code === chatCodes.WS_CLOSED_SUCCESS) {\n      // this is a permanent error raised by stream..\n      // usually caused by invalid auth details\n      const error = new Error(\n        `WS connection reject with error ${event.reason}`,\n      ) as Error & { reason?: string };\n      error.reason = event.reason;\n      this.rejectPromise?.(error);\n      this.logger(\n        'info',\n        `connection:onclose() - WS connection reject with error ${event.reason}`,\n        {\n          tags: ['connection'],\n          event,\n        },\n      );\n    } else {\n      this.consecutiveFailures += 1;\n      this.totalFailures += 1;\n      this._setHealth(false);\n\n      this.rejectPromise?.(this._errorFromWSEvent(event));\n\n      this.logger(\n        'info',\n        `connection:onclose() - WS connection closed. Calling reconnect ...`,\n        {\n          tags: ['connection'],\n          event,\n        },\n      );\n\n      // reconnect if its an abnormal failure\n      this._reconnect();\n    }\n  };\n\n  onerror = (wsID: number, event: WebSocket.ErrorEvent) => {\n    if (this.wsID !== wsID) return;\n\n    this.consecutiveFailures += 1;\n    this.totalFailures += 1;\n    this._setHealth(false);\n\n    this.rejectPromise?.(this._errorFromWSEvent(event));\n    this.logger('info', `connection:onerror() - WS connection resulted into error`, {\n      tags: ['connection'],\n      event,\n    });\n\n    this._reconnect();\n  };\n\n  /**\n   * _setHealth - Sets the connection to healthy or unhealthy.\n   * Broadcasts an event in case the connection status changed.\n   *\n   * @param {boolean} healthy boolean indicating if the connection is healthy or not\n   *\n   */\n  _setHealth = (healthy: boolean) => {\n    if (healthy && !this.isHealthy) {\n      // yes we are online:\n      this.isHealthy = true;\n      this.eventCallback({\n        type: 'connection.changed',\n        online: true,\n      });\n    }\n\n    if (!healthy && this.isHealthy) {\n      // bummer we are offline\n      this.isHealthy = false;\n      setTimeout(() => {\n        if (!this.isHealthy) {\n          this.eventCallback({\n            type: 'connection.changed',\n            online: false,\n          });\n        }\n      }, 5000);\n    }\n  };\n\n  /**\n   * _errorFromWSEvent - Creates an error object for the WS event\n   *\n   */\n  _errorFromWSEvent = (\n    event: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent,\n    isWSFailure = true,\n  ) => {\n    let code;\n    let statusCode;\n    let message;\n    if (isCloseEvent(event)) {\n      code = event.code;\n      statusCode = 'unknown';\n      message = event.reason;\n    }\n\n    if (isErrorEvent(event)) {\n      code = event.error.code;\n      statusCode = event.error.StatusCode;\n      message = event.error.message;\n    }\n\n    // Keeping this `warn` level log, to avoid cluttering of error logs from ws failures.\n    this.logger('warn', `connection:_errorFromWSEvent() - WS failed with code ${code}`, {\n      tags: ['connection'],\n      event,\n    });\n\n    const error = new Error(\n      `WS failed with code ${code} and reason - ${message}`,\n    ) as Error & {\n      code?: string | number;\n      isWSFailure?: boolean;\n      StatusCode?: string | number;\n    };\n    error.code = code;\n    /**\n     * StatusCode does not exist on any event types but has been left\n     * as is to preserve JS functionality during the TS implementation\n     */\n    error.StatusCode = statusCode;\n    error.isWSFailure = isWSFailure;\n    return error;\n  };\n\n  /**\n   * _listenForConnectionChanges - Adds an event listener for the browser going online or offline\n   *\n   */\n  _listenForConnectionChanges = () => {\n    if (\n      typeof window !== 'undefined' &&\n      window != null &&\n      window.addEventListener != null\n    ) {\n      window.addEventListener('offline', this.onlineStatusChanged);\n      window.addEventListener('online', this.onlineStatusChanged);\n    }\n  };\n\n  _removeConnectionListeners = () => {\n    if (\n      typeof window !== 'undefined' &&\n      window != null &&\n      window.addEventListener != null\n    ) {\n      window.removeEventListener('offline', this.onlineStatusChanged);\n      window.removeEventListener('online', this.onlineStatusChanged);\n    }\n  };\n\n  /**\n   * _destroyCurrentWSConnection - Removes the current WS connection\n   *\n   */\n  _destroyCurrentWSConnection() {\n    // increment the ID, meaning we will ignore all messages from the old\n    // ws connection from now on.\n    this.wsID += 1;\n\n    try {\n      if (this.ws && this.ws.removeAllListeners) {\n        this.ws.removeAllListeners();\n      }\n\n      if (this.ws && this.ws.close) {\n        this.ws.close();\n      }\n    } catch (e) {\n      // we don't care\n    }\n  }\n\n  /**\n   * _setupPromise - sets up the this.connectOpen promise\n   */\n  _setupConnectionPromise = () => {\n    const that = this;\n    this.isResolved = false;\n    /** a promise that is resolved once ws.open is called */\n    this.connectionOpen = new Promise<WebSocket.MessageEvent>(function (resolve, reject) {\n      that.resolvePromise = resolve;\n      that.rejectPromise = reject;\n    }).then(\n      (e) => {\n        if (e.data && typeof e.data === 'string') {\n          const data = JSON.parse(e.data) as ConnectionOpen<\n            ChannelType,\n            CommandType,\n            UserType\n          > & {\n            error?: unknown;\n          };\n          if (data && data.error != null) {\n            throw new Error(JSON.stringify(data.error));\n          }\n          return data;\n        } else {\n          return undefined;\n        }\n      },\n      (error) => {\n        throw error;\n      },\n    );\n  };\n\n  /**\n   * Schedules a next health check ping for websocket.\n   */\n  scheduleNextPing = () => {\n    if (this.healthCheckTimeoutRef) {\n      clearTimeout(this.healthCheckTimeoutRef);\n    }\n\n    // 30 seconds is the recommended interval (messenger uses this)\n    this.healthCheckTimeoutRef = setTimeout(() => {\n      // send the healthcheck.., server replies with a health check event\n      const data = [\n        {\n          type: 'health.check',\n          client_id: this.clientID,\n          user_id: this.userID,\n        },\n      ];\n      // try to send on the connection\n      try {\n        this.ws?.send(JSON.stringify(data));\n      } catch (e) {\n        // error will already be detected elsewhere\n      }\n    }, this.pingInterval);\n  };\n\n  /**\n   * scheduleConnectionCheck - schedules a check for time difference between last received event and now.\n   * If the difference is more than 35 seconds, it means our health check logic has failed and websocket needs\n   * to be reconnected.\n   */\n  scheduleConnectionCheck = () => {\n    if (this.connectionCheckTimeoutRef) {\n      clearTimeout(this.connectionCheckTimeoutRef);\n    }\n\n    this.connectionCheckTimeoutRef = setTimeout(() => {\n      const now = new Date();\n      if (\n        this.lastEvent &&\n        now.getTime() - this.lastEvent.getTime() > this.connectionCheckTimeout\n      ) {\n        this.logger('info', 'connection:scheduleConnectionCheck - going to reconnect', {\n          tags: ['connection'],\n        });\n        this._setHealth(false);\n        this._reconnect();\n      }\n    }, this.connectionCheckTimeout);\n  };\n}\n","export default null;","export default null;","import jwt, { Secret, SignOptions } from 'jsonwebtoken';\nimport crypto from 'crypto';\nimport { encodeBase64, decodeBase64 } from './base64';\nimport { UnknownType } from './types';\n\n/**\n * Creates the JWT token that can be used for a UserSession\n * @method JWTUserToken\n * @memberof signing\n * @private\n * @param {Secret} apiSecret - API Secret key\n * @param {string} userId - The user_id key in the JWT payload\n * @param {UnknownType} [extraData] - Extra that should be part of the JWT token\n * @param {SignOptions} [jwtOptions] - Options that can be past to jwt.sign\n * @return {string} JWT Token\n */\nexport function JWTUserToken(\n  apiSecret: Secret,\n  userId: string,\n  extraData: UnknownType = {},\n  jwtOptions: SignOptions = {},\n) {\n  if (typeof userId !== 'string') {\n    throw new TypeError('userId should be a string');\n  }\n\n  const payload: { user_id: string } & UnknownType = {\n    user_id: userId,\n    ...extraData,\n  };\n\n  // make sure we return a clear error when jwt is shimmed (ie. browser build)\n  if (jwt == null || jwt.sign == null) {\n    throw Error(\n      `Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.`,\n    );\n  }\n\n  const opts: SignOptions = Object.assign(\n    { algorithm: 'HS256', noTimestamp: true },\n    jwtOptions,\n  );\n\n  if (payload.iat) {\n    opts.noTimestamp = false;\n  }\n  return jwt.sign(payload, apiSecret, opts);\n}\n\nexport function JWTServerToken(apiSecret: Secret, jwtOptions: SignOptions = {}) {\n  const payload = {\n    server: true,\n  };\n\n  const opts: SignOptions = Object.assign(\n    { algorithm: 'HS256', noTimestamp: true },\n    jwtOptions,\n  );\n  return jwt.sign(payload, apiSecret, opts);\n}\n\nexport function UserFromToken(token: string) {\n  const fragments = token.split('.');\n  if (fragments.length !== 3) {\n    return '';\n  }\n  const b64Payload = fragments[1];\n  const payload = decodeBase64(b64Payload);\n  const data = JSON.parse(payload);\n  return data.user_id as string;\n}\n\n/**\n *\n * @param {string} userId the id of the user\n * @return {string}\n */\nexport function DevToken(userId: string) {\n  return [\n    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9', //{\"alg\": \"HS256\", \"typ\": \"JWT\"}\n    encodeBase64(JSON.stringify({ user_id: userId })),\n    'devtoken', // hardcoded signature\n  ].join('.');\n}\n\n/**\n *\n * @param {string} body the signed message\n * @param {string} secret the shared secret used to generate the signature (Stream API secret)\n * @param {string} signature the signature to validate\n * @return {boolean}\n */\nexport function CheckSignature(body: string, secret: string, signature: string) {\n  const key = Buffer.from(secret, 'ascii');\n  const hash = crypto.createHmac('sha256', key).update(body).digest('hex');\n  return hash === signature;\n}\n","import { Secret } from 'jsonwebtoken';\nimport { UserFromToken, JWTServerToken, JWTUserToken } from './signing';\nimport { isFunction } from './utils';\nimport { TokenOrProvider, UnknownType, UserResponse } from './types';\n\n/**\n * TokenManager\n *\n * Handles all the operations around user token.\n */\nexport class TokenManager<UserType extends UnknownType = UnknownType> {\n  loadTokenPromise: Promise<string> | null;\n  type: 'static' | 'provider';\n  secret?: Secret;\n  token?: string;\n  tokenProvider?: TokenOrProvider;\n  user?: UserResponse<UserType>;\n  /**\n   * Constructor\n   *\n   * @param {Secret} secret\n   */\n  constructor(secret?: Secret) {\n    this.loadTokenPromise = null;\n    if (secret) {\n      this.secret = secret;\n    }\n\n    this.type = 'static';\n\n    if (this.secret) {\n      this.token = JWTServerToken(this.secret);\n    }\n  }\n\n  /**\n   * Set the static string token or token provider.\n   * Token provider should return a token string or a promise which resolves to string token.\n   *\n   * @param {TokenOrProvider} tokenOrProvider\n   * @param {UserResponse<UserType>} user\n   */\n  setTokenOrProvider = async (\n    tokenOrProvider: TokenOrProvider,\n    user: UserResponse<UserType>,\n  ) => {\n    this.validateToken(tokenOrProvider, user);\n    this.user = user;\n\n    if (isFunction(tokenOrProvider)) {\n      this.tokenProvider = tokenOrProvider;\n      this.type = 'provider';\n    }\n\n    if (typeof tokenOrProvider === 'string') {\n      this.token = tokenOrProvider;\n      this.type = 'static';\n    }\n\n    if (!tokenOrProvider && this.user && this.secret) {\n      this.token = JWTUserToken(this.secret, user.id, {}, {});\n      this.type = 'static';\n    }\n\n    await this.loadToken();\n  };\n\n  /**\n   * Resets the token manager.\n   * Useful for client disconnection or switching user.\n   */\n  reset = () => {\n    this.token = undefined;\n    this.user = undefined;\n    this.loadTokenPromise = null;\n  };\n\n  // Validates the user token.\n  validateToken = (tokenOrProvider: TokenOrProvider, user: UserResponse<UserType>) => {\n    // allow empty token for anon user\n    if (user && user.anon && !tokenOrProvider) return;\n\n    // Don't allow empty token for non-server side client.\n    if (!this.secret && !tokenOrProvider) {\n      throw new Error('User token can not be empty');\n    }\n\n    if (\n      tokenOrProvider &&\n      typeof tokenOrProvider !== 'string' &&\n      !isFunction(tokenOrProvider)\n    ) {\n      throw new Error('user token should either be a string or a function');\n    }\n\n    if (typeof tokenOrProvider === 'string') {\n      // Allow empty token for anonymous users\n      if (user.anon && tokenOrProvider === '') return;\n\n      const tokenUserId = UserFromToken(tokenOrProvider);\n      if (\n        tokenOrProvider != null &&\n        (tokenUserId == null || tokenUserId === '' || tokenUserId !== user.id)\n      ) {\n        throw new Error(\n          'userToken does not have a user_id or is not matching with user.id',\n        );\n      }\n    }\n  };\n\n  // Resolves when token is ready. This function is simply to check if loadToken is in progress, in which\n  // case a function should wait.\n  tokenReady = () => this.loadTokenPromise;\n\n  // Fetches a token from tokenProvider function and sets in tokenManager.\n  // In case of static token, it will simply resolve to static token.\n  loadToken = () => {\n    // eslint-disable-next-line no-async-promise-executor\n    this.loadTokenPromise = new Promise(async (resolve) => {\n      if (this.type === 'static') {\n        return resolve(this.token as string);\n      }\n\n      if (this.tokenProvider && typeof this.tokenProvider !== 'string') {\n        this.token = await this.tokenProvider();\n        resolve(this.token);\n      }\n    });\n\n    return this.loadTokenPromise;\n  };\n\n  // Returns a current token\n  getToken = () => {\n    if (this.token) {\n      return this.token;\n    }\n\n    if (this.user && this.user.anon && !this.token) {\n      return this.token;\n    }\n\n    if (this.secret) {\n      return JWTServerToken(this.secret);\n    }\n\n    throw new Error(\n      `Both secret and user tokens are not set. Either client.connectUser wasn't called or client.disconnect was called`,\n    );\n  };\n\n  isStatic = () => this.type === 'static';\n}\n","/* eslint no-unused-vars: \"off\" */\n/* global process */\n\nimport axios, { AxiosRequestConfig, AxiosInstance, AxiosResponse } from 'axios';\nimport https from 'https';\nimport WebSocket from 'isomorphic-ws';\n\nimport { Channel } from './channel';\nimport { ClientState } from './client_state';\nimport { StableWSConnection } from './connection';\nimport { isValidEventType } from './events';\nimport { JWTUserToken, DevToken, CheckSignature } from './signing';\nimport { TokenManager } from './token_manager';\nimport {\n  isFunction,\n  isOwnUserBaseProperty,\n  addFileToFormData,\n  chatCodes,\n  normalizeQuerySort,\n  randomId,\n  sleep,\n  retryInterval,\n} from './utils';\n\nimport {\n  APIResponse,\n  AppSettings,\n  AppSettingsAPIResponse,\n  BaseDeviceFields,\n  BannedUsersFilters,\n  BannedUsersPaginationOptions,\n  BannedUsersResponse,\n  BannedUsersSort,\n  BanUserOptions,\n  BlockList,\n  BlockListResponse,\n  ChannelAPIResponse,\n  ChannelData,\n  ChannelFilters,\n  ChannelMute,\n  ChannelOptions,\n  ChannelSort,\n  ChannelStateOptions,\n  CheckPushResponse,\n  CheckSQSResponse,\n  Configs,\n  ConnectAPIResponse,\n  ConnectionChangeEvent,\n  CreateChannelOptions,\n  CreateChannelResponse,\n  CreateCommandOptions,\n  CreateCommandResponse,\n  CustomPermissionOptions,\n  DeleteCommandResponse,\n  Device,\n  EndpointName,\n  Event,\n  EventHandler,\n  ExportChannelRequest,\n  ExportChannelResponse,\n  ExportChannelStatusResponse,\n  MessageFlagsFilters,\n  MessageFlagsPaginationOptions,\n  MessageFlagsResponse,\n  FlagMessageResponse,\n  FlagUserResponse,\n  GetChannelTypeResponse,\n  GetCommandResponse,\n  GetRateLimitsResponse,\n  ListChannelResponse,\n  ListCommandsResponse,\n  LiteralStringForUnion,\n  Logger,\n  MarkAllReadOptions,\n  Message,\n  MessageFilters,\n  MessageResponse,\n  Mute,\n  MuteUserOptions,\n  MuteUserResponse,\n  OwnUserResponse,\n  PartialMessageUpdate,\n  PartialUserUpdate,\n  PermissionAPIResponse,\n  PermissionsAPIResponse,\n  ReactionResponse,\n  SearchOptions,\n  SearchPayload,\n  SearchAPIResponse,\n  SendFileAPIResponse,\n  StreamChatOptions,\n  TestPushDataInput,\n  TestSQSDataInput,\n  TokenOrProvider,\n  UnBanUserOptions,\n  UnknownType,\n  UpdateChannelOptions,\n  UpdateChannelResponse,\n  UpdateCommandOptions,\n  UpdateCommandResponse,\n  UpdatedMessage,\n  UpdateMessageAPIResponse,\n  UserCustomEvent,\n  UserFilters,\n  UserOptions,\n  UserResponse,\n  UserSort,\n  SearchMessageSortBase,\n  SegmentData,\n  Segment,\n  Campaign,\n  CampaignData,\n} from './types';\n\nfunction isString(x: unknown): x is string {\n  return typeof x === 'string' || x instanceof String;\n}\n\nexport class StreamChat<\n  AttachmentType extends UnknownType = UnknownType,\n  ChannelType extends UnknownType = UnknownType,\n  CommandType extends string = LiteralStringForUnion,\n  EventType extends UnknownType = UnknownType,\n  MessageType extends UnknownType = UnknownType,\n  ReactionType extends UnknownType = UnknownType,\n  UserType extends UnknownType = UnknownType\n> {\n  private static _instance?: unknown | StreamChat; // type is undefined|StreamChat, unknown is due to TS limitations with statics\n\n  _user?: OwnUserResponse<ChannelType, CommandType, UserType> | UserResponse<UserType>;\n  activeChannels: {\n    [key: string]: Channel<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >;\n  };\n  anonymous: boolean;\n  axiosInstance: AxiosInstance;\n  baseURL?: string;\n  browser: boolean;\n  cleaningIntervalRef?: NodeJS.Timeout;\n  clientID?: string;\n  configs: Configs<CommandType>;\n  connecting?: boolean;\n  connectionID?: string;\n  failures?: number;\n  key: string;\n  listeners: {\n    [key: string]: Array<\n      (\n        event: Event<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >,\n      ) => void\n    >;\n  };\n  logger: Logger;\n  /**\n   * When network is recovered, we re-query the active channels on client. But in single query, you can recover\n   * only 30 channels. So its not guaranteed that all the channels in activeChannels object have updated state.\n   * Thus in UI sdks, state recovery is managed by components themselves, they don't rely on js client for this.\n   *\n   * `recoverStateOnReconnect` parameter can be used in such cases, to disable state recovery within js client.\n   * When false, user/consumer of this client will need to make sure all the channels present on UI by\n   * manually calling queryChannels endpoint.\n   */\n  recoverStateOnReconnect?: boolean;\n  mutedChannels: ChannelMute<ChannelType, CommandType, UserType>[];\n  mutedUsers: Mute<UserType>[];\n  node: boolean;\n  options: StreamChatOptions;\n  secret?: string;\n  setUserPromise: ConnectAPIResponse<ChannelType, CommandType, UserType> | null;\n  state: ClientState<UserType>;\n  tokenManager: TokenManager<UserType>;\n  user?: OwnUserResponse<ChannelType, CommandType, UserType> | UserResponse<UserType>;\n  userAgent?: string;\n  userID?: string;\n  wsBaseURL?: string;\n  wsConnection: StableWSConnection<ChannelType, CommandType, UserType> | null;\n  wsPromise: ConnectAPIResponse<ChannelType, CommandType, UserType> | null;\n  consecutiveFailures: number;\n\n  /**\n   * Initialize a client\n   *\n   * **Only use constructor for advanced usages. It is strongly advised to use `StreamChat.getInstance()` instead of `new StreamChat()` to reduce integration issues due to multiple WebSocket connections**\n   * @param {string} key - the api key\n   * @param {string} [secret] - the api secret\n   * @param {StreamChatOptions} [options] - additional options, here you can pass custom options to axios instance\n   * @param {boolean} [options.browser] - enforce the client to be in browser mode\n   * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n   * @param {Logger} [options.Logger] - custom logger\n   * @param {number} [options.timeout] - default to 3000\n   * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n   * @example <caption>initialize the client in user mode</caption>\n   * new StreamChat('api_key')\n   * @example <caption>initialize the client in user mode with options</caption>\n   * new StreamChat('api_key', { warmUp:true, timeout:5000 })\n   * @example <caption>secret is optional and only used in server side mode</caption>\n   * new StreamChat('api_key', \"secret\", { httpsAgent: customAgent })\n   */\n  constructor(key: string, options?: StreamChatOptions);\n  constructor(key: string, secret?: string, options?: StreamChatOptions);\n  constructor(\n    key: string,\n    secretOrOptions?: StreamChatOptions | string,\n    options?: StreamChatOptions,\n  ) {\n    // set the key\n    this.key = key;\n    this.listeners = {};\n    this.state = new ClientState<UserType>();\n    // a list of channels to hide ws events from\n    this.mutedChannels = [];\n    this.mutedUsers = [];\n\n    // set the secret\n    if (secretOrOptions && isString(secretOrOptions)) {\n      this.secret = secretOrOptions;\n    }\n\n    // set the options... and figure out defaults...\n    const inputOptions = options\n      ? options\n      : secretOrOptions && !isString(secretOrOptions)\n      ? secretOrOptions\n      : {};\n\n    this.browser =\n      typeof inputOptions.browser !== 'undefined'\n        ? inputOptions.browser\n        : typeof window !== 'undefined';\n    this.node = !this.browser;\n\n    this.options = {\n      timeout: 3000,\n      withCredentials: false, // making sure cookies are not sent\n      warmUp: false,\n      recoverStateOnReconnect: true,\n      ...inputOptions,\n    };\n\n    if (this.node && !this.options.httpsAgent) {\n      this.options.httpsAgent = new https.Agent({\n        keepAlive: true,\n        keepAliveMsecs: 3000,\n      });\n    }\n\n    this.axiosInstance = axios.create(this.options);\n\n    this.setBaseURL(this.options.baseURL || 'https://chat-us-east-1.stream-io-api.com');\n\n    if (typeof process !== 'undefined' && process.env.STREAM_LOCAL_TEST_RUN) {\n      this.setBaseURL('http://localhost:3030');\n    }\n\n    if (typeof process !== 'undefined' && process.env.STREAM_LOCAL_TEST_HOST) {\n      this.setBaseURL('http://' + process.env.STREAM_LOCAL_TEST_HOST);\n    }\n\n    // WS connection is initialized when setUser is called\n    this.wsConnection = null;\n    this.wsPromise = null;\n    this.setUserPromise = null;\n    // keeps a reference to all the channels that are in use\n    this.activeChannels = {};\n    // mapping between channel groups and configs\n    this.configs = {};\n    this.anonymous = false;\n\n    // If its a server-side client, then lets initialize the tokenManager, since token will be\n    // generated from secret.\n    this.tokenManager = new TokenManager(this.secret);\n    this.consecutiveFailures = 0;\n\n    /**\n     * logger function should accept 3 parameters:\n     * @param logLevel string\n     * @param message   string\n     * @param extraData object\n     *\n     * e.g.,\n     * const client = new StreamChat('api_key', {}, {\n     * \t\tlogger = (logLevel, message, extraData) => {\n     * \t\t\tconsole.log(message);\n     * \t\t}\n     * })\n     *\n     * extraData contains tags array attached to log message. Tags can have one/many of following values:\n     * 1. api\n     * 2. api_request\n     * 3. api_response\n     * 4. client\n     * 5. channel\n     * 6. connection\n     * 7. event\n     *\n     * It may also contains some extra data, some examples have been mentioned below:\n     * 1. {\n     * \t\ttags: ['api', 'api_request', 'client'],\n     * \t\turl: string,\n     * \t\tpayload: object,\n     * \t\tconfig: object\n     * }\n     * 2. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\tresponse: object\n     * }\n     * 3. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\terror: object\n     * }\n     * 4. {\n     * \t\ttags: ['event', 'client'],\n     * \t\tevent: object\n     * }\n     * 5. {\n     * \t\ttags: ['channel'],\n     * \t\tchannel: object\n     * }\n     */\n    this.logger = isFunction(inputOptions.logger) ? inputOptions.logger : () => null;\n    this.recoverStateOnReconnect = this.options.recoverStateOnReconnect;\n  }\n\n  /**\n   * Get a client instance\n   *\n   * This function always returns the same Client instance to avoid issues raised by multiple Client and WS connections\n   *\n   * **After the first call, the client configuration will not change if the key or options parameters change**\n   *\n   * @param {string} key - the api key\n   * @param {string} [secret] - the api secret\n   * @param {StreamChatOptions} [options] - additional options, here you can pass custom options to axios instance\n   * @param {boolean} [options.browser] - enforce the client to be in browser mode\n   * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n   * @param {Logger} [options.Logger] - custom logger\n   * @param {number} [options.timeout] - default to 3000\n   * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n   * @example <caption>initialize the client in user mode</caption>\n   * StreamChat.getInstance('api_key')\n   * @example <caption>initialize the client in user mode with options</caption>\n   * StreamChat.getInstance('api_key', { timeout:5000 })\n   * @example <caption>secret is optional and only used in server side mode</caption>\n   * StreamChat.getInstance('api_key', \"secret\", { httpsAgent: customAgent })\n   */\n  public static getInstance<\n    AttachmentType extends UnknownType = UnknownType,\n    ChannelType extends UnknownType = UnknownType,\n    CommandType extends string = LiteralStringForUnion,\n    EventType extends UnknownType = UnknownType,\n    MessageType extends UnknownType = UnknownType,\n    ReactionType extends UnknownType = UnknownType,\n    UserType extends UnknownType = UnknownType\n  >(\n    key: string,\n    options?: StreamChatOptions,\n  ): StreamChat<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  >;\n  public static getInstance<\n    AttachmentType extends UnknownType = UnknownType,\n    ChannelType extends UnknownType = UnknownType,\n    CommandType extends string = LiteralStringForUnion,\n    EventType extends UnknownType = UnknownType,\n    MessageType extends UnknownType = UnknownType,\n    ReactionType extends UnknownType = UnknownType,\n    UserType extends UnknownType = UnknownType\n  >(\n    key: string,\n    secret?: string,\n    options?: StreamChatOptions,\n  ): StreamChat<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  >;\n  public static getInstance<\n    AttachmentType extends UnknownType = UnknownType,\n    ChannelType extends UnknownType = UnknownType,\n    CommandType extends string = LiteralStringForUnion,\n    EventType extends UnknownType = UnknownType,\n    MessageType extends UnknownType = UnknownType,\n    ReactionType extends UnknownType = UnknownType,\n    UserType extends UnknownType = UnknownType\n  >(\n    key: string,\n    secretOrOptions?: StreamChatOptions | string,\n    options?: StreamChatOptions,\n  ): StreamChat<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  > {\n    if (!StreamChat._instance) {\n      if (typeof secretOrOptions === 'string') {\n        StreamChat._instance = new StreamChat<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >(key, secretOrOptions, options);\n      } else {\n        StreamChat._instance = new StreamChat<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >(key, secretOrOptions);\n      }\n    }\n\n    return StreamChat._instance as StreamChat<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >;\n  }\n\n  devToken(userID: string) {\n    return DevToken(userID);\n  }\n\n  getAuthType() {\n    return this.anonymous ? 'anonymous' : 'jwt';\n  }\n\n  setBaseURL(baseURL: string) {\n    this.baseURL = baseURL;\n    this.wsBaseURL = this.baseURL.replace('http', 'ws').replace(':3030', ':8800');\n  }\n\n  _hasConnectionID = () => Boolean(this.wsConnection?.connectionID);\n\n  /**\n   * connectUser - Set the current user and open a WebSocket connection\n   *\n   * @param {OwnUserResponse<ChannelType, CommandType, UserType> | UserResponse<UserType>} user Data about this user. IE {name: \"john\"}\n   * @param {TokenOrProvider} userTokenOrProvider Token or provider\n   *\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Returns a promise that resolves when the connection is setup\n   */\n  connectUser = async (\n    user: OwnUserResponse<ChannelType, CommandType, UserType> | UserResponse<UserType>,\n    userTokenOrProvider: TokenOrProvider,\n  ) => {\n    if (!user.id) {\n      throw new Error('The \"id\" field on the user is missing');\n    }\n\n    /**\n     * Calling connectUser multiple times is potentially the result of a  bad integration, however,\n     * If the user id remains the same we don't throw error\n     */\n    if (this.userID === user.id && this.setUserPromise) {\n      console.warn(\n        'Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.',\n      );\n      return this.setUserPromise;\n    }\n\n    if (this.userID) {\n      throw new Error(\n        'Use client.disconnect() before trying to connect as a different user. connectUser was called twice.',\n      );\n    }\n\n    if (\n      (this._isUsingServerAuth() || this.node) &&\n      !this.options.allowServerSideConnect\n    ) {\n      console.warn(\n        'Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.',\n      );\n    }\n\n    // we generate the client id client side\n    this.userID = user.id;\n    this.anonymous = false;\n\n    const setTokenPromise = this._setToken(user, userTokenOrProvider);\n    this._setUser(user);\n\n    const wsPromise = this.openConnection();\n\n    this.setUserPromise = Promise.all([setTokenPromise, wsPromise]).then(\n      (result) => result[1], // We only return connection promise;\n    );\n\n    try {\n      return await this.setUserPromise;\n    } catch (err) {\n      // cleanup client to allow the user to retry connectUser again\n      this.disconnectUser();\n      throw err;\n    }\n  };\n\n  /**\n   * @deprecated Please use connectUser() function instead. Its naming is more consistent with its functionality.\n   *\n   * setUser - Set the current user and open a WebSocket connection\n   *\n   * @param {OwnUserResponse<ChannelType, CommandType, UserType> | UserResponse<UserType>} user Data about this user. IE {name: \"john\"}\n   * @param {TokenOrProvider} userTokenOrProvider Token or provider\n   *\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Returns a promise that resolves when the connection is setup\n   */\n  setUser = this.connectUser;\n\n  _setToken = (user: UserResponse<UserType>, userTokenOrProvider: TokenOrProvider) =>\n    this.tokenManager.setTokenOrProvider(userTokenOrProvider, user);\n\n  _setUser(\n    user: OwnUserResponse<ChannelType, CommandType, UserType> | UserResponse<UserType>,\n  ) {\n    /**\n     * This one is used by the frontend. This is a copy of the current user object stored on backend.\n     * It contains reserved properties and own user properties which are not present in `this._user`.\n     */\n    this.user = user;\n    // this one is actually used for requests. This is a copy of current user provided to `connectUser` function.\n    this._user = { ...user };\n  }\n\n  /**\n   * Disconnects the websocket connection, without removing the user set on client.\n   * client.closeConnection will not trigger default auto-retry mechanism for reconnection. You need\n   * to call client.openConnection to reconnect to websocket.\n   *\n   * This is mainly useful on mobile side. You can only receive push notifications\n   * if you don't have active websocket connection.\n   * So when your app goes to background, you can call `client.closeConnection`.\n   * And when app comes back to foreground, call `client.openConnection`.\n   *\n   * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming succesful disconnection.\n   *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n   */\n  closeConnection = (timeout?: number) => {\n    if (this.cleaningIntervalRef != null) {\n      clearInterval(this.cleaningIntervalRef);\n      this.cleaningIntervalRef = undefined;\n    }\n\n    if (!this.wsConnection) {\n      return Promise.resolve();\n    }\n\n    return this.wsConnection.disconnect(timeout);\n  };\n\n  /**\n   * Creates a new WebSocket connection with the current user. Returns empty promise, if there is an active connection\n   */\n  openConnection = async () => {\n    if (!this.userID) {\n      throw Error(\n        'User is not set on client, use client.connectUser or client.connectAnonymousUser instead',\n      );\n    }\n\n    if (this.wsConnection?.isHealthy && this._hasConnectionID()) {\n      this.logger(\n        'info',\n        'client:openConnection() - openConnection called twice, healthy connection already exists',\n        {\n          tags: ['connection', 'client'],\n        },\n      );\n\n      return Promise.resolve();\n    }\n\n    this.clientID = `${this.userID}--${randomId()}`;\n    this.wsPromise = this.connect();\n    this._startCleaning();\n    return this.wsPromise;\n  };\n\n  /**\n   * @deprecated Please use client.openConnction instead.\n   * @private\n   *\n   * Creates a new websocket connection with current user.\n   */\n  _setupConnection = this.openConnection;\n\n  /**\n\t * updateAppSettings - updates application settings\n\t *\n\t * @param {AppSettings} options App settings.\n\t * \t\tIE: {\n\t  \t\t\t\"apn_config\": {\n\t\t\t\t\t\"auth_type\": \"token\",\n\t\t\t\t\t\"auth_key\": fs.readFileSync(\n\t\t\t\t\t\t'./apn-push-auth-key.p8',\n\t\t\t\t\t\t'utf-8',\n\t\t\t\t\t),\n\t\t\t\t\t\"key_id\": \"keyid\",\n\t\t\t\t\t\"team_id\": \"teamid\", //either ALL these 3\n\t\t\t\t\t\"notification_template\": \"notification handlebars template\",\n\t\t\t\t\t\"bundle_id\": \"com.apple.your.app\",\n\t\t\t\t\t\"development\": true\n\t\t\t\t},\n\t\t\t\t\"firebase_config\": {\n\t\t\t\t\t\"server_key\": \"server key from fcm\",\n\t\t\t\t\t\"notification_template\": \"notification handlebars template\"\n\t\t\t\t\t\"data_template\": \"data handlebars template\"\n\t\t\t\t},\n\t\t\t\t\"webhook_url\": \"https://acme.com/my/awesome/webhook/\"\n\t\t\t}\n\t */\n  async updateAppSettings(options: AppSettings) {\n    if (options.apn_config?.p12_cert) {\n      options.apn_config.p12_cert = Buffer.from(options.apn_config.p12_cert).toString(\n        'base64',\n      );\n    }\n    return await this.patch<APIResponse>(this.baseURL + '/app', options);\n  }\n\n  _normalizeDate = (before: Date | string | null): string | null => {\n    if (before instanceof Date) {\n      before = before.toISOString();\n    }\n\n    if (before === '') {\n      throw new Error(\n        \"Don't pass blank string for since, use null instead if resetting the token revoke\",\n      );\n    }\n\n    return before;\n  };\n\n  /**\n   * Revokes all tokens on application level issued before given time\n   */\n  async revokeTokens(before: Date | string | null) {\n    return await this.updateAppSettings({\n      revoke_tokens_issued_before: this._normalizeDate(before),\n    });\n  }\n\n  /**\n   * Revokes token for a user issued before given time\n   */\n  async revokeUserToken(userID: string, before?: Date | string | null) {\n    return await this.revokeUsersToken([userID], before);\n  }\n\n  /**\n   * Revokes tokens for a list of users issued before given time\n   */\n  async revokeUsersToken(userIDs: string[], before?: Date | string | null) {\n    if (before === undefined) {\n      before = new Date().toISOString();\n    } else {\n      before = this._normalizeDate(before);\n    }\n\n    const users: PartialUserUpdate<UserType>[] = [];\n    for (const userID of userIDs) {\n      users.push({\n        id: userID,\n        set: <Partial<UserResponse<UserType>>>{\n          revoke_tokens_issued_before: before,\n        },\n      });\n    }\n\n    return await this.partialUpdateUsers(users);\n  }\n\n  /**\n   * getAppSettings - retrieves application settings\n   */\n  async getAppSettings() {\n    return await this.get<AppSettingsAPIResponse<CommandType>>(this.baseURL + '/app');\n  }\n\n  /**\n\t * testPushSettings - Tests the push settings for a user with a random chat message and the configured push templates\n\t *\n\t * @param {string} userID User ID. If user has no devices, it will error\n\t * @param {TestPushDataInput} [data] Overrides for push templates/message used\n\t * \t\tIE: {\n\t\t\t\t  messageID: 'id-of-message',//will error if message does not exist\n\t\t\t\t  apnTemplate: '{}', //if app doesn't have apn configured it will error\n\t\t\t\t  firebaseTemplate: '{}', //if app doesn't have firebase configured it will error\n\t\t\t\t  firebaseDataTemplate: '{}', //if app doesn't have firebase configured it will error\n\t\t\t\t  skipDevices: true, // skip config/device checks and sending to real devices\n\t\t\t}\n\t */\n  async testPushSettings(userID: string, data: TestPushDataInput = {}) {\n    return await this.post<CheckPushResponse>(this.baseURL + '/check_push', {\n      user_id: userID,\n      ...(data.messageID ? { message_id: data.messageID } : {}),\n      ...(data.apnTemplate ? { apn_template: data.apnTemplate } : {}),\n      ...(data.firebaseTemplate ? { firebase_template: data.firebaseTemplate } : {}),\n      ...(data.firebaseDataTemplate\n        ? { firebase_data_template: data.firebaseDataTemplate }\n        : {}),\n      ...(data.skipDevices ? { skip_devices: true } : {}),\n    });\n  }\n\n  /**\n   * testSQSSettings - Tests that the given or configured SQS configuration is valid\n   *\n   * @param {string} userID User ID. If user has no devices, it will error\n   * @param {TestPushDataInput} [data] Overrides for push templates/message used\n   * \t\tIE: {\n\t\t\t\t  messageID: 'id-of-message',//will error if message does not exist\n\t\t\t\t  apnTemplate: '{}', //if app doesn't have apn configured it will error\n\t\t\t\t  firebaseTemplate: '{}', //if app doesn't have firebase configured it will error\n\t\t\t\t  firebaseDataTemplate: '{}', //if app doesn't have firebase configured it will error\n\t\t\t}\n   */\n  async testSQSSettings(data: TestSQSDataInput = {}) {\n    return await this.post<CheckSQSResponse>(this.baseURL + '/check_sqs', data);\n  }\n\n  /**\n   * Disconnects the websocket and removes the user from client.\n   *\n   * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n   *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n   */\n  disconnectUser = async (timeout?: number) => {\n    this.logger('info', 'client:disconnect() - Disconnecting the client', {\n      tags: ['connection', 'client'],\n    });\n\n    // remove the user specific fields\n    delete this.user;\n    delete this._user;\n    delete this.userID;\n\n    this.anonymous = false;\n\n    const closePromise = this.closeConnection(timeout);\n\n    for (const channel of Object.values(this.activeChannels)) {\n      channel._disconnect();\n    }\n\n    // ensure we no longer return inactive channels\n    this.activeChannels = {};\n    // reset client state\n    this.state = new ClientState();\n    // reset token manager\n    this.tokenManager.reset();\n\n    // close the WS connection\n    return closePromise;\n  };\n\n  /**\n   *\n   * @deprecated Please use client.disconnectUser instead.\n   *\n   * Disconnects the websocket and removes the user from client.\n   */\n  disconnect = this.disconnectUser;\n\n  /**\n   * connectAnonymousUser - Set an anonymous user and open a WebSocket connection\n   */\n  connectAnonymousUser = () => {\n    if (\n      (this._isUsingServerAuth() || this.node) &&\n      !this.options.allowServerSideConnect\n    ) {\n      console.warn(\n        'Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.',\n      );\n    }\n\n    this.anonymous = true;\n    this.userID = randomId();\n    const anonymousUser = {\n      id: this.userID,\n      anon: true,\n    } as UserResponse<UserType>;\n\n    this._setToken(anonymousUser, '');\n    this._setUser(anonymousUser);\n\n    return this._setupConnection();\n  };\n\n  /**\n   * @deprecated Please use connectAnonymousUser. Its naming is more consistent with its functionality.\n   */\n  setAnonymousUser = this.connectAnonymousUser;\n\n  /**\n   * setGuestUser - Setup a temporary guest user\n   *\n   * @param {UserResponse<UserType>} user Data about this user. IE {name: \"john\"}\n   *\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Returns a promise that resolves when the connection is setup\n   */\n  async setGuestUser(user: UserResponse<UserType>) {\n    let response: { access_token: string; user: UserResponse<UserType> } | undefined;\n    this.anonymous = true;\n    try {\n      response = await this.post<\n        APIResponse & { access_token: string; user: UserResponse<UserType> }\n      >(this.baseURL + '/guest', { user });\n    } catch (e) {\n      this.anonymous = false;\n      throw e;\n    }\n    this.anonymous = false;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { created_at, updated_at, last_active, online, ...guestUser } = response.user;\n    return await this.connectUser(\n      guestUser as UserResponse<UserType>,\n      response.access_token,\n    );\n  }\n\n  /**\n   * createToken - Creates a token to authenticate this user. This function is used server side.\n   * The resulting token should be passed to the client side when the users registers or logs in\n   *\n   * @param {string} userID The User ID\n   * @param {number} [exp] The expiration time for the token expressed in the number of seconds since the epoch\n   *\n   * @return {string} Returns a token\n   */\n  createToken(userID: string, exp?: number, iat?: number) {\n    if (this.secret == null) {\n      throw Error(`tokens can only be created server-side using the API Secret`);\n    }\n    const extra: { exp?: number; iat?: number } = {};\n\n    if (exp) {\n      extra.exp = exp;\n    }\n\n    if (iat) {\n      extra.iat = iat;\n    }\n\n    return JWTUserToken(this.secret, userID, extra, {});\n  }\n\n  /**\n   * on - Listen to events on all channels and users your watching\n   *\n   * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n   * or\n   * client.on(event => {console.log(event.type)})\n   *\n   * @param {EventHandler<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType> | string} callbackOrString  The event type to listen for (optional)\n   * @param {EventHandler<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>} [callbackOrNothing] The callback to call\n   *\n   * @return {{ unsubscribe: () => void }} Description\n   */\n  on(\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): { unsubscribe: () => void };\n  on(\n    eventType: string,\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): { unsubscribe: () => void };\n  on(\n    callbackOrString:\n      | EventHandler<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n      | string,\n    callbackOrNothing?: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): { unsubscribe: () => void } {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const valid = isValidEventType(key);\n    if (!valid) {\n      throw Error(`Invalid event type ${key}`);\n    }\n    const callback = callbackOrNothing\n      ? callbackOrNothing\n      : (callbackOrString as EventHandler<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >);\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n    this.logger('info', `Attaching listener for ${key} event`, {\n      tags: ['event', 'client'],\n    });\n    this.listeners[key].push(callback);\n    return {\n      unsubscribe: () => {\n        this.logger('info', `Removing listener for ${key} event`, {\n          tags: ['event', 'client'],\n        });\n\n        this.listeners[key] = this.listeners[key].filter((el) => el !== callback);\n      },\n    };\n  }\n\n  /**\n   * off - Remove the event handler\n   *\n   */\n  off(\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): void;\n  off(\n    eventType: string,\n    callback: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ): void;\n  off(\n    callbackOrString:\n      | EventHandler<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n      | string,\n    callbackOrNothing?: EventHandler<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const valid = isValidEventType(key);\n    if (!valid) {\n      throw Error(`Invalid event type ${key}`);\n    }\n    const callback = callbackOrNothing\n      ? callbackOrNothing\n      : (callbackOrString as EventHandler<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >);\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n\n    this.logger('info', `Removing listener for ${key} event`, {\n      tags: ['event', 'client'],\n    });\n    this.listeners[key] = this.listeners[key].filter((value) => value !== callback);\n  }\n\n  _logApiRequest(\n    type: string,\n    url: string,\n    data: unknown,\n    config: AxiosRequestConfig & {\n      config?: AxiosRequestConfig & { maxBodyLength?: number };\n    },\n  ) {\n    this.logger('info', `client: ${type} - Request - ${url}`, {\n      tags: ['api', 'api_request', 'client'],\n      url,\n      payload: data,\n      config,\n    });\n  }\n\n  _logApiResponse<T>(type: string, url: string, response: AxiosResponse<T>) {\n    this.logger(\n      'info',\n      `client:${type} - Response - url: ${url} > status ${response.status}`,\n      {\n        tags: ['api', 'api_response', 'client'],\n        url,\n        response,\n      },\n    );\n  }\n\n  _logApiError(type: string, url: string, error: unknown) {\n    this.logger('error', `client:${type} - Error - url: ${url}`, {\n      tags: ['api', 'api_response', 'client'],\n      url,\n      error,\n    });\n  }\n\n  doAxiosRequest = async <T>(\n    type: string,\n    url: string,\n    data?: unknown,\n    options: AxiosRequestConfig & {\n      config?: AxiosRequestConfig & { maxBodyLength?: number };\n    } = {},\n  ): Promise<T> => {\n    await this.tokenManager.tokenReady();\n    const requestConfig = this._enrichAxiosOptions(options);\n    try {\n      let response: AxiosResponse<T>;\n      this._logApiRequest(type, url, data, requestConfig);\n      switch (type) {\n        case 'get':\n          response = await this.axiosInstance.get(url, requestConfig);\n          break;\n        case 'delete':\n          response = await this.axiosInstance.delete(url, requestConfig);\n          break;\n        case 'post':\n          response = await this.axiosInstance.post(url, data, requestConfig);\n          break;\n        case 'put':\n          response = await this.axiosInstance.put(url, data, requestConfig);\n          break;\n        case 'patch':\n          response = await this.axiosInstance.patch(url, data, requestConfig);\n          break;\n        case 'options':\n          response = await this.axiosInstance.options(url, requestConfig);\n          break;\n        default:\n          throw new Error('Invalid request type');\n      }\n      this._logApiResponse<T>(type, url, response);\n      this.consecutiveFailures = 0;\n      return this.handleResponse(response);\n    } catch (e) {\n      this._logApiError(type, url, e);\n      this.consecutiveFailures += 1;\n      if (e.response) {\n        if (\n          e.response.data.code === chatCodes.TOKEN_EXPIRED &&\n          !this.tokenManager.isStatic()\n        ) {\n          if (this.consecutiveFailures > 1) {\n            await sleep(retryInterval(this.consecutiveFailures));\n          }\n          this.tokenManager.loadToken();\n          return await this.doAxiosRequest<T>(type, url, data, options);\n        }\n        return this.handleResponse(e.response);\n      } else {\n        throw e;\n      }\n    }\n  };\n\n  get<T>(url: string, params?: AxiosRequestConfig['params']) {\n    return this.doAxiosRequest<T>('get', url, null, { params });\n  }\n\n  put<T>(url: string, data?: unknown) {\n    return this.doAxiosRequest<T>('put', url, data);\n  }\n\n  post<T>(url: string, data?: unknown) {\n    return this.doAxiosRequest<T>('post', url, data);\n  }\n\n  patch<T>(url: string, data?: unknown) {\n    return this.doAxiosRequest<T>('patch', url, data);\n  }\n\n  delete<T>(url: string, params?: AxiosRequestConfig['params']) {\n    return this.doAxiosRequest<T>('delete', url, null, { params });\n  }\n\n  sendFile(\n    url: string,\n    uri: string | NodeJS.ReadableStream | Buffer | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse<UserType>,\n  ) {\n    const data = addFileToFormData(uri, name, contentType);\n    if (user != null) data.append('user', JSON.stringify(user));\n\n    return this.doAxiosRequest<SendFileAPIResponse>('post', url, data, {\n      headers: data.getHeaders ? data.getHeaders() : {}, // node vs browser\n      config: {\n        timeout: 0,\n        maxContentLength: Infinity,\n        maxBodyLength: Infinity,\n      },\n    });\n  }\n\n  errorFromResponse<T>(response: AxiosResponse<T & { code?: number; message?: string }>) {\n    let err: Error & { code?: number; response?: AxiosResponse<T>; status?: number };\n    err = new Error(`StreamChat error HTTP code: ${response.status}`);\n    if (response.data && response.data.code) {\n      err = new Error(\n        `StreamChat error code ${response.data.code}: ${response.data.message}`,\n      );\n      err.code = response.data.code;\n    }\n    err.response = response;\n    err.status = response.status;\n    return err;\n  }\n\n  handleResponse<T>(response: AxiosResponse<T>) {\n    const data = response.data;\n    if ((response.status + '')[0] !== '2') {\n      throw this.errorFromResponse<T>(response);\n    }\n    return data;\n  }\n\n  dispatchEvent = (\n    event: Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) => {\n    // client event handlers\n    const postListenerCallbacks = this._handleClientEvent(event);\n\n    // channel event handlers\n    const cid = event.cid;\n    const channel = cid ? this.activeChannels[cid] : undefined;\n    if (channel) {\n      channel._handleChannelEvent(event);\n    }\n\n    this._callClientListeners(event);\n\n    if (channel) {\n      channel._callChannelListeners(event);\n    }\n\n    postListenerCallbacks.forEach((c) => c());\n  };\n\n  handleEvent = (messageEvent: WebSocket.MessageEvent) => {\n    // dispatch the event to the channel listeners\n    const jsonString = messageEvent.data as string;\n    const event = JSON.parse(jsonString) as Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >;\n    event.received_at = new Date();\n    this.dispatchEvent(event);\n  };\n\n  /**\n   * Updates the members and watchers of the currently active channels that contain this user\n   *\n   * @param {UserResponse<UserType>} user\n   */\n  _updateMemberWatcherReferences = (user: UserResponse<UserType>) => {\n    const refMap = this.state.userChannelReferences[user.id] || {};\n    for (const channelID in refMap) {\n      const channel = this.activeChannels[channelID];\n      /** search the members and watchers and update as needed... */\n      if (channel?.state) {\n        if (channel.state.members[user.id]) {\n          channel.state.members[user.id].user = user;\n        }\n        if (channel.state.watchers[user.id]) {\n          channel.state.watchers[user.id] = user;\n        }\n      }\n    }\n  };\n\n  /**\n   * @deprecated Please _updateMemberWatcherReferences instead.\n   * @private\n   */\n  _updateUserReferences = this._updateMemberWatcherReferences;\n\n  /**\n   * @private\n   *\n   * Updates the messages from the currently active channels that contain this user,\n   * with updated user object.\n   *\n   * @param {UserResponse<UserType>} user\n   */\n  _updateUserMessageReferences = (user: UserResponse<UserType>) => {\n    const refMap = this.state.userChannelReferences[user.id] || {};\n\n    for (const channelID in refMap) {\n      const channel = this.activeChannels[channelID];\n      const state = channel.state;\n\n      /** update the messages from this user. */\n      state?.updateUserMessages(user);\n    }\n  };\n\n  /**\n   * @private\n   *\n   * Deletes the messages from the currently active channels that contain this user\n   *\n   * If hardDelete is true, all the content of message will be stripped down.\n   * Otherwise, only 'message.type' will be set as 'deleted'.\n   *\n   * @param {UserResponse<UserType>} user\n   * @param {boolean} hardDelete\n   */\n  _deleteUserMessageReference = (user: UserResponse<UserType>, hardDelete = false) => {\n    const refMap = this.state.userChannelReferences[user.id] || {};\n\n    for (const channelID in refMap) {\n      const channel = this.activeChannels[channelID];\n      const state = channel.state;\n\n      /** deleted the messages from this user. */\n      state?.deleteUserMessages(user, hardDelete);\n    }\n  };\n\n  /**\n   * @private\n   *\n   * Handle following user related events:\n   * - user.presence.changed\n   * - user.updated\n   * - user.deleted\n   *\n   * @param {Event} event\n   */\n  _handleUserEvent = (\n    event: Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) => {\n    if (!event.user) {\n      return;\n    }\n\n    /** update the client.state with any changes to users */\n    if (event.type === 'user.presence.changed' || event.type === 'user.updated') {\n      if (event.user.id === this.userID) {\n        const user = { ...(this.user || {}) };\n        const _user = { ...(this._user || {}) };\n\n        // Remove deleted properties from user objects.\n        for (const key in this.user) {\n          if (key in event.user || isOwnUserBaseProperty(key)) {\n            continue;\n          }\n\n          delete user[key];\n          delete _user[key];\n        }\n\n        /** Updating only available properties in _user object. */\n        for (const key in event.user) {\n          if (_user && key in _user) {\n            _user[key] = event.user[key];\n          }\n        }\n\n        // @ts-expect-error\n        this._user = { ..._user };\n        this.user = { ...user, ...event.user };\n      }\n\n      this.state.updateUser(event.user);\n      this._updateMemberWatcherReferences(event.user);\n    }\n\n    if (event.type === 'user.updated') {\n      this._updateUserMessageReferences(event.user);\n    }\n\n    if (\n      event.type === 'user.deleted' &&\n      event.user.deleted_at &&\n      (event.mark_messages_deleted || event.hard_delete)\n    ) {\n      this._deleteUserMessageReference(event.user, event.hard_delete);\n    }\n  };\n\n  _handleClientEvent(\n    event: Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    const client = this;\n    const postListenerCallbacks = [];\n    this.logger(\n      'info',\n      `client:_handleClientEvent - Received event of type { ${event.type} }`,\n      {\n        tags: ['event', 'client'],\n        event,\n      },\n    );\n\n    if (\n      event.type === 'user.presence.changed' ||\n      event.type === 'user.updated' ||\n      event.type === 'user.deleted'\n    ) {\n      this._handleUserEvent(event);\n    }\n\n    if (event.type === 'health.check' && event.me) {\n      client.user = event.me;\n      client.state.updateUser(event.me);\n      client.mutedChannels = event.me.channel_mutes;\n      client.mutedUsers = event.me.mutes;\n    }\n\n    if (event.channel && event.type === 'notification.message_new') {\n      this.configs[event.channel.type] = event.channel.config;\n    }\n\n    if (event.type === 'notification.channel_mutes_updated' && event.me?.channel_mutes) {\n      const currentMutedChannelIds: string[] = [];\n      const nextMutedChannelIds: string[] = [];\n\n      this.mutedChannels.forEach(\n        (mute) => mute.channel && currentMutedChannelIds.push(mute.channel.cid),\n      );\n      event.me.channel_mutes.forEach(\n        (mute) => mute.channel && nextMutedChannelIds.push(mute.channel.cid),\n      );\n\n      /** Set the unread count of un-muted channels to 0, which is the behaviour of backend */\n      currentMutedChannelIds.forEach((cid) => {\n        if (!nextMutedChannelIds.includes(cid) && this.activeChannels[cid]) {\n          this.activeChannels[cid].state.unreadCount = 0;\n        }\n      });\n\n      this.mutedChannels = event.me.channel_mutes;\n    }\n\n    if (event.type === 'notification.mutes_updated' && event.me?.mutes) {\n      this.mutedUsers = event.me.mutes;\n    }\n\n    if (\n      (event.type === 'channel.deleted' ||\n        event.type === 'notification.channel_deleted') &&\n      event.cid\n    ) {\n      client.state.deleteAllChannelReference(event.cid);\n      this.activeChannels[event.cid]?._disconnect();\n\n      postListenerCallbacks.push(() => {\n        if (!event.cid) return;\n\n        delete this.activeChannels[event.cid];\n      });\n    }\n\n    return postListenerCallbacks;\n  }\n\n  _muteStatus(cid: string) {\n    let muteStatus;\n    for (let i = 0; i < this.mutedChannels.length; i++) {\n      const mute = this.mutedChannels[i];\n      if (mute.channel?.cid === cid) {\n        muteStatus = {\n          muted: mute.expires\n            ? new Date(mute.expires).getTime() > new Date().getTime()\n            : true,\n          createdAt: mute.created_at ? new Date(mute.created_at) : new Date(),\n          expiresAt: mute.expires ? new Date(mute.expires) : null,\n        };\n        break;\n      }\n    }\n\n    if (muteStatus) {\n      return muteStatus;\n    }\n\n    return {\n      muted: false,\n      createdAt: null,\n      expiresAt: null,\n    };\n  }\n\n  _callClientListeners = (\n    event: Event<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) => {\n    const client = this;\n    // gather and call the listeners\n    const listeners: Array<\n      (\n        event: Event<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >,\n      ) => void\n    > = [];\n    if (client.listeners.all) {\n      listeners.push(...client.listeners.all);\n    }\n    if (client.listeners[event.type]) {\n      listeners.push(...client.listeners[event.type]);\n    }\n\n    // call the event and send it to the listeners\n    for (const listener of listeners) {\n      listener(event);\n    }\n  };\n\n  recoverState = async () => {\n    this.logger(\n      'info',\n      `client:recoverState() - Start of recoverState with connectionID ${this.wsConnection?.connectionID}`,\n      {\n        tags: ['connection'],\n      },\n    );\n\n    const cids = Object.keys(this.activeChannels);\n    if (cids.length && this.recoverStateOnReconnect) {\n      this.logger(\n        'info',\n        `client:recoverState() - Start the querying of ${cids.length} channels`,\n        { tags: ['connection', 'client'] },\n      );\n\n      await this.queryChannels(\n        { cid: { $in: cids } } as ChannelFilters<ChannelType, CommandType, UserType>,\n        { last_message_at: -1 },\n        { limit: 30 },\n      );\n\n      this.logger('info', 'client:recoverState() - Querying channels finished', {\n        tags: ['connection', 'client'],\n      });\n\n      this.dispatchEvent({\n        type: 'connection.recovered',\n      } as Event<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>);\n    } else {\n      this.dispatchEvent({\n        type: 'connection.recovered',\n      } as Event<AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, UserType>);\n    }\n\n    this.wsPromise = Promise.resolve();\n    this.setUserPromise = Promise.resolve();\n  };\n\n  /**\n   * @private\n   */\n  async connect() {\n    this.connecting = true;\n    const client = this;\n    this.failures = 0;\n\n    if (client.userID == null || this._user == null) {\n      throw Error(\n        'Call connectUser or connectAnonymousUser before starting the connection',\n      );\n    }\n\n    if (client.wsBaseURL == null) {\n      throw Error('Websocket base url not set');\n    }\n\n    if (client.clientID == null) {\n      throw Error('clientID is not set');\n    }\n\n    // The StableWSConnection handles all the reconnection logic.\n    this.wsConnection = new StableWSConnection<ChannelType, CommandType, UserType>({\n      wsBaseURL: client.wsBaseURL,\n      clientID: client.clientID,\n      userID: client.userID,\n      tokenManager: client.tokenManager,\n      user: this._user,\n      authType: this.getAuthType(),\n      userAgent: this.getUserAgent(),\n      apiKey: this.key,\n      recoverCallback: this.recoverState,\n      messageCallback: this.handleEvent,\n      eventCallback: this.dispatchEvent as (event: ConnectionChangeEvent) => void,\n      logger: this.logger,\n      device: this.options.device,\n    });\n\n    let warmUpPromise;\n    if (this.options.warmUp) {\n      warmUpPromise = this.doAxiosRequest('options', this.baseURL + '/connect');\n    }\n    const handshake = await this.wsConnection.connect();\n    try {\n      await warmUpPromise;\n    } catch (e) {\n      this.logger('error', 'Warmup request failed', {\n        error: e,\n      });\n    }\n\n    return handshake;\n  }\n\n  /**\n   * queryUsers - Query users and watch user presence\n   *\n   * @param {UserFilters<UserType>} filterConditions MongoDB style filter conditions\n   * @param {UserSort<UserType>} sort Sort options, for instance [{last_active: -1}].\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_active: -1}, {created_at: 1}]\n   * @param {UserOptions} options Option object, {presence: true}\n   *\n   * @return {Promise<APIResponse & { users: Array<UserResponse<UserType>> }>} User Query Response\n   */\n  async queryUsers(\n    filterConditions: UserFilters<UserType>,\n    sort: UserSort<UserType> = [],\n    options: UserOptions = {},\n  ) {\n    const defaultOptions = {\n      presence: false,\n    };\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.setUserPromise;\n\n    if (!this._hasConnectionID()) {\n      defaultOptions.presence = false;\n    }\n\n    // Return a list of users\n    const data = await this.get<\n      APIResponse & {\n        users: Array<UserResponse<UserType>>;\n      }\n    >(this.baseURL + '/users', {\n      payload: {\n        filter_conditions: filterConditions,\n        sort: normalizeQuerySort(sort),\n        ...defaultOptions,\n        ...options,\n      },\n    });\n\n    this.state.updateUsers(data.users);\n\n    return data;\n  }\n\n  /**\n   * queryBannedUsers - Query user bans\n   *\n   * @param {BannedUsersFilters} filterConditions MongoDB style filter conditions\n   * @param {BannedUsersSort} sort Sort options [{created_at: 1}].\n   * @param {BannedUsersPaginationOptions} options Option object, {limit: 10, offset:0}\n   *\n   * @return {Promise<BannedUsersResponse<ChannelType, CommandType, UserType>>} Ban Query Response\n   */\n  async queryBannedUsers(\n    filterConditions: BannedUsersFilters = {},\n    sort: BannedUsersSort = [],\n    options: BannedUsersPaginationOptions = {},\n  ) {\n    // Return a list of user bans\n    return await this.get<BannedUsersResponse<ChannelType, CommandType, UserType>>(\n      this.baseURL + '/query_banned_users',\n      {\n        payload: {\n          filter_conditions: filterConditions,\n          sort: normalizeQuerySort(sort),\n          ...options,\n        },\n      },\n    );\n  }\n\n  /**\n   * queryMessageFlags - Query message flags\n   *\n   * @param {MessageFlagsFilters} filterConditions MongoDB style filter conditions\n   * @param {MessageFlagsPaginationOptions} options Option object, {limit: 10, offset:0}\n   *\n   * @return {Promise<MessageFlagsResponse<ChannelType, CommandType, UserType>>} Message Flags Response\n   */\n  async queryMessageFlags(\n    filterConditions: MessageFlagsFilters = {},\n    options: MessageFlagsPaginationOptions = {},\n  ) {\n    // Return a list of message flags\n    return await this.get<MessageFlagsResponse<ChannelType, CommandType, UserType>>(\n      this.baseURL + '/moderation/flags/message',\n      {\n        payload: {\n          filter_conditions: filterConditions,\n          ...options,\n        },\n      },\n    );\n  }\n\n  /**\n   * queryChannels - Query channels\n   *\n   * @param {ChannelFilters<ChannelType, CommandType, UserType>} filterConditions object MongoDB style filters\n   * @param {ChannelSort<ChannelType>} [sort] Sort options, for instance {created_at: -1}.\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_updated: -1}, {created_at: 1}]\n   * @param {ChannelOptions} [options] Options object\n   * @param {ChannelStateOptions} [stateOptions] State options object. These options will only be used for state management and won't be sent in the request.\n   * - stateOptions.skipInitialization - Skips the initialization of the state for the channels matching the ids in the list.\n   *\n   * @return {Promise<APIResponse & { channels: Array<ChannelAPIResponse<AttachmentType,ChannelType,CommandType,MessageType,ReactionType,UserType>>}> } search channels response\n   */\n  async queryChannels(\n    filterConditions: ChannelFilters<ChannelType, CommandType, UserType>,\n    sort: ChannelSort<ChannelType> = [],\n    options: ChannelOptions = {},\n    stateOptions: ChannelStateOptions = {},\n  ) {\n    const { skipInitialization } = stateOptions;\n    const defaultOptions: ChannelOptions = {\n      state: true,\n      watch: true,\n      presence: false,\n    };\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.setUserPromise;\n\n    if (!this._hasConnectionID()) {\n      defaultOptions.watch = false;\n    }\n\n    // Return a list of channels\n    const payload = {\n      filter_conditions: filterConditions,\n      sort: normalizeQuerySort(sort),\n      ...defaultOptions,\n      ...options,\n    };\n\n    const data = await this.post<{\n      channels: ChannelAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >[];\n    }>(this.baseURL + '/channels', payload);\n\n    const channels: Channel<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >[] = [];\n\n    // update our cache of the configs\n    for (const channelState of data.channels) {\n      this._addChannelConfig(channelState);\n    }\n\n    for (const channelState of data.channels) {\n      const c = this.channel(channelState.channel.type, channelState.channel.id);\n      c.data = channelState.channel;\n      c.initialized = true;\n\n      if (skipInitialization === undefined) {\n        c._initializeState(channelState);\n      } else if (!skipInitialization.includes(channelState.channel.id)) {\n        c.state.clearMessages();\n        c._initializeState(channelState);\n      }\n\n      channels.push(c);\n    }\n    return channels;\n  }\n\n  /**\n   * search - Query messages\n   *\n   * @param {ChannelFilters<ChannelType, CommandType, UserType>} filterConditions MongoDB style filter conditions\n   * @param {MessageFilters<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType> | string} query search query or object MongoDB style filters\n   * @param {SearchOptions<MessageType>} [options] Option object, {user_id: 'tommaso'}\n   *\n   * @return {Promise<SearchAPIResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>>} search messages response\n   */\n  async search(\n    filterConditions: ChannelFilters<ChannelType, CommandType, UserType>,\n    query:\n      | string\n      | MessageFilters<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >,\n    options: SearchOptions<MessageType> = {},\n  ) {\n    if (options.offset && (options.sort || options.next)) {\n      throw Error(`Cannot specify offset with sort or next parameters`);\n    }\n    const payload: SearchPayload<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    > = {\n      filter_conditions: filterConditions,\n      ...options,\n      sort: options.sort\n        ? normalizeQuerySort<SearchMessageSortBase<MessageType>>(options.sort)\n        : undefined,\n    };\n    if (typeof query === 'string') {\n      payload.query = query;\n    } else if (typeof query === 'object') {\n      payload.message_filter_conditions = query;\n    } else {\n      throw Error(`Invalid type ${typeof query} for query parameter`);\n    }\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.setUserPromise;\n\n    return await this.get<\n      SearchAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this.baseURL + '/search', {\n      payload,\n    });\n  }\n\n  /**\n   * setLocalDevice - Set the device info for the current client(device) that will be sent via WS connection automatically\n   *\n   * @param {BaseDeviceFields} device the device object\n   * @param {string} device.id device id\n   * @param {string} device.push_provider the push provider (apn or firebase)\n   *\n   */\n  setLocalDevice(device: BaseDeviceFields) {\n    if (this.wsConnection) {\n      throw new Error('you can only set device before opening a websocket connection');\n    }\n\n    this.options.device = device;\n  }\n\n  /**\n   * addDevice - Adds a push device for a user.\n   *\n   * @param {string} id the device id\n   * @param {'apn' | 'firebase'} push_provider the push provider (apn or firebase)\n   * @param {string} [userID] the user id (defaults to current user)\n   *\n   */\n  async addDevice(id: string, push_provider: 'apn' | 'firebase', userID?: string) {\n    return await this.post<APIResponse>(this.baseURL + '/devices', {\n      id,\n      push_provider,\n      ...(userID != null ? { user_id: userID } : {}),\n    });\n  }\n\n  /**\n   * getDevices - Returns the devices associated with a current user\n   *\n   * @param {string} [userID] User ID. Only works on serverside\n   *\n   * @return {APIResponse & Device<UserType>[]} Array of devices\n   */\n  async getDevices(userID?: string) {\n    return await this.get<APIResponse & { devices?: Device<UserType>[] }>(\n      this.baseURL + '/devices',\n      userID ? { user_id: userID } : {},\n    );\n  }\n\n  /**\n   * removeDevice - Removes the device with the given id. Clientside users can only delete their own devices\n   *\n   * @param {string} id The device id\n   * @param {string} [userID] The user id. Only specify this for serverside requests\n   *\n   */\n  async removeDevice(id: string, userID?: string) {\n    return await this.delete<APIResponse>(this.baseURL + '/devices', {\n      id,\n      ...(userID ? { user_id: userID } : {}),\n    });\n  }\n\n  /**\n   * getRateLimits - Returns the rate limits quota and usage for the current app, possibly filter for a specific platform and/or endpoints.\n   * Only available server-side.\n   *\n   * @param {object} [params] The params for the call. If none of the params are set, all limits for all platforms are returned.\n   * @returns {Promise<GetRateLimitsResponse>}\n   */\n  async getRateLimits(params?: {\n    android?: boolean;\n    endpoints?: EndpointName[];\n    ios?: boolean;\n    serverSide?: boolean;\n    web?: boolean;\n  }) {\n    const { serverSide, web, android, ios, endpoints } = params || {};\n    return this.get<GetRateLimitsResponse>(this.baseURL + '/rate_limits', {\n      server_side: serverSide,\n      web,\n      android,\n      ios,\n      endpoints: endpoints ? endpoints.join(',') : undefined,\n    });\n  }\n\n  _addChannelConfig(\n    channelState: ChannelAPIResponse<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n  ) {\n    this.configs[channelState.channel.type] = channelState.channel.config;\n  }\n\n  /**\n   * channel - Returns a new channel with the given type, id and custom data\n   *\n   * If you want to create a unique conversation between 2 or more users; you can leave out the ID parameter and provide the list of members.\n   * Make sure to await channel.create() or channel.watch() before accessing channel functions:\n   * ie. channel = client.channel(\"messaging\", {members: [\"tommaso\", \"thierry\"]})\n   * await channel.create() to assign an ID to channel\n   *\n   * @param {string} channelType The channel type\n   * @param {string | ChannelData<ChannelType> | null} [channelIDOrCustom]   The channel ID, you can leave this out if you want to create a conversation channel\n   * @param {object} [custom]    Custom data to attach to the channel\n   *\n   * @return {channel} The channel object, initialize it using channel.watch()\n   */\n  channel(\n    channelType: string,\n    channelID?: string | null,\n    custom?: ChannelData<ChannelType>,\n  ): Channel<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  >;\n  channel(\n    channelType: string,\n    custom?: ChannelData<ChannelType>,\n  ): Channel<\n    AttachmentType,\n    ChannelType,\n    CommandType,\n    EventType,\n    MessageType,\n    ReactionType,\n    UserType\n  >;\n  channel(\n    channelType: string,\n    channelIDOrCustom?: string | ChannelData<ChannelType> | null,\n    custom: ChannelData<ChannelType> = {} as ChannelData<ChannelType>,\n  ) {\n    if (!this.userID && !this._isUsingServerAuth()) {\n      throw Error('Call connectUser or connectAnonymousUser before creating a channel');\n    }\n\n    if (~channelType.indexOf(':')) {\n      throw Error(`Invalid channel group ${channelType}, can't contain the : character`);\n    }\n\n    // support channel(\"messaging\", null, {options})\n    // support channel(\"messaging\", undefined, {options})\n    // support channel(\"messaging\", \"\", {options})\n    if (channelIDOrCustom == null || channelIDOrCustom === '') {\n      return new Channel<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        EventType,\n        MessageType,\n        ReactionType,\n        UserType\n      >(this, channelType, undefined, custom);\n    }\n\n    // support channel(\"messaging\", {options})\n    if (typeof channelIDOrCustom === 'object') {\n      return this.getChannelByMembers(channelType, channelIDOrCustom);\n    }\n\n    return this.getChannelById(channelType, channelIDOrCustom, custom);\n  }\n\n  /**\n   * It's a helper method for `client.channel()` method, used to create unique conversation or\n   * channel based on member list instead of id.\n   *\n   * If the channel already exists in `activeChannels` list, then we simply return it, since that\n   * means the same channel was already requested or created.\n   *\n   * Otherwise we create a new instance of Channel class and return it.\n   *\n   * @private\n   *\n   * @param {string} channelType The channel type\n   * @param {object} [custom]    Custom data to attach to the channel\n   *\n   * @return {channel} The channel object, initialize it using channel.watch()\n   */\n  getChannelByMembers = (channelType: string, custom: ChannelData<ChannelType>) => {\n    // Check if the channel already exists.\n    // Only allow 1 channel object per cid\n    const membersStr = [...(custom.members || [])].sort().join(',');\n    const tempCid = `${channelType}:!members-${membersStr}`;\n\n    if (!membersStr) {\n      throw Error('Please specify atleast one member when creating unique conversation');\n    }\n\n    // channel could exist in `activeChannels` list with either one of the following two keys:\n    // 1. cid - Which gets set on channel only after calling channel.query or channel.watch or channel.create\n    // 2. Sorted membersStr - E.g., \"messaging:amin,vishal\" OR \"messaging:amin,jaap,tom\"\n    //                        This is set when you create a channel, but haven't queried yet. After query,\n    //                        we will replace it with `cid`\n    for (const key in this.activeChannels) {\n      const channel = this.activeChannels[key];\n      if (channel.disconnected) {\n        continue;\n      }\n\n      if (key === tempCid) {\n        return channel;\n      }\n\n      if (key.indexOf(`${channelType}:!members-`) === 0) {\n        const membersStrInExistingChannel = Object.keys(channel.state.members)\n          .sort()\n          .join(',');\n        if (membersStrInExistingChannel === membersStr) {\n          return channel;\n        }\n      }\n    }\n\n    const channel = new Channel<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >(this, channelType, undefined, custom);\n\n    // For the time being set the key as membersStr, since we don't know the cid yet.\n    // In channel.query, we will replace it with 'cid'.\n    this.activeChannels[tempCid] = channel;\n    return channel;\n  };\n\n  /**\n   * Its a helper method for `client.channel()` method, used to channel given the id of channel.\n   *\n   * If the channel already exists in `activeChannels` list, then we simply return it, since that\n   * means the same channel was already requested or created.\n   *\n   * Otherwise we create a new instance of Channel class and return it.\n   *\n   * @private\n   *\n   * @param {string} channelType The channel type\n   * @param {string} [channelID] The channel ID\n   * @param {object} [custom]    Custom data to attach to the channel\n   *\n   * @return {channel} The channel object, initialize it using channel.watch()\n   */\n  getChannelById = (\n    channelType: string,\n    channelID: string,\n    custom: ChannelData<ChannelType>,\n  ) => {\n    if (typeof channelID === 'string' && ~channelID.indexOf(':')) {\n      throw Error(`Invalid channel id ${channelID}, can't contain the : character`);\n    }\n\n    // only allow 1 channel object per cid\n    const cid = `${channelType}:${channelID}`;\n    if (cid in this.activeChannels && !this.activeChannels[cid].disconnected) {\n      const channel = this.activeChannels[cid];\n      if (Object.keys(custom).length > 0) {\n        channel.data = custom;\n        channel._data = custom;\n      }\n      return channel;\n    }\n    const channel = new Channel<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      EventType,\n      MessageType,\n      ReactionType,\n      UserType\n    >(this, channelType, channelID, custom);\n    this.activeChannels[channel.cid] = channel;\n\n    return channel;\n  };\n\n  /**\n   * partialUpdateUser - Update the given user object\n   *\n   * @param {PartialUserUpdate<UserType>} partialUserObject which should contain id and any of \"set\" or \"unset\" params;\n   * example: {id: \"user1\", set:{field: value}, unset:[\"field2\"]}\n   *\n   * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>} list of updated users\n   */\n  async partialUpdateUser(partialUserObject: PartialUserUpdate<UserType>) {\n    return await this.partialUpdateUsers([partialUserObject]);\n  }\n\n  /**\n   * upsertUsers - Batch upsert the list of users\n   *\n   * @param {UserResponse<UserType>[]} users list of users\n   *\n   * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>}\n   */\n  async upsertUsers(users: UserResponse<UserType>[]) {\n    const userMap: { [key: string]: UserResponse<UserType> } = {};\n    for (const userObject of users) {\n      if (!userObject.id) {\n        throw Error('User ID is required when updating a user');\n      }\n      userMap[userObject.id] = userObject;\n    }\n\n    return await this.post<\n      APIResponse & {\n        users: { [key: string]: UserResponse<UserType> };\n      }\n    >(this.baseURL + '/users', {\n      users: userMap,\n    });\n  }\n\n  /**\n   * @deprecated Please use upsertUsers() function instead.\n   *\n   * updateUsers - Batch update the list of users\n   *\n   * @param {UserResponse<UserType>[]} users list of users\n   * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>}\n   */\n  updateUsers = this.upsertUsers;\n\n  /**\n   * upsertUser - Update or Create the given user object\n   *\n   * @param {UserResponse<UserType>} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n   *\n   * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>}\n   */\n  upsertUser(userObject: UserResponse<UserType>) {\n    return this.upsertUsers([userObject]);\n  }\n\n  /**\n   * @deprecated Please use upsertUser() function instead.\n   *\n   * updateUser - Update or Create the given user object\n   *\n   * @param {UserResponse<UserType>} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n   * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>}\n   */\n  updateUser = this.upsertUser;\n\n  /**\n   * partialUpdateUsers - Batch partial update of users\n   *\n   * @param {PartialUserUpdate<UserType>[]} users list of partial update requests\n   *\n   * @return {Promise<APIResponse & { users: { [key: string]: UserResponse<UserType> } }>}\n   */\n  async partialUpdateUsers(users: PartialUserUpdate<UserType>[]) {\n    for (const userObject of users) {\n      if (!userObject.id) {\n        throw Error('User ID is required when updating a user');\n      }\n    }\n\n    return await this.patch<\n      APIResponse & {\n        users: { [key: string]: UserResponse<UserType> };\n      }\n    >(this.baseURL + '/users', {\n      users,\n    });\n  }\n\n  async deleteUser(\n    userID: string,\n    params?: {\n      delete_conversation_channels?: boolean;\n      hard_delete?: boolean;\n      mark_messages_deleted?: boolean;\n    },\n  ) {\n    return await this.delete<\n      APIResponse & {\n        user: UserResponse<UserType>;\n      }\n    >(this.baseURL + `/users/${userID}`, params);\n  }\n\n  async reactivateUser(\n    userID: string,\n    options?: { created_by_id?: string; name?: string; restore_messages?: boolean },\n  ) {\n    return await this.post<\n      APIResponse & {\n        user: UserResponse<UserType>;\n      }\n    >(this.baseURL + `/users/${userID}/reactivate`, {\n      ...options,\n    });\n  }\n\n  async deactivateUser(\n    userID: string,\n    options?: { created_by_id?: string; mark_messages_deleted?: boolean },\n  ) {\n    return await this.post<APIResponse & { user: UserResponse<UserType> }>(\n      this.baseURL + `/users/${userID}/deactivate`,\n      {\n        ...options,\n      },\n    );\n  }\n\n  async exportUser(userID: string, options?: Record<string, string>) {\n    return await this.get<\n      APIResponse & {\n        messages: MessageResponse<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >[];\n        reactions: ReactionResponse<ReactionType, UserType>[];\n        user: UserResponse<UserType>;\n      }\n    >(this.baseURL + `/users/${userID}/export`, {\n      ...options,\n    });\n  }\n\n  /** banUser - bans a user from all channels\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<UserType>} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async banUser(targetUserID: string, options?: BanUserOptions<UserType>) {\n    if (options?.user_id !== undefined) {\n      options.banned_by_id = options.user_id;\n      delete options.user_id;\n      console.warn(\n        \"banUser: 'user_id' is deprecated, please consider switching to 'banned_by_id'\",\n      );\n    }\n    if (options?.user !== undefined) {\n      options.banned_by = options.user;\n      delete options.user;\n      console.warn(\n        \"banUser: 'user' is deprecated, please consider switching to 'banned_by'\",\n      );\n    }\n    return await this.post<APIResponse>(this.baseURL + '/moderation/ban', {\n      target_user_id: targetUserID,\n      ...options,\n    });\n  }\n\n  /** unbanUser - revoke global ban for a user\n   *\n   * @param {string} targetUserID\n   * @param {UnBanUserOptions} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async unbanUser(targetUserID: string, options?: UnBanUserOptions) {\n    return await this.delete<APIResponse>(this.baseURL + '/moderation/ban', {\n      target_user_id: targetUserID,\n      ...options,\n    });\n  }\n\n  /** shadowBan - shadow bans a user from all channels\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<UserType>} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async shadowBan(targetUserID: string, options?: BanUserOptions<UserType>) {\n    return await this.banUser(targetUserID, {\n      shadow: true,\n      ...options,\n    });\n  }\n\n  /** removeShadowBan - revoke global shadow ban for a user\n   *\n   * @param {string} targetUserID\n   * @param {UnBanUserOptions} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async removeShadowBan(targetUserID: string, options?: UnBanUserOptions) {\n    return await this.unbanUser(targetUserID, {\n      shadow: true,\n      ...options,\n    });\n  }\n\n  /** muteUser - mutes a user\n   *\n   * @param {string} targetID\n   * @param {string} [userID] Only used with serverside auth\n   * @param {MuteUserOptions<UserType>} [options]\n   * @returns {Promise<MuteUserResponse<ChannelType, CommandType, UserType>>}\n   */\n  async muteUser(\n    targetID: string,\n    userID?: string,\n    options: MuteUserOptions<UserType> = {},\n  ) {\n    return await this.post<MuteUserResponse<ChannelType, CommandType, UserType>>(\n      this.baseURL + '/moderation/mute',\n      {\n        target_id: targetID,\n        ...(userID ? { user_id: userID } : {}),\n        ...options,\n      },\n    );\n  }\n\n  /** unmuteUser - unmutes a user\n   *\n   * @param {string} targetID\n   * @param {string} [currentUserID] Only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unmuteUser(targetID: string, currentUserID?: string) {\n    return await this.post<APIResponse>(this.baseURL + '/moderation/unmute', {\n      target_id: targetID,\n      ...(currentUserID ? { user_id: currentUserID } : {}),\n    });\n  }\n\n  /** userMuteStatus - check if a user is muted or not, can be used after connectUser() is called\n   *\n   * @param {string} targetID\n   * @returns {boolean}\n   */\n  userMuteStatus(targetID: string) {\n    if (!this.user || !this.wsPromise) {\n      throw new Error('Make sure to await connectUser() first.');\n    }\n\n    for (let i = 0; i < this.mutedUsers.length; i += 1) {\n      if (this.mutedUsers[i].target.id === targetID) return true;\n    }\n    return false;\n  }\n\n  /**\n   * flagMessage - flag a message\n   * @param {string} targetMessageID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async flagMessage(targetMessageID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagMessageResponse<UserType>>(\n      this.baseURL + '/moderation/flag',\n      {\n        target_message_id: targetMessageID,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * flagUser - flag a user\n   * @param {string} targetID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async flagUser(targetID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagUserResponse<UserType>>(\n      this.baseURL + '/moderation/flag',\n      {\n        target_user_id: targetID,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * unflagMessage - unflag a message\n   * @param {string} targetMessageID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unflagMessage(targetMessageID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagMessageResponse<UserType>>(\n      this.baseURL + '/moderation/unflag',\n      {\n        target_message_id: targetMessageID,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * unflagUser - unflag a user\n   * @param {string} targetID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unflagUser(targetID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagUserResponse<UserType>>(\n      this.baseURL + '/moderation/unflag',\n      {\n        target_user_id: targetID,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * markAllRead - marks all channels for this user as read\n   * @param {MarkAllReadOptions<UserType>} [data]\n   *\n   * @return {Promise<APIResponse>}\n   */\n  async markAllRead(data: MarkAllReadOptions<UserType> = {}) {\n    await this.post<APIResponse>(this.baseURL + '/channels/read', {\n      ...data,\n    });\n  }\n\n  createCommand(data: CreateCommandOptions<CommandType>) {\n    return this.post<CreateCommandResponse<CommandType>>(\n      this.baseURL + '/commands',\n      data,\n    );\n  }\n\n  getCommand(name: string) {\n    return this.get<GetCommandResponse<CommandType>>(this.baseURL + `/commands/${name}`);\n  }\n\n  updateCommand(name: string, data: UpdateCommandOptions<CommandType>) {\n    return this.put<UpdateCommandResponse<CommandType>>(\n      this.baseURL + `/commands/${name}`,\n      data,\n    );\n  }\n\n  deleteCommand(name: string) {\n    return this.delete<DeleteCommandResponse<CommandType>>(\n      this.baseURL + `/commands/${name}`,\n    );\n  }\n\n  listCommands() {\n    return this.get<ListCommandsResponse<CommandType>>(this.baseURL + `/commands`);\n  }\n\n  createChannelType(data: CreateChannelOptions<CommandType>) {\n    const channelData = Object.assign({}, { commands: ['all'] }, data);\n    return this.post<CreateChannelResponse<CommandType>>(\n      this.baseURL + '/channeltypes',\n      channelData,\n    );\n  }\n\n  getChannelType(channelType: string) {\n    return this.get<GetChannelTypeResponse<CommandType>>(\n      this.baseURL + `/channeltypes/${channelType}`,\n    );\n  }\n\n  updateChannelType(channelType: string, data: UpdateChannelOptions<CommandType>) {\n    return this.put<UpdateChannelResponse<CommandType>>(\n      this.baseURL + `/channeltypes/${channelType}`,\n      data,\n    );\n  }\n\n  deleteChannelType(channelType: string) {\n    return this.delete<APIResponse>(this.baseURL + `/channeltypes/${channelType}`);\n  }\n\n  listChannelTypes() {\n    return this.get<ListChannelResponse<CommandType>>(this.baseURL + `/channeltypes`);\n  }\n\n  /**\n   * translateMessage - adds the translation to the message\n   *\n   * @param {string} messageId\n   * @param {string} language\n   *\n   * @return {APIResponse & MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>} Response that includes the message\n   */\n  async translateMessage(messageId: string, language: string) {\n    return await this.post<\n      APIResponse &\n        MessageResponse<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >\n    >(this.baseURL + `/messages/${messageId}/translate`, {\n      language,\n    });\n  }\n\n  /**\n   * _normalizeExpiration - transforms expiration value into ISO string\n   * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date\n   */\n  _normalizeExpiration(timeoutOrExpirationDate?: null | number | string | Date) {\n    let pinExpires: undefined | string;\n    if (typeof timeoutOrExpirationDate === 'number') {\n      const now = new Date();\n      now.setSeconds(now.getSeconds() + timeoutOrExpirationDate);\n      pinExpires = now.toISOString();\n    } else if (isString(timeoutOrExpirationDate)) {\n      pinExpires = timeoutOrExpirationDate;\n    } else if (timeoutOrExpirationDate instanceof Date) {\n      pinExpires = timeoutOrExpirationDate.toISOString();\n    }\n    return pinExpires;\n  }\n\n  /**\n   * _messageId - extracts string message id from either message object or message id\n   * @param {string | { id: string }} messageOrMessageId message object or message id\n   * @param {string} errorText error message to report in case of message id absence\n   */\n  _validateAndGetMessageId(\n    messageOrMessageId: string | { id: string },\n    errorText: string,\n  ) {\n    let messageId: string;\n    if (typeof messageOrMessageId === 'string') {\n      messageId = messageOrMessageId;\n    } else {\n      if (!messageOrMessageId.id) {\n        throw Error(errorText);\n      }\n      messageId = messageOrMessageId.id;\n    }\n    return messageId;\n  }\n\n  /**\n   * pinMessage - pins the message\n   * @param {string | { id: string }} messageOrMessageId message object or message id\n   * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date\n   * @param {string | { id: string }} [userId]\n   */\n  pinMessage(\n    messageOrMessageId: string | { id: string },\n    timeoutOrExpirationDate?: null | number | string | Date,\n    userId?: string | { id: string },\n  ) {\n    const messageId = this._validateAndGetMessageId(\n      messageOrMessageId,\n      'Please specify the message id when calling unpinMessage',\n    );\n    return this.partialUpdateMessage(\n      messageId,\n      {\n        set: {\n          pinned: true,\n          pin_expires: this._normalizeExpiration(timeoutOrExpirationDate),\n        },\n      },\n      userId,\n    );\n  }\n\n  /**\n   * unpinMessage - unpins the message that was previously pinned\n   * @param {string | { id: string }} messageOrMessageId message object or message id\n   * @param {string | { id: string }} [userId]\n   */\n  unpinMessage(\n    messageOrMessageId: string | { id: string },\n    userId?: string | { id: string },\n  ) {\n    const messageId = this._validateAndGetMessageId(\n      messageOrMessageId,\n      'Please specify the message id when calling unpinMessage',\n    );\n    return this.partialUpdateMessage(\n      messageId,\n      {\n        set: {\n          pinned: false,\n        },\n      },\n      userId,\n    );\n  }\n\n  /**\n   * updateMessage - Update the given message\n   *\n   * @param {Omit<MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType>, 'mentioned_users'> & { mentioned_users?: string[] }} message object, id needs to be specified\n   * @param {string | { id: string }} [userId]\n   *\n   * @return {APIResponse & { message: MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType> }} Response that includes the message\n   */\n  async updateMessage(\n    message: UpdatedMessage<\n      AttachmentType,\n      ChannelType,\n      CommandType,\n      MessageType,\n      ReactionType,\n      UserType\n    >,\n    userId?: string | { id: string },\n  ) {\n    if (!message.id) {\n      throw Error('Please specify the message id when calling updateMessage');\n    }\n\n    const clonedMessage: Message = Object.assign({}, message);\n    delete clonedMessage.id;\n\n    const reservedMessageFields: Array<\n      | 'command'\n      | 'created_at'\n      | 'html'\n      | 'latest_reactions'\n      | 'own_reactions'\n      | 'reaction_counts'\n      | 'reply_count'\n      | 'type'\n      | 'updated_at'\n      | 'user'\n      | '__html'\n    > = [\n      'command',\n      'created_at',\n      'html',\n      'latest_reactions',\n      'own_reactions',\n      'reaction_counts',\n      'reply_count',\n      'type',\n      'updated_at',\n      'user',\n      '__html',\n    ];\n\n    reservedMessageFields.forEach(function (item) {\n      if (clonedMessage[item] != null) {\n        delete clonedMessage[item];\n      }\n    });\n\n    if (userId != null) {\n      if (isString(userId)) {\n        clonedMessage.user_id = userId;\n      } else {\n        clonedMessage.user = { id: userId.id } as UserResponse<UserType>;\n      }\n    }\n\n    /**\n     * Server always expects mentioned_users to be array of string. We are adding extra check, just in case\n     * SDK missed this conversion.\n     */\n    if (\n      Array.isArray(clonedMessage.mentioned_users) &&\n      !isString(clonedMessage.mentioned_users[0])\n    ) {\n      clonedMessage.mentioned_users = clonedMessage.mentioned_users.map(\n        (mu) => ((mu as unknown) as UserResponse).id,\n      );\n    }\n\n    return await this.post<\n      UpdateMessageAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this.baseURL + `/messages/${message.id}`, {\n      message: clonedMessage,\n    });\n  }\n\n  /**\n   * partialUpdateMessage - Update the given message id while retaining additional properties\n   *\n   * @param {string} id the message id\n   *\n   * @param {PartialUpdateMessage<MessageType>}  partialMessageObject which should contain id and any of \"set\" or \"unset\" params;\n   *         example: {id: \"user1\", set:{text: \"hi\"}, unset:[\"color\"]}\n   * @param {string | { id: string }} [userId]\n   *\n   * @return {APIResponse & { message: MessageResponse<AttachmentType, ChannelType, CommandType, MessageType, ReactionType, UserType> }} Response that includes the updated message\n   */\n  async partialUpdateMessage(\n    id: string,\n    partialMessageObject: PartialMessageUpdate<MessageType>,\n    userId?: string | { id: string },\n  ) {\n    if (!id) {\n      throw Error('Please specify the message id when calling partialUpdateMessage');\n    }\n    let user = userId;\n    if (userId != null && isString(userId)) {\n      user = { id: userId };\n    }\n    return await this.put<\n      UpdateMessageAPIResponse<\n        AttachmentType,\n        ChannelType,\n        CommandType,\n        MessageType,\n        ReactionType,\n        UserType\n      >\n    >(this.baseURL + `/messages/${id}`, {\n      ...partialMessageObject,\n      user,\n    });\n  }\n\n  async deleteMessage(messageID: string, hardDelete?: boolean) {\n    let params = {};\n    if (hardDelete) {\n      params = { hard: true };\n    }\n    return await this.delete<\n      APIResponse & {\n        message: MessageResponse<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >;\n      }\n    >(this.baseURL + `/messages/${messageID}`, params);\n  }\n\n  async getMessage(messageID: string) {\n    return await this.get<\n      APIResponse & {\n        message: MessageResponse<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          MessageType,\n          ReactionType,\n          UserType\n        >;\n      }\n    >(this.baseURL + `/messages/${messageID}`);\n  }\n\n  getUserAgent() {\n    return (\n      this.userAgent ||\n      `stream-chat-javascript-client-${this.node ? 'node' : 'browser'}-${\n        process.env.PKG_VERSION\n      }`\n    );\n  }\n\n  setUserAgent(userAgent: string) {\n    this.userAgent = userAgent;\n  }\n\n  /**\n   * _isUsingServerAuth - Returns true if we're using server side auth\n   */\n  _isUsingServerAuth = () => !!this.secret;\n\n  _enrichAxiosOptions(\n    options: AxiosRequestConfig & { config?: AxiosRequestConfig } = {\n      params: {},\n      headers: {},\n      config: {},\n    },\n  ) {\n    const token = this._getToken();\n\n    return {\n      params: {\n        user_id: this.userID,\n        ...options.params,\n        api_key: this.key,\n        connection_id: this.wsConnection?.connectionID,\n      },\n      headers: {\n        Authorization: token,\n        'stream-auth-type': this.getAuthType(),\n        'X-Stream-Client': this.getUserAgent(),\n        ...options.headers,\n      },\n      ...options.config,\n    };\n  }\n\n  _getToken() {\n    if (!this.tokenManager || this.anonymous) return null;\n\n    return this.tokenManager.getToken();\n  }\n\n  _startCleaning() {\n    const that = this;\n    if (this.cleaningIntervalRef != null) {\n      return;\n    }\n    this.cleaningIntervalRef = setInterval(() => {\n      // call clean on the channel, used for calling the stop.typing event etc.\n      for (const channel of Object.values(that.activeChannels)) {\n        channel.clean();\n      }\n    }, 500);\n  }\n\n  verifyWebhook(requestBody: string, xSignature: string) {\n    return !!this.secret && CheckSignature(requestBody, this.secret, xSignature);\n  }\n\n  /** getPermission - gets the definition for a permission\n   *\n   * @param {string} name\n   * @returns {Promise<PermissionAPIResponse>}\n   */\n  getPermission(name: string) {\n    return this.get<PermissionAPIResponse>(`${this.baseURL}/permissions/${name}`);\n  }\n\n  /** createPermission - creates a custom permission\n   *\n   * @param {CustomPermissionOptions} permissionData the permission data\n   * @returns {Promise<APIResponse>}\n   */\n  createPermission(permissionData: CustomPermissionOptions) {\n    return this.post<APIResponse>(`${this.baseURL}/permissions`, {\n      ...permissionData,\n    });\n  }\n\n  /** updatePermission - updates an existing custom permission\n   *\n   * @param {string} id\n   * @param {Omit<CustomPermissionOptions, 'id'>} permissionData the permission data\n   * @returns {Promise<APIResponse>}\n   */\n  updatePermission(id: string, permissionData: Omit<CustomPermissionOptions, 'id'>) {\n    return this.put<APIResponse>(`${this.baseURL}/permissions/${id}`, {\n      ...permissionData,\n    });\n  }\n\n  /** deletePermission - deletes a custom permission\n   *\n   * @param {string} name\n   * @returns {Promise<APIResponse>}\n   */\n  deletePermission(name: string) {\n    return this.delete<APIResponse>(`${this.baseURL}/permissions/${name}`);\n  }\n\n  /** listPermissions - returns the list of all permissions for this application\n   *\n   * @returns {Promise<APIResponse>}\n   */\n  listPermissions() {\n    return this.get<PermissionsAPIResponse>(`${this.baseURL}/permissions`);\n  }\n\n  /** createRole - creates a custom role\n   *\n   * @param {string} name the new role name\n   * @returns {Promise<APIResponse>}\n   */\n  createRole(name: string) {\n    return this.post<APIResponse>(`${this.baseURL}/roles`, { name });\n  }\n\n  /** listRoles - returns the list of all roles for this application\n   *\n   * @returns {Promise<APIResponse>}\n   */\n  listRoles() {\n    return this.get<APIResponse>(`${this.baseURL}/roles`);\n  }\n\n  /** deleteRole - deletes a custom role\n   *\n   * @param {string} name the role name\n   * @returns {Promise<APIResponse>}\n   */\n  deleteRole(name: string) {\n    return this.delete<APIResponse>(`${this.baseURL}/roles/${name}`);\n  }\n\n  /** sync - returns all events that happened for a list of channels since last sync\n   * @param {string[]} channel_cids list of channel CIDs\n   * @param {string} last_sync_at last time the user was online and in sync. RFC3339 ie. \"2020-05-06T15:05:01.207Z\"\n   */\n  sync(channel_cids: string[], last_sync_at: string) {\n    return this.post<\n      APIResponse & {\n        events: Event<\n          AttachmentType,\n          ChannelType,\n          CommandType,\n          EventType,\n          MessageType,\n          ReactionType,\n          UserType\n        >[];\n      }\n    >(`${this.baseURL}/sync`, {\n      channel_cids,\n      last_sync_at,\n    });\n  }\n\n  /**\n   * sendUserCustomEvent - Send a custom event to a user\n   *\n   * @param {string} targetUserID target user id\n   * @param {UserCustomEvent} event for example {type: 'friendship-request'}\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  async sendUserCustomEvent(targetUserID: string, event: UserCustomEvent) {\n    return await this.post<APIResponse>(`${this.baseURL}/users/${targetUserID}/event`, {\n      event,\n    });\n  }\n\n  createBlockList(blockList: BlockList) {\n    return this.post<APIResponse>(`${this.baseURL}/blocklists`, blockList);\n  }\n\n  listBlockLists() {\n    return this.get<APIResponse & { blocklists: BlockListResponse[] }>(\n      `${this.baseURL}/blocklists`,\n    );\n  }\n\n  getBlockList(name: string) {\n    return this.get<APIResponse & { blocklist: BlockListResponse }>(\n      `${this.baseURL}/blocklists/${name}`,\n    );\n  }\n\n  updateBlockList(name: string, data: { words: string[] }) {\n    return this.put<APIResponse>(`${this.baseURL}/blocklists/${name}`, data);\n  }\n\n  deleteBlockList(name: string) {\n    return this.delete<APIResponse>(`${this.baseURL}/blocklists/${name}`);\n  }\n\n  exportChannels(request: Array<ExportChannelRequest>) {\n    const payload = {\n      channels: request,\n    };\n    return this.post<APIResponse & ExportChannelResponse>(\n      `${this.baseURL}/export_channels`,\n      payload,\n    );\n  }\n\n  exportChannel(request: ExportChannelRequest) {\n    return this.exportChannels([request]);\n  }\n\n  getExportChannelStatus(id: string) {\n    return this.get<APIResponse & ExportChannelStatusResponse>(\n      `${this.baseURL}/export_channels/${id}`,\n    );\n  }\n\n  /**\n   * createSegment - Creates a Campaign Segment\n   *\n   * @param {SegmentData} params Segment data\n   *\n   * @return {Segment} The Created Segment\n   */\n  async createSegment(params: SegmentData) {\n    const { segment } = await this.post<{ segment: Segment }>(\n      this.baseURL + `/segments`,\n      { segment: params },\n    );\n    return segment;\n  }\n\n  /**\n   * getSegment - Get a Campaign Segment\n   *\n   * @param {string} id Segment ID\n   *\n   * @return {Segment} A Segment\n   */\n  async getSegment(id: string) {\n    const { segment } = await this.get<{ segment: Segment }>(\n      this.baseURL + `/segments/${id}`,\n    );\n    return segment;\n  }\n\n  /**\n   * listSegments - List Campaign Segments\n   *\n   *\n   * @return {Segment[]} Segments\n   */\n  async listSegments(options: { limit?: number; offset?: number }) {\n    const { segments } = await this.get<{ segments: Segment[] }>(\n      this.baseURL + `/segments`,\n      options,\n    );\n    return segments;\n  }\n\n  /**\n   * updateSegment - Update a Campaign Segment\n   *\n   * @param {string} id Segment ID\n   * @param {Partial<SegmentData>} params Segment data\n   *\n   * @return {Segment} Updated Segment\n   */\n  async updateSegment(id: string, params: Partial<SegmentData>) {\n    const { segment } = await this.put<{ segment: Segment }>(\n      this.baseURL + `/segments/${id}`,\n      { segment: params },\n    );\n    return segment;\n  }\n\n  /**\n   * deleteSegment - Delete a Campaign Segment\n   *\n   * @param {string} id Segment ID\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  async deleteSegment(id: string) {\n    return this.delete<APIResponse>(this.baseURL + `/segments/${id}`);\n  }\n\n  /**\n   * createCampaign - Creates a Campaign\n   *\n   * @param {CampaignData} params Campaign data\n   *\n   * @return {Campaign} The Created Campaign\n   */\n  async createCampaign(params: CampaignData) {\n    const { campaign } = await this.post<{ campaign: Campaign }>(\n      this.baseURL + `/campaigns`,\n      { campaign: params },\n    );\n    return campaign;\n  }\n\n  /**\n   * getCampaign - Get a Campaign\n   *\n   * @param {string} id Campaign ID\n   *\n   * @return {Campaign} A Campaign\n   */\n  async getCampaign(id: string) {\n    const { campaign } = await this.get<{ campaign: Campaign }>(\n      this.baseURL + `/campaigns/${id}`,\n    );\n    return campaign;\n  }\n\n  /**\n   * listCampaigns - List Campaigns\n   *\n   *\n   * @return {Campaign[]} Campaigns\n   */\n  async listCampaigns(options: { limit?: number; offset?: number }) {\n    const { campaigns } = await this.get<{ campaigns: Campaign[] }>(\n      this.baseURL + `/campaigns`,\n      options,\n    );\n    return campaigns;\n  }\n\n  /**\n   * updateCampaign - Update a Campaign\n   *\n   * @param {string} id Campaign ID\n   * @param {Partial<CampaignData>} params Campaign data\n   *\n   * @return {Campaign} Updated Campaign\n   */\n  async updateCampaign(id: string, params: Partial<CampaignData>) {\n    const { campaign } = await this.put<{ campaign: Campaign }>(\n      this.baseURL + `/campaigns/${id}`,\n      { campaign: params },\n    );\n    return campaign;\n  }\n\n  /**\n   * deleteCampaign - Delete a Campaign\n   *\n   * @param {string} id Campaign ID\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  async deleteCampaign(id: string) {\n    return this.delete<APIResponse>(this.baseURL + `/campaigns/${id}`);\n  }\n\n  /**\n   * scheduleCampaign - Schedule a Campaign\n   *\n   * @param {string} id Campaign ID\n   * @param {{sendAt: number}} params Schedule params\n   *\n   * @return {Campaign} Scheduled Campaign\n   */\n  async scheduleCampaign(id: string, params: { sendAt: number }) {\n    const { sendAt } = params;\n    const { campaign } = await this.patch<{ campaign: Campaign }>(\n      this.baseURL + `/campaigns/${id}/schedule`,\n      { send_at: sendAt },\n    );\n    return campaign;\n  }\n\n  /**\n   * stopCampaign - Stop a Campaign\n   *\n   * @param {string} id Campaign ID\n   *\n   * @return {Campaign} Stopped Campaign\n   */\n  async stopCampaign(id: string) {\n    const { campaign } = await this.patch<{ campaign: Campaign }>(\n      this.baseURL + `/campaigns/${id}/stop`,\n    );\n    return campaign;\n  }\n\n  /**\n   * resumeCampaign - Resume a Campaign\n   *\n   * @param {string} id Campaign ID\n   *\n   * @return {Campaign} Resumed Campaign\n   */\n  async resumeCampaign(id: string) {\n    const { campaign } = await this.patch<{ campaign: Campaign }>(\n      this.baseURL + `/campaigns/${id}/resume`,\n    );\n    return campaign;\n  }\n\n  /**\n   * testCampaign - Test a Campaign\n   *\n   * @param {string} id Campaign ID\n   * @param {{users: string[]}} params Test params\n   * @return {Campaign} Test Campaign\n   */\n  async testCampaign(id: string, params: { users: string[] }) {\n    const { users } = params;\n    const { campaign } = await this.post<{ campaign: Campaign }>(\n      this.baseURL + `/campaigns/${id}/test`,\n      { users },\n    );\n    return campaign;\n  }\n}\n","import { PermissionObject } from './types';\n\ntype RequiredPermissionObject = Required<PermissionObject>;\n\nexport const Allow = 'Allow';\nexport const Deny = 'Deny';\nexport const AnyResource = ['*'];\nexport const AnyRole = ['*'];\nexport const MaxPriority = 999;\nexport const MinPriority = 1;\n\n// deprecated permission object class, you should use the new permission system v2 and use permissions\n// defined in BuiltinPermissions to configure your channel types\n\nexport class Permission {\n  name: RequiredPermissionObject['name'];\n  action: RequiredPermissionObject['action'];\n  owner: RequiredPermissionObject['owner'];\n  priority: RequiredPermissionObject['priority'];\n  resources: RequiredPermissionObject['resources'];\n  roles: RequiredPermissionObject['roles'];\n  constructor(\n    name: string,\n    priority: number,\n    resources = AnyResource,\n    roles = AnyRole,\n    owner = false,\n    action: RequiredPermissionObject['action'] = Allow,\n  ) {\n    this.name = name;\n    this.action = action;\n    this.owner = owner;\n    this.priority = priority;\n    this.resources = resources;\n    this.roles = roles;\n  }\n}\n\n// deprecated\nexport const AllowAll = new Permission(\n  'Allow all',\n  MaxPriority,\n  AnyResource,\n  AnyRole,\n  false,\n  Allow,\n);\n\n// deprecated\nexport const DenyAll = new Permission(\n  'Deny all',\n  MinPriority,\n  AnyResource,\n  AnyRole,\n  false,\n  Deny,\n);\n\nexport type Role =\n  | 'admin'\n  | 'user'\n  | 'guest'\n  | 'anonymous'\n  | 'channel_member'\n  | 'channel_moderator'\n  | string;\n\nexport const BuiltinRoles = {\n  Admin: 'admin',\n  Anonymous: 'anonymous',\n  ChannelMember: 'channel_member',\n  ChannelModerator: 'channel_moderator',\n  Guest: 'guest',\n  User: 'user',\n};\n\nexport const BuiltinPermissions = {\n  AddLinks: 'Add Links',\n  BanUser: 'Ban User',\n  CreateChannel: 'Create Channel',\n  CreateMessage: 'Create Message',\n  CreateReaction: 'Create Reaction',\n  DeleteAnyAttachment: 'Delete Any Attachment',\n  DeleteAnyChannel: 'Delete Any Channel',\n  DeleteAnyMessage: 'Delete Any Message',\n  DeleteAnyReaction: 'Delete Any Reaction',\n  DeleteOwnAttachment: 'Delete Own Attachment',\n  DeleteOwnChannel: 'Delete Own Channel',\n  DeleteOwnMessage: 'Delete Own Message',\n  DeleteOwnReaction: 'Delete Own Reaction',\n  ReadAnyChannel: 'Read Any Channel',\n  ReadOwnChannel: 'Read Own Channel',\n  RunMessageAction: 'Run Message Action',\n  UpdateAnyChannel: 'Update Any Channel',\n  UpdateAnyMessage: 'Update Any Message',\n  UpdateMembersAnyChannel: 'Update Members Any Channel',\n  UpdateMembersOwnChannel: 'Update Members Own Channel',\n  UpdateOwnChannel: 'Update Own Channel',\n  UpdateOwnMessage: 'Update Own Message',\n  UploadAttachment: 'Upload Attachment',\n  UseFrozenChannel: 'Send messages and reactions to frozen channels',\n};\n"]},"metadata":{},"sourceType":"module"}